/*! kodi-webinterface by Jeremy Graham - built on 01-02-2015 */
var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
}, __bind = function(fn, me) {
    return function() {
        return fn.apply(me, arguments);
    };
}, __slice = [].slice;

this.helpers = {};

this.config = {
    "static": {
        jsonRpcEndpoint: "jsonrpc"
    }
};

this.Kodi = function(Backbone, Marionette) {
    var App;
    App = new Backbone.Marionette.Application();
    App.addRegions({
        root: "body"
    });
    App.vent.on("shell:ready", function(_this) {
        return function(options) {
            return Backbone.history.start();
        };
    }(this));
    return App;
}(Backbone, Marionette);

this.Kodi.start();

helpers.cache = {
    store: {},
    defaultExpiry: 406800
};

helpers.cache.set = function(key, data, expires) {
    if (expires == null) {
        expires = helpers.cache.defaultExpiry;
    }
    helpers.cache.store[key] = {
        data: data,
        expires: expires + helpers.global.time(),
        key: key
    };
    return data;
};

helpers.cache.get = function(key, fallback) {
    if (fallback == null) {
        fallback = false;
    }
    if (helpers.cache.store[key] != null && helpers.cache.store[key].expires <= helpers.global.time()) {
        return helpers.cache.store[key].data;
    } else {
        return fallback;
    }
};

helpers.cache.del = function(key) {
    if (helpers.cache.store[key] != null) {
        return delete helpers.cache.store[key];
    }
};

helpers.cache.clear = function() {
    return helpers.cache.store = {};
};

config.get = function(type, id, defaultData, callback) {
    var data;
    if (defaultData == null) {
        defaultData = "";
    }
    data = Kodi.request("config:" + type + ":get", id, defaultData);
    if (callback != null) {
        callback(data);
    }
    return data;
};

config.set = function(type, id, data, callback) {
    var resp;
    resp = Kodi.request("config:" + type + ":set", id, data);
    if (callback != null) {
        callback(resp);
    }
    return resp;
};

helpers.debug = {};

helpers.debug.consoleStyle = function(severity) {
    var defaults, mods, prop, styles;
    defaults = {
        background: "#ccc",
        padding: "0 5px",
        color: "#444",
        "font-weight": "bold",
        "font-size": "110%"
    };
    styles = [];
    mods = {
        info: "#D8FEFE",
        success: "#CCFECD",
        warning: "#FFFDD9",
        error: "#FFCECD"
    };
    if (typeof style !== "undefined" && style !== null) {
        defaults.background = mods[severity];
    }
    for (prop in defaults) {
        styles.push(prop + ": " + defaults[prop]);
    }
    return styles.join("; ");
};

helpers.debug.log = function(msg, data, severity, caller) {
    if (data == null) {
        data = "No data provided";
    }
    if (severity == null) {
        severity = "error";
    }
    if (caller == null) {
        caller = arguments.callee.caller.toString();
    }
    if (data[0] != null && data[0].error === "Internal server error") {
        return msg;
    } else {
        return console.log("%c Bam! Error occurred in: " + caller, helpers.debug.consoleStyle(severity), data);
    }
};

helpers.debug.rpcError = function(obj) {
    var caller;
    caller = arguments.callee.caller.toString();
    return helpers.debug.log("jsonRPC Rquequest", obj, "error", caller);
};

helpers.global = {};

helpers.global.shuffle = function(array) {
    var i, j, temp;
    i = array.length - 1;
    while (i > 0) {
        j = Math.floor(Math.random() * (i + 1));
        temp = array[i];
        array[i] = array[j];
        array[j] = temp;
        i--;
    }
    return array;
};

helpers.global.getRandomInt = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
};

helpers.global.time = function() {
    var timestamp;
    timestamp = new Date().getTime();
    return timestamp / 1e3;
};

helpers.global.loading = function(_this) {
    return function(state) {
        var op;
        if (state == null) {
            state = "start";
        }
        op = state === "start" ? "add" : "remove";
        if (_this.Kodi != null) {
            return _this.Kodi.execute("body:state", op, "loading");
        }
    };
}(this);

helpers.global.numPad = function(num, size) {
    var s;
    s = "000000000" + num;
    return s.substr(s.length - size);
};

helpers.global.secToTime = function(totalSec) {
    var hours, minutes, seconds;
    if (totalSec == null) {
        totalSec = 0;
    }
    hours = parseInt(totalSec / 3600) % 24;
    minutes = parseInt(totalSec / 60) % 60;
    seconds = totalSec % 60;
    return {
        hours: hours,
        minutes: minutes,
        seconds: seconds
    };
};

helpers.global.timeToSec = function(time) {
    var hours, minutes;
    hours = parseInt(time.hours) * (60 * 60);
    minutes = parseInt(time.minutes) * 60;
    return parseInt(hours) + parseInt(minutes) + parseInt(time.seconds);
};

helpers.global.formatTime = function(time) {
    var timeStr;
    if (time == null) {
        return 0;
    } else {
        timeStr = (time.hours > 0 ? time.hours + ":" : "") + (time.hours > 0 && time.minutes < 10 ? "0" : "") + (time.minutes > 0 ? time.minutes + ":" : "") + ((time.minutes > 0 || time.hours > 0) && time.seconds < 10 ? "0" : "") + time.seconds;
        return timeStr;
    }
};

helpers.url = {};

helpers.url.map = {
    artist: "music/artist/:id",
    album: "music/album/:id",
    song: "music/song/:id",
    movie: "movie/:id",
    tvshow: "tvshow/:id",
    tvseason: "tvshow/:tvshowid/:id",
    tvepisode: "tvshow/:tvshowid/:tvseason/:id",
    file: "browser/file/:id"
};

helpers.url.get = function(type, id, replacements) {
    var path, token;
    if (id == null) {
        id = "";
    }
    if (replacements == null) {
        replacements = {};
    }
    path = "";
    if (helpers.url.map[type] != null) {
        path = helpers.url.map[type];
    }
    replacements[":id"] = id;
    for (token in replacements) {
        id = replacements[token];
        path = path.replace(token, id);
    }
    return path;
};

Cocktail.patch(Backbone);

(function(Backbone) {
    var methods, _sync;
    _sync = Backbone.sync;
    Backbone.sync = function(method, entity, options) {
        var sync;
        if (options == null) {
            options = {};
        }
        _.defaults(options, {
            beforeSend: _.bind(methods.beforeSend, entity),
            complete: _.bind(methods.complete, entity)
        });
        sync = _sync(method, entity, options);
        if (!entity._fetch && method === "read") {
            return entity._fetch = sync;
        }
    };
    return methods = {
        beforeSend: function() {
            return this.trigger("sync:start", this);
        },
        complete: function() {
            return this.trigger("sync:stop", this);
        }
    };
})(Backbone);

(function(Backbone) {
    return _.extend(Backbone.Marionette.Application.prototype, {
        navigate: function(route, options) {
            if (options == null) {
                options = {};
            }
            return Backbone.history.navigate(route, options);
        },
        getCurrentRoute: function() {
            var frag;
            frag = Backbone.history.fragment;
            if (_.isEmpty(frag)) {
                return null;
            } else {
                return frag;
            }
        },
        startHistory: function() {
            if (Backbone.history) {
                return Backbone.history.start();
            }
        },
        register: function(instance, id) {
            if (this._registry == null) {
                this._registry = {};
            }
            return this._registry[id] = instance;
        },
        unregister: function(instance, id) {
            return delete this._registry[id];
        },
        resetRegistry: function() {
            var controller, key, msg, oldCount, _ref;
            oldCount = this.getRegistrySize();
            _ref = this._registry;
            for (key in _ref) {
                controller = _ref[key];
                controller.region.close();
            }
            msg = "There were " + oldCount + " controllers in the registry, there are now " + this.getRegistrySize();
            if (this.getRegistrySize() > 0) {
                return console.warn(msg, this._registry);
            } else {
                return console.log(msg);
            }
        },
        getRegistrySize: function() {
            return _.size(this._registry);
        }
    });
})(Backbone);

(function(Marionette) {
    return _.extend(Marionette.Renderer, {
        extension: [ ".jst" ],
        render: function(template, data) {
            var path;
            path = this.getTemplate(template);
            if (!path) {
                throw "Template " + template + " not found!";
            }
            return path(data);
        },
        getTemplate: function(template) {
            var path;
            path = this.insertAt(template.split("/"), -1, "tpl").join("/");
            path = path + this.extension;
            if (JST[path]) {
                return JST[path];
            }
        },
        insertAt: function(array, index, item) {
            array.splice(index, 0, item);
            return array;
        }
    });
})(Marionette);

this.Kodi.module("Entities", function(Entities, App, Backbone, Marionette, $, _) {
    return Entities.Collection = function(_super) {
        __extends(Collection, _super);
        function Collection() {
            return Collection.__super__.constructor.apply(this, arguments);
        }
        Collection.prototype.getRawCollection = function() {
            var model, objs, _i, _len, _ref;
            objs = [];
            if (this.models.length > 0) {
                _ref = this.models;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    model = _ref[_i];
                    objs.push(model.attributes);
                }
            }
            return objs;
        };
        return Collection;
    }(Backbone.Collection);
});

this.Kodi.module("Entities", function(Entities, App, Backbone, Marionette, $, _) {
    return Entities.Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            this.saveError = __bind(this.saveError, this);
            this.saveSuccess = __bind(this.saveSuccess, this);
            return Model.__super__.constructor.apply(this, arguments);
        }
        Model.prototype.destroy = function(options) {
            if (options == null) {
                options = {};
            }
            _.defaults(options, {
                wait: true
            });
            this.set({
                _destroy: true
            });
            return Model.__super__.destroy.call(this, options);
        };
        Model.prototype.isDestroyed = function() {
            return this.get("_destroy");
        };
        Model.prototype.save = function(data, options) {
            var isNew;
            if (options == null) {
                options = {};
            }
            isNew = this.isNew();
            _.defaults(options, {
                wait: true,
                success: _.bind(this.saveSuccess, this, isNew, options.collection),
                error: _.bind(this.saveError, this)
            });
            this.unset("_errors");
            return Model.__super__.save.call(this, data, options);
        };
        Model.prototype.saveSuccess = function(isNew, collection) {
            if (isNew) {
                if (collection) {
                    collection.add(this);
                }
                if (collection) {
                    collection.trigger("model:created", this);
                }
                return this.trigger("created", this);
            } else {
                if (collection == null) {
                    collection = this.collection;
                }
                if (collection) {
                    collection.trigger("model:updated", this);
                }
                return this.trigger("updated", this);
            }
        };
        Model.prototype.saveError = function(model, xhr, options) {
            var _ref;
            if (!(xhr.status === 500 || xhr.status === 404)) {
                return this.set({
                    _errors: (_ref = $.parseJSON(xhr.responseText)) != null ? _ref.errors : void 0
                });
            }
        };
        return Model;
    }(Backbone.Model);
});

this.Kodi.module("Entities", function(Entities, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        storageKey: "config:app",
        getCollection: function() {
            var collection;
            collection = new Entities.ConfigAppCollection();
            collection.fetch();
            return collection;
        },
        getConfig: function(id, collection) {
            if (collection == null) {
                collection = API.getCollection();
            }
            return collection.find({
                id: id
            });
        }
    };
    Entities.ConfigApp = function(_super) {
        __extends(ConfigApp, _super);
        function ConfigApp() {
            return ConfigApp.__super__.constructor.apply(this, arguments);
        }
        ConfigApp.prototype.defaults = {
            id: 0,
            data: {}
        };
        return ConfigApp;
    }(Entities.Model);
    Entities.ConfigAppCollection = function(_super) {
        __extends(ConfigAppCollection, _super);
        function ConfigAppCollection() {
            return ConfigAppCollection.__super__.constructor.apply(this, arguments);
        }
        ConfigAppCollection.prototype.model = Entities.ConfigApp;
        ConfigAppCollection.prototype.localStorage = new Backbone.LocalStorage(API.storageKey);
        return ConfigAppCollection;
    }(Entities.Collection);
    App.reqres.setHandler("config:app:get", function(configId, defaultData) {
        var model;
        model = API.getConfig(configId);
        if (model != null) {
            return model.get("data");
        } else {
            return defaultData;
        }
    });
    App.reqres.setHandler("config:app:set", function(configId, configData) {
        var collection, model;
        collection = API.getCollection();
        model = API.getConfig(configId, collection);
        if (model != null) {
            return model.save({
                data: configData
            });
        } else {
            collection.create({
                id: configId,
                data: configData
            });
            return configData;
        }
    });
    App.reqres.setHandler("config:static:get", function(configId, defaultData) {
        var data;
        data = config["static"][configId] != null ? config["static"][configId] : defaultData;
        return data;
    });
    return App.reqres.setHandler("config:static:set", function(configId, data) {
        config["static"][configId] = data;
        return data;
    });
});

this.Kodi.module("KodiEntities", function(KodiEntities, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        initialize: function() {
            return $.jsonrpc.defaultUrl = config.get("static", "jsonRpcEndpoint");
        },
        multipleCommands: function(commands, callback) {
            var obj;
            obj = $.jsonrpc(commands);
            obj.fail(function(error) {
                return helpers.debug.rpcError(error);
            });
            return obj;
        },
        singleCommand: function(command, params) {
            var obj;
            command = {
                method: command
            };
            if (params != null && params.length > 0) {
                command.params = params;
            }
            obj = API.multipleCommands([ command ]);
            return obj;
        },
        parseResponse: function(response) {
            var result, results, _i, _len;
            results = [];
            console.log(response);
            for (_i = 0, _len = response.length; _i < _len; _i++) {
                result = response[_i];
                if (result.result) {
                    results.push(result.result);
                } else {
                    helpers.debug.rpcError(result.error);
                }
            }
            return results;
        }
    };
    App.commands.setHandler("when:commands:fetched", function(commands, callback) {
        var request;
        request = API.multipleCommands(commands);
        return request.done(function(response) {
            var result;
            result = API.parseResponse(response);
            return callback(result);
        });
    });
    App.commands.setHandler("when:command:fetched", function(command, params, callback) {
        var request;
        request = API.singleCommand(command, params);
        return request.done(function(response) {
            var result, results;
            results = API.parseResponse(response);
            result = results.length === 1 ? results[0] : {};
            return callback(result);
        });
    });
    return App.commands.setHandler("when:entity:fetched", function(entities, callback) {
        var xhrs;
        helpers.global.loading("start");
        xhrs = _.chain([ entities ]).flatten().pluck("_fetch").value();
        return $.when.apply($, xhrs).done(function() {
            helpers.global.loading("end");
            return callback();
        });
    });
});

this.Kodi.module("KodiEntities", function(KodiEntities, App, Backbone, Marionette, $, _) {
    return KodiEntities.Collection = function(_super) {
        __extends(Collection, _super);
        function Collection() {
            return Collection.__super__.constructor.apply(this, arguments);
        }
        Collection.prototype.url = config.get("static", "jsonRpcEndpoint");
        Collection.prototype.rpc = new Backbone.Rpc({
            useNamedParameters: true,
            namespaceDelimiter: ""
        });
        Collection.prototype.sync = function(method, model, options) {
            if (method === "read") {
                this.options = options;
            }
            return Backbone.sync(method, model, options);
        };
        Collection.prototype.argCheckOption = function(option, fallback) {
            if (this.options != null && this.options[option] != null) {
                return this.options[option];
            } else {
                return fallback;
            }
        };
        Collection.prototype.argSort = function(method, order) {
            var arg;
            if (order == null) {
                order = "ascending";
            }
            arg = {
                method: method,
                order: order,
                ignorearticle: true
            };
            return this.argCheckOption("sort", arg);
        };
        Collection.prototype.argLimit = function(start, end) {
            var arg;
            if (start == null) {
                start = 0;
            }
            if (end == null) {
                end = "all";
            }
            arg = {
                start: start
            };
            if (end !== "all") {
                arg.end = end;
            }
            return this.argCheckOption("limit", arg);
        };
        Collection.prototype.argFilter = function(name, value) {
            var arg;
            arg = {};
            if (name != null) {
                arg[name] = value;
            }
            return this.argCheckOption("filter", arg);
        };
        return Collection;
    }(App.Entities.Collection);
});

this.Kodi.module("KodiEntities", function(KodiEntities, App, Backbone, Marionette, $, _) {
    return KodiEntities.Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        Model.prototype.url = config.get("static", "jsonRpcEndpoint");
        Model.prototype.rpc = new Backbone.Rpc({
            useNamedParameters: true,
            namespaceDelimiter: ""
        });
        Model.prototype.modelDefaults = {
            fullyloaded: false,
            thumbnail: "",
            thumbsUp: false
        };
        Model.prototype.parseModel = function(type, model, id) {
            model.id = id;
            model = App.request("images:path:entity", model);
            model.url = helpers.url.get(type, id);
            model.type = type;
            return model;
        };
        Model.prototype.parseFieldsToDefaults = function(fields, defaults) {
            var field, _i, _len;
            if (defaults == null) {
                defaults = {};
            }
            for (_i = 0, _len = fields.length; _i < _len; _i++) {
                field = fields[_i];
                defaults[field] = "";
            }
            return defaults;
        };
        return Model;
    }(App.Entities.Model);
});

this.Kodi.module("KodiEntities", function(KodiEntities, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        getAlbumFields: function(type) {
            var baseFields, extraFields, fields;
            if (type == null) {
                type = "small";
            }
            baseFields = [ "thumbnail", "playcount", "artistid", "artist", "genre", "albumlabel", "year" ];
            extraFields = [ "fanart", "style", "mood", "description", "genreid", "rating" ];
            if (type === "full") {
                fields = baseFields.concat(extraFields);
                return fields;
            } else {
                return baseFields;
            }
        },
        getAlbum: function(id, options) {
            var album;
            album = new App.KodiEntities.Album();
            album.set({
                albumid: parseInt(id),
                properties: API.getAlbumFields("full")
            });
            album.fetch(options);
            return album;
        },
        getAlbums: function(options) {
            var albums, defaultOptions;
            defaultOptions = {
                reset: false
            };
            options = _.extend(defaultOptions, options);
            albums = helpers.cache.get("album:entities");
            if (albums === false || options.reset === true) {
                albums = new KodiEntities.AlbumCollection();
                albums.fetch(options);
            }
            helpers.cache.set("album:entities", albums);
            return albums;
        }
    };
    KodiEntities.Album = function(_super) {
        __extends(Album, _super);
        function Album() {
            return Album.__super__.constructor.apply(this, arguments);
        }
        Album.prototype.defaults = function() {
            var fields;
            fields = _.extend(this.modelDefaults, {
                albumid: 1,
                album: ""
            });
            return this.parseFieldsToDefaults(API.getAlbumFields("full"), fields);
        };
        Album.prototype.methods = {
            read: [ "AudioLibrary.GetAlbumDetails", "albumid", "properties" ]
        };
        Album.prototype.arg2 = API.getAlbumFields("full");
        Album.prototype.parse = function(resp, xhr) {
            var obj;
            obj = resp.albumdetails != null ? resp.albumdetails : resp;
            if (resp.albumdetails != null) {
                obj.fullyloaded = true;
            }
            return this.parseModel("album", obj, obj.albumid);
        };
        return Album;
    }(App.KodiEntities.Model);
    KodiEntities.AlbumCollection = function(_super) {
        __extends(AlbumCollection, _super);
        function AlbumCollection() {
            return AlbumCollection.__super__.constructor.apply(this, arguments);
        }
        AlbumCollection.prototype.model = KodiEntities.Album;
        AlbumCollection.prototype.methods = {
            read: [ "AudioLibrary.GetAlbums", "arg1", "arg2", "arg3", "arg4" ]
        };
        AlbumCollection.prototype.arg1 = function() {
            return API.getAlbumFields("small");
        };
        AlbumCollection.prototype.arg2 = function() {
            return this.argLimit();
        };
        AlbumCollection.prototype.arg3 = function() {
            return this.argSort("album", "ascending");
        };
        AlbumCollection.prototype.arg3 = function() {
            return this.argFilter();
        };
        AlbumCollection.prototype.parse = function(resp, xhr) {
            return resp.albums;
        };
        return AlbumCollection;
    }(App.KodiEntities.Collection);
    App.reqres.setHandler("album:entity", function(id, options) {
        if (options == null) {
            options = {};
        }
        return API.getAlbum(id, options);
    });
    return App.reqres.setHandler("album:entities", function(options) {
        if (options == null) {
            options = {};
        }
        return API.getAlbums(options);
    });
});

this.Kodi.module("KodiEntities", function(KodiEntities, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        getArtistFields: function(type) {
            var baseFields, extraFields, fields;
            if (type == null) {
                type = "small";
            }
            baseFields = [ "thumbnail" ];
            extraFields = [ "fanart", "genre", "style", "mood", "born", "formed", "description" ];
            if (type === "full") {
                fields = baseFields.concat(extraFields);
                return fields;
            } else {
                return baseFields;
            }
        },
        getArtist: function(id, options) {
            var artist;
            artist = new App.KodiEntities.Artist();
            artist.set({
                artistid: parseInt(id),
                properties: API.getArtistFields("full")
            });
            artist.fetch(options);
            return artist;
        },
        getArtists: function(options) {
            var artists, defaultOptions;
            defaultOptions = {
                reset: false
            };
            options = _.extend(defaultOptions, options);
            artists = helpers.cache.get("artist:entities");
            if (artists === false || options.reset === true) {
                artists = new KodiEntities.ArtistCollection();
                artists.fetch(options);
            }
            helpers.cache.set("artist:entities", artists);
            return artists;
        }
    };
    KodiEntities.Artist = function(_super) {
        __extends(Artist, _super);
        function Artist() {
            return Artist.__super__.constructor.apply(this, arguments);
        }
        Artist.prototype.defaults = function() {
            var fields;
            fields = _.extend(this.modelDefaults, {
                artistid: 1,
                artist: ""
            });
            return this.parseFieldsToDefaults(API.getArtistFields("full"), fields);
        };
        Artist.prototype.methods = {
            read: [ "AudioLibrary.GetArtistDetails", "artistid", "properties" ]
        };
        Artist.prototype.arg2 = API.getArtistFields("full");
        Artist.prototype.parse = function(resp, xhr) {
            var obj;
            obj = resp.artistdetails != null ? resp.artistdetails : resp;
            if (resp.artistdetails != null) {
                obj.fullyloaded = true;
            }
            return this.parseModel("artist", obj, obj.artistid);
        };
        return Artist;
    }(App.KodiEntities.Model);
    KodiEntities.ArtistCollection = function(_super) {
        __extends(ArtistCollection, _super);
        function ArtistCollection() {
            return ArtistCollection.__super__.constructor.apply(this, arguments);
        }
        ArtistCollection.prototype.model = KodiEntities.Artist;
        ArtistCollection.prototype.methods = {
            read: [ "AudioLibrary.GetArtists", "arg1", "arg2", "arg3", "arg4" ]
        };
        ArtistCollection.prototype.arg1 = function() {
            return true;
        };
        ArtistCollection.prototype.arg2 = function() {
            return API.getArtistFields("small");
        };
        ArtistCollection.prototype.arg3 = function() {
            return this.argLimit();
        };
        ArtistCollection.prototype.arg4 = function() {
            return this.argSort("artist", "ascending");
        };
        ArtistCollection.prototype.parse = function(resp, xhr) {
            return resp.artists;
        };
        return ArtistCollection;
    }(App.KodiEntities.Collection);
    App.reqres.setHandler("artist:entity", function(id, options) {
        if (options == null) {
            options = {};
        }
        return API.getArtist(id, options);
    });
    return App.reqres.setHandler("artist:entities", function(options) {
        if (options == null) {
            options = {};
        }
        console.log("fetching");
        return API.getArtists(options);
    });
});

this.Kodi.module("KodiEntities", function(KodiEntities, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        getSongFields: function(type) {
            var baseFields, extraFields, fields, minimalFields;
            if (type == null) {
                type = "small";
            }
            minimalFields = [ "title", "file" ];
            baseFields = [ "thumbnail", "artist", "artistid", "album", "albumid", "lastplayed", "track", "year", "duration" ];
            extraFields = [ "fanart", "genre", "style", "mood", "born", "formed", "description", "lyrics" ];
            if (type === "full") {
                fields = minimalFields.concat(baseFields).concat(extraFields);
                return fields;
            } else if (type === "minimal") {
                return minimalFields;
            } else {
                return baseFields;
            }
        },
        getSong: function(id, options) {
            var artist;
            artist = new App.KodiEntities.Song();
            artist.set({
                songid: parseInt(id),
                properties: API.getSongFields("full")
            });
            artist.fetch(options);
            return artist;
        },
        getFilteredSongs: function(options) {
            var defaultOptions, songs;
            defaultOptions = {
                reset: false
            };
            options = _.extend(defaultOptions, options);
            songs = new KodiEntities.SongFilteredCollection();
            songs.fetch(options);
            return songs;
        },
        parseSongsToAlbumSongs: function(songs) {
            var albumid, collections, parsedRaw, song, songSet, songsRaw, _i, _len;
            songsRaw = songs.getRawCollection();
            parsedRaw = {};
            collections = {};
            for (_i = 0, _len = songsRaw.length; _i < _len; _i++) {
                song = songsRaw[_i];
                if (!parsedRaw[song.albumid]) {
                    parsedRaw[song.albumid] = [];
                }
                parsedRaw[song.albumid].push(song);
            }
            for (albumid in parsedRaw) {
                songSet = parsedRaw[albumid];
                collections[albumid] = new KodiEntities.SongCustomCollection(songSet);
            }
            return collections;
        }
    };
    KodiEntities.Song = function(_super) {
        __extends(Song, _super);
        function Song() {
            return Song.__super__.constructor.apply(this, arguments);
        }
        Song.prototype.defaults = function() {
            var fields;
            fields = _.extend(this.modelDefaults, {
                songid: 1,
                artist: ""
            });
            return this.parseFieldsToDefaults(API.getSongFields("full"), fields);
        };
        Song.prototype.methods = {
            read: [ "AudioLibrary.GetSongDetails", "songidid", "properties" ]
        };
        Song.prototype.arg2 = API.getSongFields("full");
        Song.prototype.parse = function(resp, xhr) {
            var obj;
            obj = resp.songdetails != null ? resp.songdetails : resp;
            if (resp.songdetails != null) {
                obj.fullyloaded = true;
            }
            return this.parseModel("song", obj, obj.songid);
        };
        return Song;
    }(App.KodiEntities.Model);
    KodiEntities.SongFilteredCollection = function(_super) {
        __extends(SongFilteredCollection, _super);
        function SongFilteredCollection() {
            return SongFilteredCollection.__super__.constructor.apply(this, arguments);
        }
        SongFilteredCollection.prototype.model = KodiEntities.Song;
        SongFilteredCollection.prototype.methods = {
            read: [ "AudioLibrary.GetSongs", "arg1", "arg2", "arg3", "arg4" ]
        };
        SongFilteredCollection.prototype.arg1 = function() {
            return API.getSongFields("small");
        };
        SongFilteredCollection.prototype.arg2 = function() {
            return this.argLimit();
        };
        SongFilteredCollection.prototype.arg3 = function() {
            return this.argSort("track", "ascending");
        };
        SongFilteredCollection.prototype.arg4 = function() {
            return this.argFilter();
        };
        SongFilteredCollection.prototype.parse = function(resp, xhr) {
            return resp.songs;
        };
        return SongFilteredCollection;
    }(App.KodiEntities.Collection);
    KodiEntities.SongCustomCollection = function(_super) {
        __extends(SongCustomCollection, _super);
        function SongCustomCollection() {
            return SongCustomCollection.__super__.constructor.apply(this, arguments);
        }
        SongCustomCollection.prototype.model = KodiEntities.Song;
        return SongCustomCollection;
    }(App.KodiEntities.Collection);
    App.reqres.setHandler("song:entity", function(id, options) {
        if (options == null) {
            options = {};
        }
        return API.getSong(id, options);
    });
    App.reqres.setHandler("song:filtered:entities", function(options) {
        if (options == null) {
            options = {};
        }
        return API.getFilteredSongs(options);
    });
    return App.reqres.setHandler("song:albumparse:entities", function(songs) {
        return API.parseSongsToAlbumSongs(songs);
    });
});

this.Kodi.module("Entities", function(Entities, App, Backbone, Marionette, $, _) {
    var API;
    Entities.NavMain = function(_super) {
        __extends(NavMain, _super);
        function NavMain() {
            return NavMain.__super__.constructor.apply(this, arguments);
        }
        NavMain.prototype.defaults = {
            id: 0,
            title: "Untitled",
            path: "#",
            icon: "",
            classes: "",
            parent: 0,
            children: []
        };
        return NavMain;
    }(Entities.Model);
    Entities.NavMainCollection = function(_super) {
        __extends(NavMainCollection, _super);
        function NavMainCollection() {
            return NavMainCollection.__super__.constructor.apply(this, arguments);
        }
        NavMainCollection.prototype.model = Entities.NavMain;
        return NavMainCollection;
    }(Entities.Collection);
    API = {
        getDefaultStructure: function(items, model) {
            var nav, navCollection, navParsed;
            nav = [];
            nav.push({
                id: 1,
                title: "Music",
                path: "#music",
                icon: "mdi-av-my-library-music",
                classes: "nav-music",
                parent: 0
            });
            nav.push({
                id: 2,
                title: "Artists",
                path: "#music/artists",
                icon: "",
                classes: "",
                parent: 1
            });
            nav.push({
                id: 2,
                title: "Albums",
                path: "#music/albums",
                icon: "",
                classes: "",
                parent: 1
            });
            nav.push({
                id: 3,
                title: "Recently Added",
                path: "#music/added",
                icon: "",
                classes: "",
                parent: 1
            });
            nav.push({
                id: 4,
                title: "Recently Played",
                path: "#music/played",
                icon: "",
                classes: "",
                parent: 1
            });
            nav.push({
                id: 5,
                title: "Genres",
                path: "#music/genres",
                icon: "",
                classes: "",
                parent: 1
            });
            nav.push({
                id: 6,
                title: "Years",
                path: "#music/years",
                icon: "",
                classes: "",
                parent: 1
            });
            nav.push({
                id: 11,
                title: "Movies",
                path: "#movies",
                icon: "mdi-av-movie",
                classes: "nav-movies",
                parent: 0
            });
            nav.push({
                id: 12,
                title: "Recently Added",
                path: "#movies/added",
                icon: "",
                classes: "",
                parent: 11
            });
            nav.push({
                id: 13,
                title: "All",
                path: "#movies/all",
                icon: "",
                classes: "",
                parent: 11
            });
            nav.push({
                id: 14,
                title: "Genres",
                path: "#movies/genres",
                icon: "",
                classes: "",
                parent: 11
            });
            nav.push({
                id: 15,
                title: "Years",
                path: "#movies/years",
                icon: "",
                classes: "",
                parent: 11
            });
            nav.push({
                id: 21,
                title: "TV Shows",
                path: "#tv",
                icon: "mdi-hardware-tv",
                classes: "nav-tv",
                parent: 0
            });
            nav.push({
                id: 22,
                title: "Recently Added",
                path: "#tv/added",
                icon: "",
                classes: "",
                parent: 21
            });
            nav.push({
                id: 23,
                title: "All",
                path: "#tv/all",
                icon: "",
                classes: "",
                parent: 21
            });
            nav.push({
                id: 24,
                title: "Genres",
                path: "#tv/genres",
                icon: "",
                classes: "",
                parent: 21
            });
            nav.push({
                id: 25,
                title: "Years",
                path: "#tv/years",
                icon: "",
                classes: "",
                parent: 21
            });
            nav.push({
                id: 31,
                title: "Browser",
                path: "#browser",
                icon: "mdi-action-view-list",
                classes: "nav-browser",
                parent: 0
            });
            nav.push({
                id: 32,
                title: "Files",
                path: "#browser/files",
                icon: "",
                classes: "",
                parent: 31
            });
            nav.push({
                id: 33,
                title: "AddOns",
                path: "#browser/addons",
                icon: "",
                classes: "",
                parent: 31
            });
            nav.push({
                id: 41,
                title: "Thumbs Up",
                path: "#thumbsup",
                icon: "mdi-action-thumb-up",
                classes: "nav-thumbs-up",
                parent: 0
            });
            navParsed = this.sortStructure(nav);
            navCollection = new Entities.NavMainCollection(navParsed);
            return navCollection;
        },
        sortStructure: function(structure) {
            var children, i, model, newParents, _i, _len, _name;
            children = {};
            for (_i = 0, _len = structure.length; _i < _len; _i++) {
                model = structure[_i];
                if (!(model.path != null && model.parent !== 0)) {
                    continue;
                }
                if (children[_name = model.parent] == null) {
                    children[_name] = [];
                }
                children[model.parent].push(model);
            }
            newParents = [];
            for (i in structure) {
                model = structure[i];
                if (model.path != null) {
                    if (model.parent === 0) {
                        model.children = children[model.id];
                        newParents.push(model);
                    }
                }
            }
            return newParents;
        }
    };
    return App.reqres.setHandler("navMain:entities", function(items, model) {
        if (items == null) {
            items = [];
        }
        return API.getDefaultStructure(items, model);
    });
});

this.Kodi.module("Controllers", function(Controllers, App, Backbone, Marionette, $, _) {
    return Controllers.Base = function(_super) {
        __extends(Base, _super);
        function Base(options) {
            if (options == null) {
                options = {};
            }
            this.region = options.region || App.request("default:region");
            Base.__super__.constructor.call(this, options);
            this._instance_id = _.uniqueId("controller");
            App.execute("register:instance", this, this._instance_id);
        }
        Base.prototype.close = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            delete this.region;
            delete this.options;
            Base.__super__.close.call(this, args);
            return App.execute("unregister:instance", this, this._instance_id);
        };
        Base.prototype.show = function(view) {
            this.listenTo(view, "close", this.close);
            return this.region.show(view);
        };
        return Base;
    }(Backbone.Marionette.Controller);
});

this.Kodi.module("Views", function(Views, App, Backbone, Marionette, $, _) {
    return Views.CollectionView = function(_super) {
        __extends(CollectionView, _super);
        function CollectionView() {
            return CollectionView.__super__.constructor.apply(this, arguments);
        }
        CollectionView.prototype.itemViewEventPrefix = "childview";
        return CollectionView;
    }(Backbone.Marionette.CollectionView);
});

this.Kodi.module("Views", function(Views, App, Backbone, Marionette, $, _) {
    return Views.CompositeView = function(_super) {
        __extends(CompositeView, _super);
        function CompositeView() {
            return CompositeView.__super__.constructor.apply(this, arguments);
        }
        CompositeView.prototype.itemViewEventPrefix = "childview";
        return CompositeView;
    }(Backbone.Marionette.CompositeView);
});

this.Kodi.module("Views", function(Views, App, Backbone, Marionette, $, _) {
    return Views.ItemView = function(_super) {
        __extends(ItemView, _super);
        function ItemView() {
            return ItemView.__super__.constructor.apply(this, arguments);
        }
        return ItemView;
    }(Backbone.Marionette.ItemView);
});

this.Kodi.module("Views", function(Views, App, Backbone, Marionette, $, _) {
    return Views.LayoutView = function(_super) {
        __extends(LayoutView, _super);
        function LayoutView() {
            return LayoutView.__super__.constructor.apply(this, arguments);
        }
        return LayoutView;
    }(Backbone.Marionette.LayoutView);
});

this.Kodi.module("Views", function(Views, App, Backbone, Marionette, $, _) {});

this.Kodi.module("Views", function(Views, App, Backbone, Marionette, $, _) {
    return Views.CardView = function(_super) {
        __extends(CardView, _super);
        function CardView() {
            return CardView.__super__.constructor.apply(this, arguments);
        }
        CardView.prototype.template = "views/card/card";
        CardView.prototype.tagName = "li";
        CardView.prototype.className = "card";
        CardView.prototype.triggers = {
            "click .menu": "artist-menu:clicked"
        };
        return CardView;
    }(App.Views.ItemView);
});

this.Kodi.module("Views", function(Views, App, Backbone, Marionette, $, _) {
    return Views.EmptyView = function(_super) {
        __extends(EmptyView, _super);
        function EmptyView() {
            return EmptyView.__super__.constructor.apply(this, arguments);
        }
        EmptyView.prototype.template = "views/empty/empty";
        EmptyView.prototype.regions = {
            regionEmptyContent: ".region-empty-content"
        };
        return EmptyView;
    }(App.Views.ItemView);
});

this.Kodi.module("Views", function(Views, App, Backbone, Marionette, $, _) {
    Views.LayoutWithSidebarFirstView = function(_super) {
        __extends(LayoutWithSidebarFirstView, _super);
        function LayoutWithSidebarFirstView() {
            return LayoutWithSidebarFirstView.__super__.constructor.apply(this, arguments);
        }
        LayoutWithSidebarFirstView.prototype.template = "views/layouts/layout_with_sidebar_first";
        LayoutWithSidebarFirstView.prototype.regions = {
            regionSidebarFirst: ".region-first",
            regionContent: ".region-content"
        };
        return LayoutWithSidebarFirstView;
    }(App.Views.LayoutView);
    Views.LayoutWithHeaderView = function(_super) {
        __extends(LayoutWithHeaderView, _super);
        function LayoutWithHeaderView() {
            return LayoutWithHeaderView.__super__.constructor.apply(this, arguments);
        }
        LayoutWithHeaderView.prototype.template = "views/layouts/layout_with_header";
        LayoutWithHeaderView.prototype.regions = {
            regionHeader: ".region-header",
            regionContent: ".region-content"
        };
        return LayoutWithHeaderView;
    }(App.Views.LayoutView);
    return Views.LayoutDetailsHeaderView = function(_super) {
        __extends(LayoutDetailsHeaderView, _super);
        function LayoutDetailsHeaderView() {
            return LayoutDetailsHeaderView.__super__.constructor.apply(this, arguments);
        }
        LayoutDetailsHeaderView.prototype.template = "views/layouts/layout_details_header";
        LayoutDetailsHeaderView.prototype.regions = {
            regionSide: ".region-details-side",
            regionTitle: ".region-details-title",
            regionMeta: ".region-details-meta",
            regionMetaSideFirst: ".region-details-meta-side-first",
            regionMetaSideSecond: ".region-details-meta-side-second",
            regionMetaBelow: ".region-details-meta-below"
        };
        return LayoutDetailsHeaderView;
    }(App.Views.LayoutView);
});

this.Kodi.module("AlbumApp", function(AlbumApp, App, Backbone, Marionette, $, _) {
    var API;
    AlbumApp.Router = function(_super) {
        __extends(Router, _super);
        function Router() {
            return Router.__super__.constructor.apply(this, arguments);
        }
        Router.prototype.appRoutes = {
            "music/albums": "list",
            "music/album/:id": "view"
        };
        return Router;
    }(Marionette.AppRouter);
    API = {
        list: function() {
            return new AlbumApp.List.Controller();
        },
        view: function(id) {
            return new AlbumApp.Show.Controller({
                id: id
            });
        }
    };
    return App.addInitializer(function() {
        return new AlbumApp.Router({
            controller: API
        });
    });
});

this.Kodi.module("AlbumApp.List", function(List, App, Backbone, Marionette, $, _) {
    return List.Controller = function(_super) {
        __extends(Controller, _super);
        function Controller() {
            return Controller.__super__.constructor.apply(this, arguments);
        }
        Controller.prototype.initialize = function() {
            var albums;
            albums = App.request("album:entities");
            return App.execute("when:entity:fetched", albums, function(_this) {
                return function() {
                    _this.layout = _this.getLayoutView(albums);
                    _this.listenTo(_this.layout, "show", function() {
                        return _this.albumsRegion(albums);
                    });
                    return App.regionContent.show(_this.layout);
                };
            }(this));
        };
        Controller.prototype.getLayoutView = function(albums) {
            return new List.ListLayout({
                collection: albums
            });
        };
        Controller.prototype.albumsRegion = function(albums) {
            var albumsView;
            albumsView = this.getAlbumsView(albums);
            return this.layout.regionContent.show(albumsView);
        };
        Controller.prototype.getAlbumsView = function(albums) {
            return new List.Albums({
                collection: albums
            });
        };
        return Controller;
    }(App.Controllers.Base);
});

this.Kodi.module("AlbumApp.List", function(List, App, Backbone, Marionette, $, _) {
    List.ListLayout = function(_super) {
        __extends(ListLayout, _super);
        function ListLayout() {
            return ListLayout.__super__.constructor.apply(this, arguments);
        }
        ListLayout.prototype.className = "album-list";
        return ListLayout;
    }(App.Views.LayoutWithSidebarFirstView);
    List.AlbumTeaser = function(_super) {
        __extends(AlbumTeaser, _super);
        function AlbumTeaser() {
            return AlbumTeaser.__super__.constructor.apply(this, arguments);
        }
        AlbumTeaser.prototype.triggers = {
            "click .menu": "album-menu:clicked"
        };
        return AlbumTeaser;
    }(App.Views.CardView);
    List.Empty = function(_super) {
        __extends(Empty, _super);
        function Empty() {
            return Empty.__super__.constructor.apply(this, arguments);
        }
        Empty.prototype.tagName = "li";
        Empty.prototype.className = "album-empty-result";
        return Empty;
    }(App.Views.EmptyView);
    return List.Albums = function(_super) {
        __extends(Albums, _super);
        function Albums() {
            return Albums.__super__.constructor.apply(this, arguments);
        }
        Albums.prototype.childView = List.AlbumTeaser;
        Albums.prototype.emptyView = List.Empty;
        Albums.prototype.tagName = "ul";
        Albums.prototype.className = "card-grid--square";
        return Albums;
    }(App.Views.CollectionView);
});

this.Kodi.module("AlbumApp.Show", function(Show, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        getAlbumsFromSongs: function(songs) {
            var album, albumid, albumsCollectionView, songCollection;
            albumsCollectionView = new Show.WithSongsCollection();
            albumsCollectionView.on("add:child", function(albumView) {
                return App.execute("when:entity:fetched", album, function(_this) {
                    return function() {
                        var model, songView, teaser;
                        model = albumView.model;
                        teaser = new Show.AlbumTeaser({
                            model: model
                        });
                        albumView.regionMeta.show(teaser);
                        songView = App.request("song:list:view", songs[model.get("albumid")]);
                        return albumView.regionSongs.show(songView);
                    };
                }(this));
            });
            for (albumid in songs) {
                songCollection = songs[albumid];
                album = App.request("album:entity", albumid, {
                    success: function(album) {
                        return albumsCollectionView.addChild(album, Show.WithSongsLayout);
                    }
                });
            }
            return albumsCollectionView;
        }
    };
    Show.Controller = function(_super) {
        __extends(Controller, _super);
        function Controller() {
            return Controller.__super__.constructor.apply(this, arguments);
        }
        Controller.prototype.initialize = function(options) {
            var album, id;
            id = parseInt(options.id);
            console.log(id);
            album = App.request("album:entity", id);
            return App.execute("when:entity:fetched", album, function(_this) {
                return function() {
                    App.execute("images:fanart:set", album.get("fanart"));
                    _this.layout = _this.getLayoutView(album);
                    _this.listenTo(_this.layout, "destroy", function() {
                        return App.execute("images:fanart:set", "");
                    });
                    _this.listenTo(_this.layout, "show", function() {
                        _this.getMusic(id);
                        return _this.getDetailsLayoutView(album);
                    });
                    return App.regionContent.show(_this.layout);
                };
            }(this));
        };
        Controller.prototype.getLayoutView = function(album) {
            return new Show.PageLayout({
                model: album
            });
        };
        Controller.prototype.getDetailsLayoutView = function(album) {
            var headerLayout;
            headerLayout = new Show.HeaderLayout({
                model: album
            });
            this.listenTo(headerLayout, "show", function(_this) {
                return function() {
                    var detail, teaser;
                    teaser = new Show.AlbumDetailTeaser({
                        model: album
                    });
                    detail = new Show.Details({
                        model: album
                    });
                    headerLayout.regionSide.show(teaser);
                    return headerLayout.regionMeta.show(detail);
                };
            }(this));
            return this.layout.regionHeader.show(headerLayout);
        };
        Controller.prototype.getMusic = function(id) {
            var options, songs;
            options = {
                filter: {
                    albumid: id
                }
            };
            songs = App.request("song:filtered:entities", options);
            return App.execute("when:entity:fetched", songs, function(_this) {
                return function() {
                    var albumView, songView;
                    albumView = new Show.WithSongsLayout();
                    songView = App.request("song:list:view", songs);
                    _this.listenTo(albumView, "show", function() {
                        return albumView.regionSongs.show(songView);
                    });
                    return _this.layout.regionContent.show(albumView);
                };
            }(this));
        };
        return Controller;
    }(App.Controllers.Base);
    return App.reqres.setHandler("albums:withsongs:view", function(songs) {
        return API.getAlbumsFromSongs(songs);
    });
});

this.Kodi.module("AlbumApp.Show", function(Show, App, Backbone, Marionette, $, _) {
    Show.WithSongsLayout = function(_super) {
        __extends(WithSongsLayout, _super);
        function WithSongsLayout() {
            return WithSongsLayout.__super__.constructor.apply(this, arguments);
        }
        WithSongsLayout.prototype.template = "apps/album/show/album_with_songs";
        WithSongsLayout.prototype.className = "album-wrapper";
        WithSongsLayout.prototype.regions = {
            regionMeta: ".region-album-meta",
            regionSongs: ".region-album-songs"
        };
        return WithSongsLayout;
    }(App.Views.LayoutView);
    Show.WithSongsCollection = function(_super) {
        __extends(WithSongsCollection, _super);
        function WithSongsCollection() {
            return WithSongsCollection.__super__.constructor.apply(this, arguments);
        }
        WithSongsCollection.prototype.childView = Show.WithSongsLayout;
        WithSongsCollection.prototype.tagName = "div";
        WithSongsCollection.prototype.sort = "year";
        WithSongsCollection.prototype.className = "albums-wrapper";
        return WithSongsCollection;
    }(App.Views.CollectionView);
    Show.PageLayout = function(_super) {
        __extends(PageLayout, _super);
        function PageLayout() {
            return PageLayout.__super__.constructor.apply(this, arguments);
        }
        PageLayout.prototype.className = "album-show detail-container";
        return PageLayout;
    }(App.Views.LayoutWithHeaderView);
    Show.HeaderLayout = function(_super) {
        __extends(HeaderLayout, _super);
        function HeaderLayout() {
            return HeaderLayout.__super__.constructor.apply(this, arguments);
        }
        HeaderLayout.prototype.className = "album-details";
        return HeaderLayout;
    }(App.Views.LayoutDetailsHeaderView);
    Show.Details = function(_super) {
        __extends(Details, _super);
        function Details() {
            return Details.__super__.constructor.apply(this, arguments);
        }
        Details.prototype.template = "apps/album/show/details_meta";
        return Details;
    }(App.Views.ItemView);
    Show.AlbumTeaser = function(_super) {
        __extends(AlbumTeaser, _super);
        function AlbumTeaser() {
            return AlbumTeaser.__super__.constructor.apply(this, arguments);
        }
        AlbumTeaser.prototype.tagName = "div";
        AlbumTeaser.prototype.className = "card-minimal";
        AlbumTeaser.prototype.initialize = function() {
            return this.model.set({
                subtitle: this.model.get("year")
            });
        };
        AlbumTeaser.prototype.triggers = {
            "click .menu": "album-menu:clicked"
        };
        return AlbumTeaser;
    }(App.Views.CardView);
    return Show.AlbumDetailTeaser = function(_super) {
        __extends(AlbumDetailTeaser, _super);
        function AlbumDetailTeaser() {
            return AlbumDetailTeaser.__super__.constructor.apply(this, arguments);
        }
        AlbumDetailTeaser.prototype.className = "card-detail";
        return AlbumDetailTeaser;
    }(Show.AlbumTeaser);
});

this.Kodi.module("ArtistApp", function(ArtistApp, App, Backbone, Marionette, $, _) {
    var API;
    ArtistApp.Router = function(_super) {
        __extends(Router, _super);
        function Router() {
            return Router.__super__.constructor.apply(this, arguments);
        }
        Router.prototype.appRoutes = {
            "music/artists": "list",
            "music/artist/:id": "view"
        };
        return Router;
    }(Marionette.AppRouter);
    API = {
        list: function() {
            return new ArtistApp.List.Controller();
        },
        view: function(id) {
            return new ArtistApp.Show.Controller({
                id: id
            });
        }
    };
    return App.addInitializer(function() {
        return new ArtistApp.Router({
            controller: API
        });
    });
});

this.Kodi.module("ArtistApp.List", function(List, App, Backbone, Marionette, $, _) {
    return List.Controller = function(_super) {
        __extends(Controller, _super);
        function Controller() {
            return Controller.__super__.constructor.apply(this, arguments);
        }
        Controller.prototype.initialize = function() {
            var artists;
            artists = App.request("artist:entities");
            return App.execute("when:entity:fetched", artists, function(_this) {
                return function() {
                    _this.layout = _this.getLayoutView(artists);
                    _this.listenTo(_this.layout, "show", function() {
                        return _this.artistsRegion(artists);
                    });
                    return App.regionContent.show(_this.layout);
                };
            }(this));
        };
        Controller.prototype.getLayoutView = function(artists) {
            return new List.ListLayout({
                collection: artists
            });
        };
        Controller.prototype.artistsRegion = function(artists) {
            var artistsView;
            artistsView = this.getArtistsView(artists);
            return this.layout.regionContent.show(artistsView);
        };
        Controller.prototype.getArtistsView = function(artists) {
            return new List.Artists({
                collection: artists
            });
        };
        return Controller;
    }(App.Controllers.Base);
});

this.Kodi.module("ArtistApp.List", function(List, App, Backbone, Marionette, $, _) {
    List.ListLayout = function(_super) {
        __extends(ListLayout, _super);
        function ListLayout() {
            return ListLayout.__super__.constructor.apply(this, arguments);
        }
        ListLayout.prototype.className = "artist-list";
        return ListLayout;
    }(App.Views.LayoutWithSidebarFirstView);
    List.ArtistTeaser = function(_super) {
        __extends(ArtistTeaser, _super);
        function ArtistTeaser() {
            return ArtistTeaser.__super__.constructor.apply(this, arguments);
        }
        ArtistTeaser.prototype.triggers = {
            "click .menu": "artist-menu:clicked"
        };
        return ArtistTeaser;
    }(App.Views.CardView);
    List.Empty = function(_super) {
        __extends(Empty, _super);
        function Empty() {
            return Empty.__super__.constructor.apply(this, arguments);
        }
        Empty.prototype.tagName = "li";
        Empty.prototype.className = "artist-empty-result";
        return Empty;
    }(App.Views.EmptyView);
    return List.Artists = function(_super) {
        __extends(Artists, _super);
        function Artists() {
            return Artists.__super__.constructor.apply(this, arguments);
        }
        Artists.prototype.childView = List.ArtistTeaser;
        Artists.prototype.emptyView = List.Empty;
        Artists.prototype.tagName = "ul";
        Artists.prototype.className = "card-grid--wide";
        return Artists;
    }(App.Views.CollectionView);
});

this.Kodi.module("ArtistApp.Show", function(Show, App, Backbone, Marionette, $, _) {
    return Show.Controller = function(_super) {
        __extends(Controller, _super);
        function Controller() {
            return Controller.__super__.constructor.apply(this, arguments);
        }
        Controller.prototype.initialize = function(options) {
            var artist, id;
            id = parseInt(options.id);
            artist = App.request("artist:entity", id);
            return App.execute("when:entity:fetched", artist, function(_this) {
                return function() {
                    App.execute("images:fanart:set", artist.get("fanart"));
                    _this.layout = _this.getLayoutView(artist);
                    _this.listenTo(_this.layout, "destroy", function() {
                        return App.execute("images:fanart:set", "");
                    });
                    _this.listenTo(_this.layout, "show", function() {
                        _this.getMusic(id);
                        return _this.getDetailsLayoutView(artist);
                    });
                    return App.regionContent.show(_this.layout);
                };
            }(this));
        };
        Controller.prototype.getLayoutView = function(artist) {
            return new Show.PageLayout({
                model: artist
            });
        };
        Controller.prototype.getDetailsLayoutView = function(artist) {
            var headerLayout;
            headerLayout = new Show.HeaderLayout({
                model: artist
            });
            this.listenTo(headerLayout, "show", function(_this) {
                return function() {
                    var detail, teaser;
                    teaser = new Show.ArtistTeaser({
                        model: artist
                    });
                    detail = new Show.Details({
                        model: artist
                    });
                    headerLayout.regionSide.show(teaser);
                    return headerLayout.regionMeta.show(detail);
                };
            }(this));
            return this.layout.regionHeader.show(headerLayout);
        };
        Controller.prototype.getMusic = function(id) {
            var options, songs;
            options = {
                filter: {
                    artistid: id
                }
            };
            songs = App.request("song:filtered:entities", options);
            return App.execute("when:entity:fetched", songs, function(_this) {
                return function() {
                    var albumsCollection, songsCollections;
                    songsCollections = App.request("song:albumparse:entities", songs);
                    console.log(songsCollections);
                    albumsCollection = App.request("albums:withsongs:view", songsCollections);
                    return _this.layout.regionContent.show(albumsCollection);
                };
            }(this));
        };
        return Controller;
    }(App.Controllers.Base);
});

this.Kodi.module("ArtistApp.Show", function(Show, App, Backbone, Marionette, $, _) {
    Show.PageLayout = function(_super) {
        __extends(PageLayout, _super);
        function PageLayout() {
            return PageLayout.__super__.constructor.apply(this, arguments);
        }
        PageLayout.prototype.className = "artist-show detail-container";
        return PageLayout;
    }(App.Views.LayoutWithHeaderView);
    Show.HeaderLayout = function(_super) {
        __extends(HeaderLayout, _super);
        function HeaderLayout() {
            return HeaderLayout.__super__.constructor.apply(this, arguments);
        }
        HeaderLayout.prototype.className = "artist-details";
        return HeaderLayout;
    }(App.Views.LayoutDetailsHeaderView);
    Show.Details = function(_super) {
        __extends(Details, _super);
        function Details() {
            return Details.__super__.constructor.apply(this, arguments);
        }
        Details.prototype.template = "apps/artist/show/details_meta";
        return Details;
    }(App.Views.ItemView);
    return Show.ArtistTeaser = function(_super) {
        __extends(ArtistTeaser, _super);
        function ArtistTeaser() {
            return ArtistTeaser.__super__.constructor.apply(this, arguments);
        }
        ArtistTeaser.prototype.tagName = "div";
        ArtistTeaser.prototype.className = "card-detail";
        ArtistTeaser.prototype.triggers = {
            "click .menu": "artist-menu:clicked"
        };
        return ArtistTeaser;
    }(App.Views.CardView);
});

this.Kodi.module("Images", function(Images, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        imagesPath: "dist/images/",
        defaultFanartPath: "fanart_default/",
        defaultFanartFiles: [ "wallpaper-443657.jpg", "wallpaper-45040.jpg", "wallpaper-765190.jpg", "wallpaper-84050.jpg" ],
        getDefaultThumbnail: function() {
            return API.imagesPath + "thumbnail_default.png";
        },
        getRandomFanart: function() {
            var file, path, rand;
            rand = helpers.global.getRandomInt(0, API.defaultFanartFiles.length - 1);
            file = API.defaultFanartFiles[rand];
            path = API.imagesPath + API.defaultFanartPath + file;
            return path;
        },
        parseRawPath: function(rawPath) {
            var path;
            path = "image/" + encodeURIComponent(rawPath);
            return path;
        },
        setFanartBackground: function(path, region) {
            var $body;
            $body = App.getRegion(region).$el;
            return $body.css("background-image", "url(" + path + ")");
        },
        getImageUrl: function(rawPath, type) {
            var path;
            if (type == null) {
                type = "thumbnail";
            }
            path = "";
            if (rawPath == null || rawPath === "") {
                switch (type) {
                  case "fanart":
                    path = API.getRandomFanart();
                    break;

                  default:
                    path = API.getDefaultThumbnail();
                }
            } else {
                path = API.parseRawPath(rawPath);
            }
            return path;
        }
    };
    App.commands.setHandler("images:fanart:set", function(path, region) {
        if (region == null) {
            region = "regionFanart";
        }
        return API.setFanartBackground(path, region);
    });
    App.reqres.setHandler("images:path:get", function(rawPath, type) {
        if (type == null) {
            type = "thumbnail";
        }
        return API.getImageUrl(rawPath, type);
    });
    return App.reqres.setHandler("images:path:entity", function(model) {
        if (model.thumbnail != null) {
            model.thumbnail = API.getImageUrl(model.thumbnail, "thumbnail");
        }
        if (model.fanart != null) {
            model.fanart = API.getImageUrl(model.fanart, "fanart");
        }
        return model;
    });
});

this.Kodi.module("NavMain", function(NavMain, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        getNav: function() {
            var navStructure;
            navStructure = App.request("navMain:entities");
            return new NavMain.List({
                collection: navStructure
            });
        }
    };
    return this.onStart = function(options) {
        return App.reqres.setHandler("navMain:view", function(items, model) {
            if (items == null) {
                items = [];
            }
            return API.getNav();
        });
    };
});

this.Kodi.module("NavMain", function(NavMain, App, Backbone, Marionette, $, _) {
    return NavMain.List = function(_super) {
        __extends(List, _super);
        function List() {
            return List.__super__.constructor.apply(this, arguments);
        }
        List.prototype.template = "apps/navMain/show/navMain";
        return List;
    }(Backbone.Marionette.ItemView);
});

this.Kodi.module("Shell", function(Shell, App, Backbone, Marionette, $, _) {
    var API;
    Shell.Router = function(_super) {
        __extends(Router, _super);
        function Router() {
            return Router.__super__.constructor.apply(this, arguments);
        }
        Router.prototype.appRoutes = {
            home: "homePage"
        };
        return Router;
    }(Marionette.AppRouter);
    API = {
        homePage: function() {
            var foo;
            return foo = "bar";
        },
        renderLayout: function() {
            var artist, playlistState, shellLayout;
            shellLayout = new Shell.Layout();
            App.root.show(shellLayout);
            App.addRegions(shellLayout.regions);
            playlistState = config.get("app", "shell:playlist:state", "open");
            if (playlistState === "closed") {
                this.alterRegionClasses("add", "shell-playlist-closed");
            }
            App.listenTo(shellLayout, "shell:playlist:toggle", function(_this) {
                return function(child, args) {
                    var state;
                    playlistState = config.get("app", "shell:playlist:state", "open");
                    state = playlistState === "open" ? "closed" : "open";
                    config.set("app", "shell:playlist:state", state);
                    return _this.alterRegionClasses("toggle", "shell-playlist-closed");
                };
            }(this));
            App.execute("images:fanart:set");
            artist = App.request("artist:entity", 1956);
            return App.execute("when:entity:fetched", artist, function() {
                return console.log(artist);
            });
        },
        renderNav: function() {
            var navView;
            navView = App.request("navMain:view");
            return App.regionNav.show(navView);
        },
        alterRegionClasses: function(op, classes, region) {
            var $body, action;
            if (region == null) {
                region = "root";
            }
            $body = App.getRegion(region).$el;
            action = "" + op + "Class";
            return $body[action](classes);
        }
    };
    return App.addInitializer(function() {
        return App.commands.setHandler("shell:view:ready", function() {
            API.renderLayout();
            API.renderNav();
            new Shell.Router({
                controller: API
            });
            App.vent.trigger("shell:ready");
            return App.commands.setHandler("body:state", function(op, state) {
                return API.alterRegionClasses(op, state);
            });
        });
    });
});

this.Kodi.module("Shell", function(Shell, App, Backbone, Marionette, $, _) {
    Shell.Layout = function(_super) {
        __extends(Layout, _super);
        function Layout() {
            return Layout.__super__.constructor.apply(this, arguments);
        }
        Layout.prototype.template = "apps/shell/show/shell";
        Layout.prototype.regions = {
            regionNav: "#nav-bar",
            regionContent: "#content",
            regionSidebarFirst: "#sidebar-first",
            regionPlaylist: "#playlist-bar",
            regionPlaylistSummary: "#playlist-summary",
            regionTitle: "#page-title .title",
            regionTitleContext: "#page-title .context",
            regionFanart: "#fanart"
        };
        Layout.prototype.triggers = {
            "click .playlist-toggle-open": "shell:playlist:toggle"
        };
        return Layout;
    }(Backbone.Marionette.LayoutView);
    return App.execute("shell:view:ready");
});

this.Kodi.module("SongApp.List", function(List, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        getSongsView: function(songs) {
            return new List.Songs({
                collection: songs
            });
        }
    };
    return App.reqres.setHandler("song:list:view", function(songs) {
        return API.getSongsView(songs);
    });
});

this.Kodi.module("SongApp.List", function(List, App, Backbone, Marionette, $, _) {
    List.Song = function(_super) {
        __extends(Song, _super);
        function Song() {
            return Song.__super__.constructor.apply(this, arguments);
        }
        Song.prototype.template = "apps/song/list/song";
        Song.prototype.tagName = "tr";
        Song.prototype.className = "song table-row";
        Song.prototype.initialize = function() {
            var duration;
            duration = helpers.global.secToTime(this.model.get("duration"));
            return this.model.set({
                duration: helpers.global.formatTime(duration)
            });
        };
        Song.prototype.triggers = {
            "click .menu": "song-menu:clicked"
        };
        return Song;
    }(App.Views.ItemView);
    return List.Songs = function(_super) {
        __extends(Songs, _super);
        function Songs() {
            return Songs.__super__.constructor.apply(this, arguments);
        }
        Songs.prototype.childView = List.Song;
        Songs.prototype.tagName = "table";
        Songs.prototype.className = "songs-table table table-striped table-hover";
        return Songs;
    }(App.Views.CollectionView);
});

(function(global, factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = global.document ? factory(global, true) : function(w) {
            if (!w.document) {
                throw new Error("jQuery requires a window with a document");
            }
            return factory(w);
        };
    } else {
        factory(global);
    }
})(typeof window !== "undefined" ? window : this, function(window, noGlobal) {
    var deletedIds = [];
    var slice = deletedIds.slice;
    var concat = deletedIds.concat;
    var push = deletedIds.push;
    var indexOf = deletedIds.indexOf;
    var class2type = {};
    var toString = class2type.toString;
    var hasOwn = class2type.hasOwnProperty;
    var support = {};
    var version = "1.11.1", jQuery = function(selector, context) {
        return new jQuery.fn.init(selector, context);
    }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function(all, letter) {
        return letter.toUpperCase();
    };
    jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        selector: "",
        length: 0,
        toArray: function() {
            return slice.call(this);
        },
        get: function(num) {
            return num != null ? num < 0 ? this[num + this.length] : this[num] : slice.call(this);
        },
        pushStack: function(elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            ret.context = this.context;
            return ret;
        },
        each: function(callback, args) {
            return jQuery.each(this, callback, args);
        },
        map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        slice: function() {
            return this.pushStack(slice.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        eq: function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [ this[j] ] : []);
        },
        end: function() {
            return this.prevObject || this.constructor(null);
        },
        push: push,
        sort: deletedIds.sort,
        splice: deletedIds.splice
    };
    jQuery.extend = jQuery.fn.extend = function() {
        var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === "boolean") {
            deep = target;
            target = arguments[i] || {};
            i++;
        }
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
            target = {};
        }
        if (i === length) {
            target = this;
            i--;
        }
        for (;i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue;
                    }
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }
                        target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    };
    jQuery.extend({
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        isReady: true,
        error: function(msg) {
            throw new Error(msg);
        },
        noop: function() {},
        isFunction: function(obj) {
            return jQuery.type(obj) === "function";
        },
        isArray: Array.isArray || function(obj) {
            return jQuery.type(obj) === "array";
        },
        isWindow: function(obj) {
            return obj != null && obj == obj.window;
        },
        isNumeric: function(obj) {
            return !jQuery.isArray(obj) && obj - parseFloat(obj) >= 0;
        },
        isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },
        isPlainObject: function(obj) {
            var key;
            if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                return false;
            }
            try {
                if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                    return false;
                }
            } catch (e) {
                return false;
            }
            if (support.ownLast) {
                for (key in obj) {
                    return hasOwn.call(obj, key);
                }
            }
            for (key in obj) {}
            return key === undefined || hasOwn.call(obj, key);
        },
        type: function(obj) {
            if (obj == null) {
                return obj + "";
            }
            return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
        },
        globalEval: function(data) {
            if (data && jQuery.trim(data)) {
                (window.execScript || function(data) {
                    window["eval"].call(window, data);
                })(data);
            }
        },
        camelCase: function(string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },
        nodeName: function(elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        each: function(obj, callback, args) {
            var value, i = 0, length = obj.length, isArray = isArraylike(obj);
            if (args) {
                if (isArray) {
                    for (;i < length; i++) {
                        value = callback.apply(obj[i], args);
                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.apply(obj[i], args);
                        if (value === false) {
                            break;
                        }
                    }
                }
            } else {
                if (isArray) {
                    for (;i < length; i++) {
                        value = callback.call(obj[i], i, obj[i]);
                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.call(obj[i], i, obj[i]);
                        if (value === false) {
                            break;
                        }
                    }
                }
            }
            return obj;
        },
        trim: function(text) {
            return text == null ? "" : (text + "").replace(rtrim, "");
        },
        makeArray: function(arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArraylike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === "string" ? [ arr ] : arr);
                } else {
                    push.call(ret, arr);
                }
            }
            return ret;
        },
        inArray: function(elem, arr, i) {
            var len;
            if (arr) {
                if (indexOf) {
                    return indexOf.call(arr, elem, i);
                }
                len = arr.length;
                i = i ? i < 0 ? Math.max(0, len + i) : i : 0;
                for (;i < len; i++) {
                    if (i in arr && arr[i] === elem) {
                        return i;
                    }
                }
            }
            return -1;
        },
        merge: function(first, second) {
            var len = +second.length, j = 0, i = first.length;
            while (j < len) {
                first[i++] = second[j++];
            }
            if (len !== len) {
                while (second[j] !== undefined) {
                    first[i++] = second[j++];
                }
            }
            first.length = i;
            return first;
        },
        grep: function(elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            for (;i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                }
            }
            return matches;
        },
        map: function(elems, callback, arg) {
            var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
            if (isArray) {
                for (;i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            }
            return concat.apply([], ret);
        },
        guid: 1,
        proxy: function(fn, context) {
            var args, proxy, tmp;
            if (typeof context === "string") {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }
            if (!jQuery.isFunction(fn)) {
                return undefined;
            }
            args = slice.call(arguments, 2);
            proxy = function() {
                return fn.apply(context || this, args.concat(slice.call(arguments)));
            };
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;
            return proxy;
        },
        now: function() {
            return +new Date();
        },
        support: support
    });
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });
    function isArraylike(obj) {
        var length = obj.length, type = jQuery.type(obj);
        if (type === "function" || jQuery.isWindow(obj)) {
            return false;
        }
        if (obj.nodeType === 1 && length) {
            return true;
        }
        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
    }
    var Sizzle = function(window) {
        var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + -new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function(a, b) {
            if (a === b) {
                hasDuplicate = true;
            }
            return 0;
        }, strundefined = typeof undefined, MAX_NEGATIVE = 1 << 31, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = arr.indexOf || function(elem) {
            var i = 0, len = this.length;
            for (;i < len; i++) {
                if (this[i] === elem) {
                    return i;
                }
            }
            return -1;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace = "[\\x20\\t\\r\\n\\f]", characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", identifier = characterEncoding.replace("w", "w#"), attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + characterEncoding + ")(?:\\((" + "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + ".*" + ")\\)|)", rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            ID: new RegExp("^#(" + characterEncoding + ")"),
            CLASS: new RegExp("^\\.(" + characterEncoding + ")"),
            TAG: new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
            ATTR: new RegExp("^" + attributes),
            PSEUDO: new RegExp("^" + pseudos),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + booleans + ")$", "i"),
            needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, rescape = /'|\\/g, runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"), funescape = function(_, escaped, escapedWhitespace) {
            var high = "0x" + escaped - 65536;
            return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
        };
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr.length ? function(target, els) {
                    push_native.apply(target, slice.call(els));
                } : function(target, els) {
                    var j = target.length, i = 0;
                    while (target[j++] = els[i++]) {}
                    target.length = j - 1;
                }
            };
        }
        function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
            if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                setDocument(context);
            }
            context = context || document;
            results = results || [];
            if (!selector || typeof selector !== "string") {
                return results;
            }
            if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
                return [];
            }
            if (documentIsHTML && !seed) {
                if (match = rquickExpr.exec(selector)) {
                    if (m = match[1]) {
                        if (nodeType === 9) {
                            elem = context.getElementById(m);
                            if (elem && elem.parentNode) {
                                if (elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            } else {
                                return results;
                            }
                        } else {
                            if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                results.push(elem);
                                return results;
                            }
                        }
                    } else if (match[2]) {
                        push.apply(results, context.getElementsByTagName(selector));
                        return results;
                    } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                        push.apply(results, context.getElementsByClassName(m));
                        return results;
                    }
                }
                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                    nid = old = expando;
                    newContext = context;
                    newSelector = nodeType === 9 && selector;
                    if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                        groups = tokenize(selector);
                        if (old = context.getAttribute("id")) {
                            nid = old.replace(rescape, "\\$&");
                        } else {
                            context.setAttribute("id", nid);
                        }
                        nid = "[id='" + nid + "'] ";
                        i = groups.length;
                        while (i--) {
                            groups[i] = nid + toSelector(groups[i]);
                        }
                        newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                        newSelector = groups.join(",");
                    }
                    if (newSelector) {
                        try {
                            push.apply(results, newContext.querySelectorAll(newSelector));
                            return results;
                        } catch (qsaError) {} finally {
                            if (!old) {
                                context.removeAttribute("id");
                            }
                        }
                    }
                }
            }
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        function createCache() {
            var keys = [];
            function cache(key, value) {
                if (keys.push(key + " ") > Expr.cacheLength) {
                    delete cache[keys.shift()];
                }
                return cache[key + " "] = value;
            }
            return cache;
        }
        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }
        function assert(fn) {
            var div = document.createElement("div");
            try {
                return !!fn(div);
            } catch (e) {
                return false;
            } finally {
                if (div.parentNode) {
                    div.parentNode.removeChild(div);
                }
                div = null;
            }
        }
        function addHandle(attrs, handler) {
            var arr = attrs.split("|"), i = attrs.length;
            while (i--) {
                Expr.attrHandle[arr[i]] = handler;
            }
        }
        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
            if (diff) {
                return diff;
            }
            if (cur) {
                while (cur = cur.nextSibling) {
                    if (cur === b) {
                        return -1;
                    }
                }
            }
            return a ? 1 : -1;
        }
        function createInputPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type;
            };
        }
        function createButtonPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type;
            };
        }
        function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    while (i--) {
                        if (seed[j = matchIndexes[i]]) {
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }
        function testContext(context) {
            return context && typeof context.getElementsByTagName !== strundefined && context;
        }
        support = Sizzle.support = {};
        isXML = Sizzle.isXML = function(elem) {
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false;
        };
        setDocument = Sizzle.setDocument = function(node) {
            var hasCompare, doc = node ? node.ownerDocument || node : preferredDoc, parent = doc.defaultView;
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document;
            }
            document = doc;
            docElem = doc.documentElement;
            documentIsHTML = !isXML(doc);
            if (parent && parent !== parent.top) {
                if (parent.addEventListener) {
                    parent.addEventListener("unload", function() {
                        setDocument();
                    }, false);
                } else if (parent.attachEvent) {
                    parent.attachEvent("onunload", function() {
                        setDocument();
                    });
                }
            }
            support.attributes = assert(function(div) {
                div.className = "i";
                return !div.getAttribute("className");
            });
            support.getElementsByTagName = assert(function(div) {
                div.appendChild(doc.createComment(""));
                return !div.getElementsByTagName("*").length;
            });
            support.getElementsByClassName = rnative.test(doc.getElementsByClassName) && assert(function(div) {
                div.innerHTML = "<div class='a'></div><div class='a i'></div>";
                div.firstChild.className = "i";
                return div.getElementsByClassName("i").length === 2;
            });
            support.getById = assert(function(div) {
                docElem.appendChild(div).id = expando;
                return !doc.getElementsByName || !doc.getElementsByName(expando).length;
            });
            if (support.getById) {
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== strundefined && documentIsHTML) {
                        var m = context.getElementById(id);
                        return m && m.parentNode ? [ m ] : [];
                    }
                };
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
            } else {
                delete Expr.find["ID"];
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
            }
            Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
                if (typeof context.getElementsByTagName !== strundefined) {
                    return context.getElementsByTagName(tag);
                }
            } : function(tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                if (tag === "*") {
                    while (elem = results[i++]) {
                        if (elem.nodeType === 1) {
                            tmp.push(elem);
                        }
                    }
                    return tmp;
                }
                return results;
            };
            Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
                if (typeof context.getElementsByClassName !== strundefined && documentIsHTML) {
                    return context.getElementsByClassName(className);
                }
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support.qsa = rnative.test(doc.querySelectorAll)) {
                assert(function(div) {
                    div.innerHTML = "<select msallowclip=''><option selected=''></option></select>";
                    if (div.querySelectorAll("[msallowclip^='']").length) {
                        rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    }
                    if (!div.querySelectorAll("[selected]").length) {
                        rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    }
                    if (!div.querySelectorAll(":checked").length) {
                        rbuggyQSA.push(":checked");
                    }
                });
                assert(function(div) {
                    var input = doc.createElement("input");
                    input.setAttribute("type", "hidden");
                    div.appendChild(input).setAttribute("name", "D");
                    if (div.querySelectorAll("[name=d]").length) {
                        rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                    }
                    if (!div.querySelectorAll(":enabled").length) {
                        rbuggyQSA.push(":enabled", ":disabled");
                    }
                    div.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }
            if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                assert(function(div) {
                    support.disconnectedMatch = matches.call(div, "div");
                    matches.call(div, "[s!='']:x");
                    rbuggyMatches.push("!=", pseudos);
                });
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            hasCompare = rnative.test(docElem.compareDocumentPosition);
            contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function(a, b) {
                if (b) {
                    while (b = b.parentNode) {
                        if (b === a) {
                            return true;
                        }
                    }
                }
                return false;
            };
            sortOrder = hasCompare ? function(a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) {
                    return compare;
                }
                compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                    if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                        return -1;
                    }
                    if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                        return 1;
                    }
                    return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
                }
                return compare & 4 ? -1 : 1;
            } : function(a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [ a ], bp = [ b ];
                if (!aup || !bup) {
                    return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
                } else if (aup === bup) {
                    return siblingCheck(a, b);
                }
                cur = a;
                while (cur = cur.parentNode) {
                    ap.unshift(cur);
                }
                cur = b;
                while (cur = cur.parentNode) {
                    bp.unshift(cur);
                }
                while (ap[i] === bp[i]) {
                    i++;
                }
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            return doc;
        };
        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function(elem, expr) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            expr = expr.replace(rattributeQuotes, "='$1']");
            if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                try {
                    var ret = matches.call(elem, expr);
                    if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                        return ret;
                    }
                } catch (e) {}
            }
            return Sizzle(expr, document, null, [ elem ]).length > 0;
        };
        Sizzle.contains = function(context, elem) {
            if ((context.ownerDocument || context) !== document) {
                setDocument(context);
            }
            return contains(context, elem);
        };
        Sizzle.attr = function(elem, name) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        Sizzle.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while (elem = results[i++]) {
                    if (elem === results[i]) {
                        j = duplicates.push(i);
                    }
                }
                while (j--) {
                    results.splice(duplicates[j], 1);
                }
            }
            sortInput = null;
            return results;
        };
        getText = Sizzle.getText = function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (!nodeType) {
                while (node = elem[i++]) {
                    ret += getText(node);
                }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                if (typeof elem.textContent === "string") {
                    return elem.textContent;
                } else {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        ret += getText(elem);
                    }
                }
            } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
            }
            return ret;
        };
        Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: true
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: true
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                    if (match[2] === "~=") {
                        match[3] = " " + match[3] + " ";
                    }
                    return match.slice(0, 4);
                },
                CHILD: function(match) {
                    match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === "nth") {
                        if (!match[3]) {
                            Sizzle.error(match[0]);
                        }
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                        match[5] = +(match[7] + match[8] || match[3] === "odd");
                    } else if (match[3]) {
                        Sizzle.error(match[0]);
                    }
                    return match;
                },
                PSEUDO: function(match) {
                    var excess, unquoted = !match[6] && match[2];
                    if (matchExpr["CHILD"].test(match[0])) {
                        return null;
                    }
                    if (match[3]) {
                        match[2] = match[4] || match[5] || "";
                    } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    return match.slice(0, 3);
                }
            },
            filter: {
                TAG: function(nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === "*" ? function() {
                        return true;
                    } : function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                CLASS: function(className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                        return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "");
                    });
                },
                ATTR: function(name, operator, check) {
                    return function(elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) {
                            return operator === "!=";
                        }
                        if (!operator) {
                            return true;
                        }
                        result += "";
                        return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                    };
                },
                CHILD: function(type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                    return first === 1 && last === 0 ? function(elem) {
                        return !!elem.parentNode;
                    } : function(elem, context, xml) {
                        var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
                        if (parent) {
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while (node = node[dir]) {
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                            return false;
                                        }
                                    }
                                    start = dir = type === "only" && !start && "nextSibling";
                                }
                                return true;
                            }
                            start = [ forward ? parent.firstChild : parent.lastChild ];
                            if (forward && useCache) {
                                outerCache = parent[expando] || (parent[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                    if (node.nodeType === 1 && ++diff && node === elem) {
                                        outerCache[type] = [ dirruns, nodeIndex, diff ];
                                        break;
                                    }
                                }
                            } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                                diff = cache[1];
                            } else {
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                        if (useCache) {
                                            (node[expando] || (node[expando] = {}))[type] = [ dirruns, diff ];
                                        }
                                        if (node === elem) {
                                            break;
                                        }
                                    }
                                }
                            }
                            diff -= last;
                            return diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                PSEUDO: function(pseudo, argument) {
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                    if (fn[expando]) {
                        return fn(argument);
                    }
                    if (fn.length > 1) {
                        args = [ pseudo, pseudo, "", argument ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while (i--) {
                                idx = indexOf.call(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function(elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                not: markFunction(function(selector) {
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                        while (i--) {
                            if (elem = unmatched[i]) {
                                seed[i] = !(matches[i] = elem);
                            }
                        }
                    }) : function(elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        return !results.pop();
                    };
                }),
                has: markFunction(function(selector) {
                    return function(elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                contains: markFunction(function(text) {
                    return function(elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                }),
                lang: markFunction(function(lang) {
                    if (!ridentifier.test(lang || "")) {
                        Sizzle.error("unsupported lang: " + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        var elemLang;
                        do {
                            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                            }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false;
                    };
                }),
                target: function(elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                root: function(elem) {
                    return elem === docElem;
                },
                focus: function(elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                enabled: function(elem) {
                    return elem.disabled === false;
                },
                disabled: function(elem) {
                    return elem.disabled === true;
                },
                checked: function(elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
                },
                selected: function(elem) {
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }
                    return elem.selected === true;
                },
                empty: function(elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        if (elem.nodeType < 6) {
                            return false;
                        }
                    }
                    return true;
                },
                parent: function(elem) {
                    return !Expr.pseudos["empty"](elem);
                },
                header: function(elem) {
                    return rheader.test(elem.nodeName);
                },
                input: function(elem) {
                    return rinputs.test(elem.nodeName);
                },
                button: function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button";
                },
                text: function(elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
                },
                first: createPositionalPseudo(function() {
                    return [ 0 ];
                }),
                last: createPositionalPseudo(function(matchIndexes, length) {
                    return [ length - 1 ];
                }),
                eq: createPositionalPseudo(function(matchIndexes, length, argument) {
                    return [ argument < 0 ? argument + length : argument ];
                }),
                even: createPositionalPseudo(function(matchIndexes, length) {
                    var i = 0;
                    for (;i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                odd: createPositionalPseudo(function(matchIndexes, length) {
                    var i = 1;
                    for (;i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (;--i >= 0; ) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (;++i < length; ) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"];
        for (i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
        }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
            submit: true,
            reset: true
        }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }
        function setFilters() {}
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle.tokenize = function(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push(tokens = []);
                }
                matched = false;
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: type,
                            matches: match
                        });
                        soFar = soFar.slice(matched.length);
                    }
                }
                if (!matched) {
                    break;
                }
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        };
        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = "";
            for (;i < len; i++) {
                selector += tokens[i].value;
            }
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, checkNonElements = base && dir === "parentNode", doneName = done++;
            return combinator.first ? function(elem, context, xml) {
                while (elem = elem[dir]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                        return matcher(elem, context, xml);
                    }
                }
            } : function(elem, context, xml) {
                var oldCache, outerCache, newCache = [ dirruns, doneName ];
                if (xml) {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                                return true;
                            }
                        }
                    }
                } else {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});
                            if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                                return newCache[2] = oldCache[2];
                            } else {
                                outerCache[dir] = newCache;
                                if (newCache[2] = matcher(elem, context, xml)) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
                var i = matchers.length;
                while (i--) {
                    if (!matchers[i](elem, context, xml)) {
                        return false;
                    }
                }
                return true;
            } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for (;i < len; i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }
        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
            for (;i < len; i++) {
                if (elem = unmatched[i]) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                            map.push(i);
                        }
                    }
                }
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function(seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [ context ] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                }
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    while (i--) {
                        if (elem = temp[i]) {
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            while (i--) {
                                if (elem = matcherOut[i]) {
                                    temp.push(matcherIn[i] = elem);
                                }
                            }
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        i = matcherOut.length;
                        while (i--) {
                            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                                seed[temp] = !(results[temp] = elem);
                            }
                        }
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                    } else {
                        push.apply(results, matcherOut);
                    }
                }
            });
        }
        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
                return elem === checkContext;
            }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
                return indexOf.call(checkContext, elem) > -1;
            }, implicitRelative, true), matchers = [ function(elem, context, xml) {
                return !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
            } ];
            for (;i < len; i++) {
                if (matcher = Expr.relative[tokens[i].type]) {
                    matchers = [ addCombinator(elementMatcher(matchers), matcher) ];
                } else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                    if (matcher[expando]) {
                        j = ++i;
                        for (;j < len; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break;
                            }
                        }
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
                            value: tokens[i - 2].type === " " ? "*" : ""
                        })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                    }
                    matchers.push(matcher);
                }
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
                var elem, j, matcher, matchedCount = 0, i = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || .1, len = elems.length;
                if (outermost) {
                    outermostContext = context !== document && context;
                }
                for (;i !== len && (elem = elems[i]) != null; i++) {
                    if (byElement && elem) {
                        j = 0;
                        while (matcher = elementMatchers[j++]) {
                            if (matcher(elem, context, xml)) {
                                results.push(elem);
                                break;
                            }
                        }
                        if (outermost) {
                            dirruns = dirrunsUnique;
                        }
                    }
                    if (bySet) {
                        if (elem = !matcher && elem) {
                            matchedCount--;
                        }
                        if (seed) {
                            unmatched.push(elem);
                        }
                    }
                }
                matchedCount += i;
                if (bySet && i !== matchedCount) {
                    j = 0;
                    while (matcher = setMatchers[j++]) {
                        matcher(unmatched, setMatched, context, xml);
                    }
                    if (seed) {
                        if (matchedCount > 0) {
                            while (i--) {
                                if (!(unmatched[i] || setMatched[i])) {
                                    setMatched[i] = pop.call(results);
                                }
                            }
                        }
                        setMatched = condense(setMatched);
                    }
                    push.apply(results, setMatched);
                    if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                        Sizzle.uniqueSort(results);
                    }
                }
                if (outermost) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }
                return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function(selector, match) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
                if (!match) {
                    match = tokenize(selector);
                }
                i = match.length;
                while (i--) {
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    } else {
                        elementMatchers.push(cached);
                    }
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                cached.selector = selector;
            }
            return cached;
        };
        select = Sizzle.select = function(selector, context, results, seed) {
            var i, tokens, token, type, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            if (match.length === 1) {
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                    context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) {
                        return results;
                    } else if (compiled) {
                        context = context.parentNode;
                    }
                    selector = selector.slice(tokens.shift().value.length);
                }
                i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                while (i--) {
                    token = tokens[i];
                    if (Expr.relative[type = token.type]) {
                        break;
                    }
                    if (find = Expr.find[type]) {
                        if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                            tokens.splice(i, 1);
                            selector = seed.length && toSelector(tokens);
                            if (!selector) {
                                push.apply(results, seed);
                                return results;
                            }
                            break;
                        }
                    }
                }
            }
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
        };
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        support.detectDuplicates = !!hasDuplicate;
        setDocument();
        support.sortDetached = assert(function(div1) {
            return div1.compareDocumentPosition(document.createElement("div")) & 1;
        });
        if (!assert(function(div) {
            div.innerHTML = "<a href='#'></a>";
            return div.firstChild.getAttribute("href") === "#";
        })) {
            addHandle("type|href|height|width", function(elem, name, isXML) {
                if (!isXML) {
                    return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
                }
            });
        }
        if (!support.attributes || !assert(function(div) {
            div.innerHTML = "<input/>";
            div.firstChild.setAttribute("value", "");
            return div.firstChild.getAttribute("value") === "";
        })) {
            addHandle("value", function(elem, name, isXML) {
                if (!isXML && elem.nodeName.toLowerCase() === "input") {
                    return elem.defaultValue;
                }
            });
        }
        if (!assert(function(div) {
            return div.getAttribute("disabled") == null;
        })) {
            addHandle(booleans, function(elem, name, isXML) {
                var val;
                if (!isXML) {
                    return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
                }
            });
        }
        return Sizzle;
    }(window);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    var rneedsContext = jQuery.expr.match.needsContext;
    var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
    var risSimple = /^.[^:#\[\.,]*$/;
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function(elem, i) {
                return !!qualifier.call(elem, i, elem) !== not;
            });
        }
        if (qualifier.nodeType) {
            return jQuery.grep(elements, function(elem) {
                return elem === qualifier !== not;
            });
        }
        if (typeof qualifier === "string") {
            if (risSimple.test(qualifier)) {
                return jQuery.filter(qualifier, elements, not);
            }
            qualifier = jQuery.filter(qualifier, elements);
        }
        return jQuery.grep(elements, function(elem) {
            return jQuery.inArray(elem, qualifier) >= 0 !== not;
        });
    }
    jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];
        if (not) {
            expr = ":not(" + expr + ")";
        }
        return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [ elem ] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
            return elem.nodeType === 1;
        }));
    };
    jQuery.fn.extend({
        find: function(selector) {
            var i, ret = [], self = this, len = self.length;
            if (typeof selector !== "string") {
                return this.pushStack(jQuery(selector).filter(function() {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }
            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
            }
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = this.selector ? this.selector + " " + selector : selector;
            return ret;
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function(selector) {
            return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
    });
    var rootjQuery, document = window.document, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, init = jQuery.fn.init = function(selector, context) {
        var match, elem;
        if (!selector) {
            return this;
        }
        if (typeof selector === "string") {
            if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
                match = [ null, selector, null ];
            } else {
                match = rquickExpr.exec(selector);
            }
            if (match && (match[1] || !context)) {
                if (match[1]) {
                    context = context instanceof jQuery ? context[0] : context;
                    jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                    if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                        for (match in context) {
                            if (jQuery.isFunction(this[match])) {
                                this[match](context[match]);
                            } else {
                                this.attr(match, context[match]);
                            }
                        }
                    }
                    return this;
                } else {
                    elem = document.getElementById(match[2]);
                    if (elem && elem.parentNode) {
                        if (elem.id !== match[2]) {
                            return rootjQuery.find(selector);
                        }
                        this.length = 1;
                        this[0] = elem;
                    }
                    this.context = document;
                    this.selector = selector;
                    return this;
                }
            } else if (!context || context.jquery) {
                return (context || rootjQuery).find(selector);
            } else {
                return this.constructor(context).find(selector);
            }
        } else if (selector.nodeType) {
            this.context = this[0] = selector;
            this.length = 1;
            return this;
        } else if (jQuery.isFunction(selector)) {
            return typeof rootjQuery.ready !== "undefined" ? rootjQuery.ready(selector) : selector(jQuery);
        }
        if (selector.selector !== undefined) {
            this.selector = selector.selector;
            this.context = selector.context;
        }
        return jQuery.makeArray(selector, this);
    };
    init.prototype = jQuery.fn;
    rootjQuery = jQuery(document);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };
    jQuery.extend({
        dir: function(elem, dir, until) {
            var matched = [], cur = elem[dir];
            while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
                if (cur.nodeType === 1) {
                    matched.push(cur);
                }
                cur = cur[dir];
            }
            return matched;
        },
        sibling: function(n, elem) {
            var r = [];
            for (;n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                    r.push(n);
                }
            }
            return r;
        }
    });
    jQuery.fn.extend({
        has: function(target) {
            var i, targets = jQuery(target, this), len = targets.length;
            return this.filter(function() {
                for (i = 0; i < len; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        closest: function(selectors, context) {
            var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
            for (;i < l; i++) {
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                    if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                        matched.push(cur);
                        break;
                    }
                }
            }
            return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
        },
        index: function(elem) {
            if (!elem) {
                return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === "string") {
                return jQuery.inArray(this[0], jQuery(elem));
            }
            return jQuery.inArray(elem.jquery ? elem[0] : elem, this);
        },
        add: function(selector, context) {
            return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        do {
            cur = cur[dir];
        } while (cur && cur.nodeType !== 1);
        return cur;
    }
    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
            return jQuery.dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        next: function(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
            return jQuery.sibling(elem.firstChild);
        },
        contents: function(elem) {
            return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var ret = jQuery.map(this, fn, until);
            if (name.slice(-5) !== "Until") {
                selector = until;
            }
            if (selector && typeof selector === "string") {
                ret = jQuery.filter(selector, ret);
            }
            if (this.length > 1) {
                if (!guaranteedUnique[name]) {
                    ret = jQuery.unique(ret);
                }
                if (rparentsprev.test(name)) {
                    ret = ret.reverse();
                }
            }
            return this.pushStack(ret);
        };
    });
    var rnotwhite = /\S+/g;
    var optionsCache = {};
    function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
            object[flag] = true;
        });
        return object;
    }
    jQuery.Callbacks = function(options) {
        options = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
        var firing, memory, fired, firingLength, firingIndex, firingStart, list = [], stack = !options.once && [], fire = function(data) {
            memory = options.memory && data;
            fired = true;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            firing = true;
            for (;list && firingIndex < firingLength; firingIndex++) {
                if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                    memory = false;
                    break;
                }
            }
            firing = false;
            if (list) {
                if (stack) {
                    if (stack.length) {
                        fire(stack.shift());
                    }
                } else if (memory) {
                    list = [];
                } else {
                    self.disable();
                }
            }
        }, self = {
            add: function() {
                if (list) {
                    var start = list.length;
                    (function add(args) {
                        jQuery.each(args, function(_, arg) {
                            var type = jQuery.type(arg);
                            if (type === "function") {
                                if (!options.unique || !self.has(arg)) {
                                    list.push(arg);
                                }
                            } else if (arg && arg.length && type !== "string") {
                                add(arg);
                            }
                        });
                    })(arguments);
                    if (firing) {
                        firingLength = list.length;
                    } else if (memory) {
                        firingStart = start;
                        fire(memory);
                    }
                }
                return this;
            },
            remove: function() {
                if (list) {
                    jQuery.each(arguments, function(_, arg) {
                        var index;
                        while ((index = jQuery.inArray(arg, list, index)) > -1) {
                            list.splice(index, 1);
                            if (firing) {
                                if (index <= firingLength) {
                                    firingLength--;
                                }
                                if (index <= firingIndex) {
                                    firingIndex--;
                                }
                            }
                        }
                    });
                }
                return this;
            },
            has: function(fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
            },
            empty: function() {
                list = [];
                firingLength = 0;
                return this;
            },
            disable: function() {
                list = stack = memory = undefined;
                return this;
            },
            disabled: function() {
                return !list;
            },
            lock: function() {
                stack = undefined;
                if (!memory) {
                    self.disable();
                }
                return this;
            },
            locked: function() {
                return !stack;
            },
            fireWith: function(context, args) {
                if (list && (!fired || stack)) {
                    args = args || [];
                    args = [ context, args.slice ? args.slice() : args ];
                    if (firing) {
                        stack.push(args);
                    } else {
                        fire(args);
                    }
                }
                return this;
            },
            fire: function() {
                self.fireWith(this, arguments);
                return this;
            },
            fired: function() {
                return !!fired;
            }
        };
        return self;
    };
    jQuery.extend({
        Deferred: function(func) {
            var tuples = [ [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ], [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ], [ "notify", "progress", jQuery.Callbacks("memory") ] ], state = "pending", promise = {
                state: function() {
                    return state;
                },
                always: function() {
                    deferred.done(arguments).fail(arguments);
                    return this;
                },
                then: function() {
                    var fns = arguments;
                    return jQuery.Deferred(function(newDefer) {
                        jQuery.each(tuples, function(i, tuple) {
                            var fn = jQuery.isFunction(fns[i]) && fns[i];
                            deferred[tuple[1]](function() {
                                var returned = fn && fn.apply(this, arguments);
                                if (returned && jQuery.isFunction(returned.promise)) {
                                    returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                                } else {
                                    newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments);
                                }
                            });
                        });
                        fns = null;
                    }).promise();
                },
                promise: function(obj) {
                    return obj != null ? jQuery.extend(obj, promise) : promise;
                }
            }, deferred = {};
            promise.pipe = promise.then;
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2], stateString = tuple[3];
                promise[tuple[1]] = list.add;
                if (stateString) {
                    list.add(function() {
                        state = stateString;
                    }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
                }
                deferred[tuple[0]] = function() {
                    deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                    return this;
                };
                deferred[tuple[0] + "With"] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
                func.call(deferred, deferred);
            }
            return deferred;
        },
        when: function(subordinate) {
            var i = 0, resolveValues = slice.call(arguments), length = resolveValues.length, remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0, deferred = remaining === 1 ? subordinate : jQuery.Deferred(), updateFunc = function(i, contexts, values) {
                return function(value) {
                    contexts[i] = this;
                    values[i] = arguments.length > 1 ? slice.call(arguments) : value;
                    if (values === progressValues) {
                        deferred.notifyWith(contexts, values);
                    } else if (!--remaining) {
                        deferred.resolveWith(contexts, values);
                    }
                };
            }, progressValues, progressContexts, resolveContexts;
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (;i < length; i++) {
                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                        resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
                    } else {
                        --remaining;
                    }
                }
            }
            if (!remaining) {
                deferred.resolveWith(resolveContexts, resolveValues);
            }
            return deferred.promise();
        }
    });
    var readyList;
    jQuery.fn.ready = function(fn) {
        jQuery.ready.promise().done(fn);
        return this;
    };
    jQuery.extend({
        isReady: false,
        readyWait: 1,
        holdReady: function(hold) {
            if (hold) {
                jQuery.readyWait++;
            } else {
                jQuery.ready(true);
            }
        },
        ready: function(wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }
            if (!document.body) {
                return setTimeout(jQuery.ready);
            }
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }
            readyList.resolveWith(document, [ jQuery ]);
            if (jQuery.fn.triggerHandler) {
                jQuery(document).triggerHandler("ready");
                jQuery(document).off("ready");
            }
        }
    });
    function detach() {
        if (document.addEventListener) {
            document.removeEventListener("DOMContentLoaded", completed, false);
            window.removeEventListener("load", completed, false);
        } else {
            document.detachEvent("onreadystatechange", completed);
            window.detachEvent("onload", completed);
        }
    }
    function completed() {
        if (document.addEventListener || event.type === "load" || document.readyState === "complete") {
            detach();
            jQuery.ready();
        }
    }
    jQuery.ready.promise = function(obj) {
        if (!readyList) {
            readyList = jQuery.Deferred();
            if (document.readyState === "complete") {
                setTimeout(jQuery.ready);
            } else if (document.addEventListener) {
                document.addEventListener("DOMContentLoaded", completed, false);
                window.addEventListener("load", completed, false);
            } else {
                document.attachEvent("onreadystatechange", completed);
                window.attachEvent("onload", completed);
                var top = false;
                try {
                    top = window.frameElement == null && document.documentElement;
                } catch (e) {}
                if (top && top.doScroll) {
                    (function doScrollCheck() {
                        if (!jQuery.isReady) {
                            try {
                                top.doScroll("left");
                            } catch (e) {
                                return setTimeout(doScrollCheck, 50);
                            }
                            detach();
                            jQuery.ready();
                        }
                    })();
                }
            }
        }
        return readyList.promise(obj);
    };
    var strundefined = typeof undefined;
    var i;
    for (i in jQuery(support)) {
        break;
    }
    support.ownLast = i !== "0";
    support.inlineBlockNeedsLayout = false;
    jQuery(function() {
        var val, div, body, container;
        body = document.getElementsByTagName("body")[0];
        if (!body || !body.style) {
            return;
        }
        div = document.createElement("div");
        container = document.createElement("div");
        container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
        body.appendChild(container).appendChild(div);
        if (typeof div.style.zoom !== strundefined) {
            div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";
            support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
            if (val) {
                body.style.zoom = 1;
            }
        }
        body.removeChild(container);
    });
    (function() {
        var div = document.createElement("div");
        if (support.deleteExpando == null) {
            support.deleteExpando = true;
            try {
                delete div.test;
            } catch (e) {
                support.deleteExpando = false;
            }
        }
        div = null;
    })();
    jQuery.acceptData = function(elem) {
        var noData = jQuery.noData[(elem.nodeName + " ").toLowerCase()], nodeType = +elem.nodeType || 1;
        return nodeType !== 1 && nodeType !== 9 ? false : !noData || noData !== true && elem.getAttribute("classid") === noData;
    };
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /([A-Z])/g;
    function dataAttr(elem, key, data) {
        if (data === undefined && elem.nodeType === 1) {
            var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
                try {
                    data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
                } catch (e) {}
                jQuery.data(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }
    function isEmptyDataObject(obj) {
        var name;
        for (name in obj) {
            if (name === "data" && jQuery.isEmptyObject(obj[name])) {
                continue;
            }
            if (name !== "toJSON") {
                return false;
            }
        }
        return true;
    }
    function internalData(elem, name, data, pvt) {
        if (!jQuery.acceptData(elem)) {
            return;
        }
        var ret, thisCache, internalKey = jQuery.expando, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;
        if ((!id || !cache[id] || !pvt && !cache[id].data) && data === undefined && typeof name === "string") {
            return;
        }
        if (!id) {
            if (isNode) {
                id = elem[internalKey] = deletedIds.pop() || jQuery.guid++;
            } else {
                id = internalKey;
            }
        }
        if (!cache[id]) {
            cache[id] = isNode ? {} : {
                toJSON: jQuery.noop
            };
        }
        if (typeof name === "object" || typeof name === "function") {
            if (pvt) {
                cache[id] = jQuery.extend(cache[id], name);
            } else {
                cache[id].data = jQuery.extend(cache[id].data, name);
            }
        }
        thisCache = cache[id];
        if (!pvt) {
            if (!thisCache.data) {
                thisCache.data = {};
            }
            thisCache = thisCache.data;
        }
        if (data !== undefined) {
            thisCache[jQuery.camelCase(name)] = data;
        }
        if (typeof name === "string") {
            ret = thisCache[name];
            if (ret == null) {
                ret = thisCache[jQuery.camelCase(name)];
            }
        } else {
            ret = thisCache;
        }
        return ret;
    }
    function internalRemoveData(elem, name, pvt) {
        if (!jQuery.acceptData(elem)) {
            return;
        }
        var thisCache, i, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[jQuery.expando] : jQuery.expando;
        if (!cache[id]) {
            return;
        }
        if (name) {
            thisCache = pvt ? cache[id] : cache[id].data;
            if (thisCache) {
                if (!jQuery.isArray(name)) {
                    if (name in thisCache) {
                        name = [ name ];
                    } else {
                        name = jQuery.camelCase(name);
                        if (name in thisCache) {
                            name = [ name ];
                        } else {
                            name = name.split(" ");
                        }
                    }
                } else {
                    name = name.concat(jQuery.map(name, jQuery.camelCase));
                }
                i = name.length;
                while (i--) {
                    delete thisCache[name[i]];
                }
                if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) {
                    return;
                }
            }
        }
        if (!pvt) {
            delete cache[id].data;
            if (!isEmptyDataObject(cache[id])) {
                return;
            }
        }
        if (isNode) {
            jQuery.cleanData([ elem ], true);
        } else if (support.deleteExpando || cache != cache.window) {
            delete cache[id];
        } else {
            cache[id] = null;
        }
    }
    jQuery.extend({
        cache: {},
        noData: {
            "applet ": true,
            "embed ": true,
            "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        },
        hasData: function(elem) {
            elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
            return !!elem && !isEmptyDataObject(elem);
        },
        data: function(elem, name, data) {
            return internalData(elem, name, data);
        },
        removeData: function(elem, name) {
            return internalRemoveData(elem, name);
        },
        _data: function(elem, name, data) {
            return internalData(elem, name, data, true);
        },
        _removeData: function(elem, name) {
            return internalRemoveData(elem, name, true);
        }
    });
    jQuery.fn.extend({
        data: function(key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === undefined) {
                if (this.length) {
                    data = jQuery.data(elem);
                    if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
                        i = attrs.length;
                        while (i--) {
                            if (attrs[i]) {
                                name = attrs[i].name;
                                if (name.indexOf("data-") === 0) {
                                    name = jQuery.camelCase(name.slice(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                        }
                        jQuery._data(elem, "parsedAttrs", true);
                    }
                }
                return data;
            }
            if (typeof key === "object") {
                return this.each(function() {
                    jQuery.data(this, key);
                });
            }
            return arguments.length > 1 ? this.each(function() {
                jQuery.data(this, key, value);
            }) : elem ? dataAttr(elem, key, jQuery.data(elem, key)) : undefined;
        },
        removeData: function(key) {
            return this.each(function() {
                jQuery.removeData(this, key);
            });
        }
    });
    jQuery.extend({
        queue: function(elem, type, data) {
            var queue;
            if (elem) {
                type = (type || "fx") + "queue";
                queue = jQuery._data(elem, type);
                if (data) {
                    if (!queue || jQuery.isArray(data)) {
                        queue = jQuery._data(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },
        dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
                jQuery.dequeue(elem, type);
            };
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                if (type === "fx") {
                    queue.unshift("inprogress");
                }
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },
        _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return jQuery._data(elem, key) || jQuery._data(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    jQuery._removeData(elem, type + "queue");
                    jQuery._removeData(elem, key);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function(type, data) {
            var setter = 2;
            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }
            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }
            return data === undefined ? this : this.each(function() {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                if (type === "fx" && queue[0] !== "inprogress") {
                    jQuery.dequeue(this, type);
                }
            });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", []);
        },
        promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
                if (!--count) {
                    defer.resolveWith(elements, [ elements ]);
                }
            };
            if (typeof type !== "string") {
                obj = type;
                type = undefined;
            }
            type = type || "fx";
            while (i--) {
                tmp = jQuery._data(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
    var isHidden = function(elem, el) {
        elem = el || elem;
        return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
    };
    var access = jQuery.access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, length = elems.length, bulk = key == null;
        if (jQuery.type(key) === "object") {
            chainable = true;
            for (i in key) {
                jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
            }
        } else if (value !== undefined) {
            chainable = true;
            if (!jQuery.isFunction(value)) {
                raw = true;
            }
            if (bulk) {
                if (raw) {
                    fn.call(elems, value);
                    fn = null;
                } else {
                    bulk = fn;
                    fn = function(elem, key, value) {
                        return bulk.call(jQuery(elem), value);
                    };
                }
            }
            if (fn) {
                for (;i < length; i++) {
                    fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                }
            }
        }
        return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
    };
    var rcheckableType = /^(?:checkbox|radio)$/i;
    (function() {
        var input = document.createElement("input"), div = document.createElement("div"), fragment = document.createDocumentFragment();
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        support.leadingWhitespace = div.firstChild.nodeType === 3;
        support.tbody = !div.getElementsByTagName("tbody").length;
        support.htmlSerialize = !!div.getElementsByTagName("link").length;
        support.html5Clone = document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>";
        input.type = "checkbox";
        input.checked = true;
        fragment.appendChild(input);
        support.appendChecked = input.checked;
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
        fragment.appendChild(div);
        div.innerHTML = "<input type='radio' checked='checked' name='t'/>";
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        support.noCloneEvent = true;
        if (div.attachEvent) {
            div.attachEvent("onclick", function() {
                support.noCloneEvent = false;
            });
            div.cloneNode(true).click();
        }
        if (support.deleteExpando == null) {
            support.deleteExpando = true;
            try {
                delete div.test;
            } catch (e) {
                support.deleteExpando = false;
            }
        }
    })();
    (function() {
        var i, eventName, div = document.createElement("div");
        for (i in {
            submit: true,
            change: true,
            focusin: true
        }) {
            eventName = "on" + i;
            if (!(support[i + "Bubbles"] = eventName in window)) {
                div.setAttribute(eventName, "t");
                support[i + "Bubbles"] = div.attributes[eventName].expando === false;
            }
        }
        div = null;
    })();
    var rformElems = /^(?:input|select|textarea)$/i, rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {}
    }
    jQuery.event = {
        global: {},
        add: function(elem, types, handler, data, selector) {
            var tmp, events, t, handleObjIn, special, eventHandle, handleObj, handlers, type, namespaces, origType, elemData = jQuery._data(elem);
            if (!elemData) {
                return;
            }
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function(e) {
                    return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;
                };
                eventHandle.elem = elem;
            }
            types = (types || "").match(rnotwhite) || [ "" ];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) {
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false);
                        } else if (elem.attachEvent) {
                            elem.attachEvent("on" + type, eventHandle);
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }
                jQuery.event.global[type] = true;
            }
            elem = null;
        },
        remove: function(elem, types, handler, selector, mappedTypes) {
            var j, handleObj, tmp, origCount, t, events, special, handlers, type, namespaces, origType, elemData = jQuery.hasData(elem) && jQuery._data(elem);
            if (!elemData || !(events = elemData.events)) {
                return;
            }
            types = (types || "").match(rnotwhite) || [ "" ];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }
                    delete events[type];
                }
            }
            if (jQuery.isEmptyObject(events)) {
                delete elemData.handle;
                jQuery._removeData(elem, "events");
            }
        },
        trigger: function(event, data, elem, onlyHandlers) {
            var handle, ontype, cur, bubbleType, special, tmp, i, eventPath = [ elem || document ], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = tmp = elem = elem || document;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }
            if (type.indexOf(".") >= 0) {
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }
            data = data == null ? [ event ] : jQuery.makeArray(data, [ event ]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (;cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                event.type = i > 1 ? bubbleType : special.bindType || type;
                handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
                if (handle) {
                    handle.apply(cur, data);
                }
                handle = ontype && cur[ontype];
                if (handle && handle.apply && jQuery.acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
                    if (ontype && elem[type] && !jQuery.isWindow(elem)) {
                        tmp = elem[ontype];
                        if (tmp) {
                            elem[ontype] = null;
                        }
                        jQuery.event.triggered = type;
                        try {
                            elem[type]();
                        } catch (e) {}
                        jQuery.event.triggered = undefined;
                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }
            return event.result;
        },
        dispatch: function(event) {
            event = jQuery.event.fix(event);
            var i, ret, handleObj, matched, j, handlerQueue = [], args = slice.call(arguments), handlers = (jQuery._data(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                    if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }
            return event.result;
        },
        handlers: function(event, handlers) {
            var sel, handleObj, matches, i, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
                for (;cur != this; cur = cur.parentNode || this) {
                    if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
                        matches = [];
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];
                            sel = handleObj.selector + " ";
                            if (matches[sel] === undefined) {
                                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [ cur ]).length;
                            }
                            if (matches[sel]) {
                                matches.push(handleObj);
                            }
                        }
                        if (matches.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matches
                            });
                        }
                    }
                }
            }
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: this,
                    handlers: handlers.slice(delegateCount)
                });
            }
            return handlerQueue;
        },
        fix: function(event) {
            if (event[jQuery.expando]) {
                return event;
            }
            var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
            if (!fixHook) {
                this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
            }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = new jQuery.Event(originalEvent);
            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }
            if (!event.target) {
                event.target = originalEvent.srcElement || document;
            }
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode;
            }
            event.metaKey = !!event.metaKey;
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(event, original) {
                if (event.which == null) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }
                return event;
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(event, original) {
                var body, eventDoc, doc, button = original.button, fromElement = original.fromElement;
                if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                }
                if (!event.relatedTarget && fromElement) {
                    event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
                }
                if (!event.which && button !== undefined) {
                    event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
                }
                return event;
            }
        },
        special: {
            load: {
                noBubble: true
            },
            focus: {
                trigger: function() {
                    if (this !== safeActiveElement() && this.focus) {
                        try {
                            this.focus();
                            return false;
                        } catch (e) {}
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    if (jQuery.nodeName(this, "input") && this.type === "checkbox" && this.click) {
                        this.click();
                        return false;
                    }
                },
                _default: function(event) {
                    return jQuery.nodeName(event.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function(event) {
                    if (event.result !== undefined && event.originalEvent) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        },
        simulate: function(type, elem, event, bubble) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true,
                originalEvent: {}
            });
            if (bubble) {
                jQuery.event.trigger(e, null, elem);
            } else {
                jQuery.event.dispatch.call(elem, e);
            }
            if (e.isDefaultPrevented()) {
                event.preventDefault();
            }
        }
    };
    jQuery.removeEvent = document.removeEventListener ? function(elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle, false);
        }
    } : function(elem, type, handle) {
        var name = "on" + type;
        if (elem.detachEvent) {
            if (typeof elem[name] === strundefined) {
                elem[name] = null;
            }
            elem.detachEvent(name, handle);
        }
    };
    jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;
        } else {
            this.type = src;
        }
        if (props) {
            jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = true;
    };
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (!e) {
                return;
            }
            if (e.preventDefault) {
                e.preventDefault();
            } else {
                e.returnValue = false;
            }
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (!e) {
                return;
            }
            if (e.stopPropagation) {
                e.stopPropagation();
            }
            e.cancelBubble = true;
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && e.stopImmediatePropagation) {
                e.stopImmediatePropagation();
            }
            this.stopPropagation();
        }
    };
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    if (!support.submitBubbles) {
        jQuery.event.special.submit = {
            setup: function() {
                if (jQuery.nodeName(this, "form")) {
                    return false;
                }
                jQuery.event.add(this, "click._submit keypress._submit", function(e) {
                    var elem = e.target, form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;
                    if (form && !jQuery._data(form, "submitBubbles")) {
                        jQuery.event.add(form, "submit._submit", function(event) {
                            event._submit_bubble = true;
                        });
                        jQuery._data(form, "submitBubbles", true);
                    }
                });
            },
            postDispatch: function(event) {
                if (event._submit_bubble) {
                    delete event._submit_bubble;
                    if (this.parentNode && !event.isTrigger) {
                        jQuery.event.simulate("submit", this.parentNode, event, true);
                    }
                }
            },
            teardown: function() {
                if (jQuery.nodeName(this, "form")) {
                    return false;
                }
                jQuery.event.remove(this, "._submit");
            }
        };
    }
    if (!support.changeBubbles) {
        jQuery.event.special.change = {
            setup: function() {
                if (rformElems.test(this.nodeName)) {
                    if (this.type === "checkbox" || this.type === "radio") {
                        jQuery.event.add(this, "propertychange._change", function(event) {
                            if (event.originalEvent.propertyName === "checked") {
                                this._just_changed = true;
                            }
                        });
                        jQuery.event.add(this, "click._change", function(event) {
                            if (this._just_changed && !event.isTrigger) {
                                this._just_changed = false;
                            }
                            jQuery.event.simulate("change", this, event, true);
                        });
                    }
                    return false;
                }
                jQuery.event.add(this, "beforeactivate._change", function(e) {
                    var elem = e.target;
                    if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {
                        jQuery.event.add(elem, "change._change", function(event) {
                            if (this.parentNode && !event.isSimulated && !event.isTrigger) {
                                jQuery.event.simulate("change", this.parentNode, event, true);
                            }
                        });
                        jQuery._data(elem, "changeBubbles", true);
                    }
                });
            },
            handle: function(event) {
                var elem = event.target;
                if (this !== elem || event.isSimulated || event.isTrigger || elem.type !== "radio" && elem.type !== "checkbox") {
                    return event.handleObj.handler.apply(this, arguments);
                }
            },
            teardown: function() {
                jQuery.event.remove(this, "._change");
                return !rformElems.test(this.nodeName);
            }
        };
    }
    if (!support.focusinBubbles) {
        jQuery.each({
            focus: "focusin",
            blur: "focusout"
        }, function(orig, fix) {
            var handler = function(event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
            };
            jQuery.event.special[fix] = {
                setup: function() {
                    var doc = this.ownerDocument || this, attaches = jQuery._data(doc, fix);
                    if (!attaches) {
                        doc.addEventListener(orig, handler, true);
                    }
                    jQuery._data(doc, fix, (attaches || 0) + 1);
                },
                teardown: function() {
                    var doc = this.ownerDocument || this, attaches = jQuery._data(doc, fix) - 1;
                    if (!attaches) {
                        doc.removeEventListener(orig, handler, true);
                        jQuery._removeData(doc, fix);
                    } else {
                        jQuery._data(doc, fix, attaches);
                    }
                }
            };
        });
    }
    jQuery.fn.extend({
        on: function(types, selector, data, fn, one) {
            var type, origFn;
            if (typeof types === "object") {
                if (typeof selector !== "string") {
                    data = data || selector;
                    selector = undefined;
                }
                for (type in types) {
                    this.on(type, selector, data, types[type], one);
                }
                return this;
            }
            if (data == null && fn == null) {
                fn = selector;
                data = selector = undefined;
            } else if (fn == null) {
                if (typeof selector === "string") {
                    fn = data;
                    data = undefined;
                } else {
                    fn = data;
                    data = selector;
                    selector = undefined;
                }
            }
            if (fn === false) {
                fn = returnFalse;
            } else if (!fn) {
                return this;
            }
            if (one === 1) {
                origFn = fn;
                fn = function(event) {
                    jQuery().off(event);
                    return origFn.apply(this, arguments);
                };
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return this.each(function() {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },
        one: function(types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === "object") {
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === "function") {
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        },
        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });
    function createSafeFragment(document) {
        var list = nodeNames.split("|"), safeFrag = document.createDocumentFragment();
        if (safeFrag.createElement) {
            while (list.length) {
                safeFrag.createElement(list.pop());
            }
        }
        return safeFrag;
    }
    var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" + "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g, rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"), rleadingWhitespace = /^\s+/, rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rtbody = /<tbody/i, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, wrapMap = {
        option: [ 1, "<select multiple='multiple'>", "</select>" ],
        legend: [ 1, "<fieldset>", "</fieldset>" ],
        area: [ 1, "<map>", "</map>" ],
        param: [ 1, "<object>", "</object>" ],
        thead: [ 1, "<table>", "</table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
    }, safeFragment = createSafeFragment(document), fragmentDiv = safeFragment.appendChild(document.createElement("div"));
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    function getAll(context, tag) {
        var elems, elem, i = 0, found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== strundefined ? context.querySelectorAll(tag || "*") : undefined;
        if (!found) {
            for (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) {
                if (!tag || jQuery.nodeName(elem, tag)) {
                    found.push(elem);
                } else {
                    jQuery.merge(found, getAll(elem, tag));
                }
            }
        }
        return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([ context ], found) : found;
    }
    function fixDefaultChecked(elem) {
        if (rcheckableType.test(elem.type)) {
            elem.defaultChecked = elem.checked;
        }
    }
    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
    }
    function disableScript(elem) {
        elem.type = (jQuery.find.attr(elem, "type") !== null) + "/" + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
            elem.type = match[1];
        } else {
            elem.removeAttribute("type");
        }
        return elem;
    }
    function setGlobalEval(elems, refElements) {
        var elem, i = 0;
        for (;(elem = elems[i]) != null; i++) {
            jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"));
        }
    }
    function cloneCopyEvent(src, dest) {
        if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
            return;
        }
        var type, i, l, oldData = jQuery._data(src), curData = jQuery._data(dest, oldData), events = oldData.events;
        if (events) {
            delete curData.handle;
            curData.events = {};
            for (type in events) {
                for (i = 0, l = events[type].length; i < l; i++) {
                    jQuery.event.add(dest, type, events[type][i]);
                }
            }
        }
        if (curData.data) {
            curData.data = jQuery.extend({}, curData.data);
        }
    }
    function fixCloneNodeIssues(src, dest) {
        var nodeName, e, data;
        if (dest.nodeType !== 1) {
            return;
        }
        nodeName = dest.nodeName.toLowerCase();
        if (!support.noCloneEvent && dest[jQuery.expando]) {
            data = jQuery._data(dest);
            for (e in data.events) {
                jQuery.removeEvent(dest, e, data.handle);
            }
            dest.removeAttribute(jQuery.expando);
        }
        if (nodeName === "script" && dest.text !== src.text) {
            disableScript(dest).text = src.text;
            restoreScript(dest);
        } else if (nodeName === "object") {
            if (dest.parentNode) {
                dest.outerHTML = src.outerHTML;
            }
            if (support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML))) {
                dest.innerHTML = src.innerHTML;
            }
        } else if (nodeName === "input" && rcheckableType.test(src.type)) {
            dest.defaultChecked = dest.checked = src.checked;
            if (dest.value !== src.value) {
                dest.value = src.value;
            }
        } else if (nodeName === "option") {
            dest.defaultSelected = dest.selected = src.defaultSelected;
        } else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;
        }
    }
    jQuery.extend({
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var destElements, node, clone, i, srcElements, inPage = jQuery.contains(elem.ownerDocument, elem);
            if (support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) {
                clone = elem.cloneNode(true);
            } else {
                fragmentDiv.innerHTML = elem.outerHTML;
                fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
            }
            if ((!support.noCloneEvent || !support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0; (node = srcElements[i]) != null; ++i) {
                    if (destElements[i]) {
                        fixCloneNodeIssues(node, destElements[i]);
                    }
                }
            }
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for (i = 0; (node = srcElements[i]) != null; i++) {
                        cloneCopyEvent(node, destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }
            destElements = srcElements = node = null;
            return clone;
        },
        buildFragment: function(elems, context, scripts, selection) {
            var j, elem, contains, tmp, tag, tbody, wrap, l = elems.length, safe = createSafeFragment(context), nodes = [], i = 0;
            for (;i < l; i++) {
                elem = elems[i];
                if (elem || elem === 0) {
                    if (jQuery.type(elem) === "object") {
                        jQuery.merge(nodes, elem.nodeType ? [ elem ] : elem);
                    } else if (!rhtml.test(elem)) {
                        nodes.push(context.createTextNode(elem));
                    } else {
                        tmp = tmp || safe.appendChild(context.createElement("div"));
                        tag = (rtagName.exec(elem) || [ "", "" ])[1].toLowerCase();
                        wrap = wrapMap[tag] || wrapMap._default;
                        tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                        j = wrap[0];
                        while (j--) {
                            tmp = tmp.lastChild;
                        }
                        if (!support.leadingWhitespace && rleadingWhitespace.test(elem)) {
                            nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
                        }
                        if (!support.tbody) {
                            elem = tag === "table" && !rtbody.test(elem) ? tmp.firstChild : wrap[1] === "<table>" && !rtbody.test(elem) ? tmp : 0;
                            j = elem && elem.childNodes.length;
                            while (j--) {
                                if (jQuery.nodeName(tbody = elem.childNodes[j], "tbody") && !tbody.childNodes.length) {
                                    elem.removeChild(tbody);
                                }
                            }
                        }
                        jQuery.merge(nodes, tmp.childNodes);
                        tmp.textContent = "";
                        while (tmp.firstChild) {
                            tmp.removeChild(tmp.firstChild);
                        }
                        tmp = safe.lastChild;
                    }
                }
            }
            if (tmp) {
                safe.removeChild(tmp);
            }
            if (!support.appendChecked) {
                jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
            }
            i = 0;
            while (elem = nodes[i++]) {
                if (selection && jQuery.inArray(elem, selection) !== -1) {
                    continue;
                }
                contains = jQuery.contains(elem.ownerDocument, elem);
                tmp = getAll(safe.appendChild(elem), "script");
                if (contains) {
                    setGlobalEval(tmp);
                }
                if (scripts) {
                    j = 0;
                    while (elem = tmp[j++]) {
                        if (rscriptType.test(elem.type || "")) {
                            scripts.push(elem);
                        }
                    }
                }
            }
            tmp = null;
            return safe;
        },
        cleanData: function(elems, acceptData) {
            var elem, type, id, data, i = 0, internalKey = jQuery.expando, cache = jQuery.cache, deleteExpando = support.deleteExpando, special = jQuery.event.special;
            for (;(elem = elems[i]) != null; i++) {
                if (acceptData || jQuery.acceptData(elem)) {
                    id = elem[internalKey];
                    data = id && cache[id];
                    if (data) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }
                        if (cache[id]) {
                            delete cache[id];
                            if (deleteExpando) {
                                delete elem[internalKey];
                            } else if (typeof elem.removeAttribute !== strundefined) {
                                elem.removeAttribute(internalKey);
                            } else {
                                elem[internalKey] = null;
                            }
                            deletedIds.push(id);
                        }
                    }
                }
            }
        }
    });
    jQuery.fn.extend({
        text: function(value) {
            return access(this, function(value) {
                return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
            }, null, value, arguments.length);
        },
        append: function() {
            return this.domManip(arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function() {
            return this.domManip(arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function() {
            return this.domManip(arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        after: function() {
            return this.domManip(arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },
        remove: function(selector, keepData) {
            var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;
            for (;(elem = elems[i]) != null; i++) {
                if (!keepData && elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem));
                }
                if (elem.parentNode) {
                    if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                        setGlobalEval(getAll(elem, "script"));
                    }
                    elem.parentNode.removeChild(elem);
                }
            }
            return this;
        },
        empty: function() {
            var elem, i = 0;
            for (;(elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                }
                while (elem.firstChild) {
                    elem.removeChild(elem.firstChild);
                }
                if (elem.options && jQuery.nodeName(elem, "select")) {
                    elem.options.length = 0;
                }
            }
            return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function(value) {
            return access(this, function(value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (value === undefined) {
                    return elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, "") : undefined;
                }
                if (typeof value === "string" && !rnoInnerhtml.test(value) && (support.htmlSerialize || !rnoshimcache.test(value)) && (support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || [ "", "" ])[1].toLowerCase()]) {
                    value = value.replace(rxhtmlTag, "<$1></$2>");
                    try {
                        for (;i < l; i++) {
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    } catch (e) {}
                }
                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        replaceWith: function() {
            var arg = arguments[0];
            this.domManip(arguments, function(elem) {
                arg = this.parentNode;
                jQuery.cleanData(getAll(this));
                if (arg) {
                    arg.replaceChild(elem, this);
                }
            });
            return arg && (arg.length || arg.nodeType) ? this : this.remove();
        },
        detach: function(selector) {
            return this.remove(selector, true);
        },
        domManip: function(args, callback) {
            args = concat.apply([], args);
            var first, node, hasScripts, scripts, doc, fragment, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
            if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
                return this.each(function(index) {
                    var self = set.eq(index);
                    if (isFunction) {
                        args[0] = value.call(this, index, self.html());
                    }
                    self.domManip(args, callback);
                });
            }
            if (l) {
                fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
                first = fragment.firstChild;
                if (fragment.childNodes.length === 1) {
                    fragment = first;
                }
                if (first) {
                    scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                    hasScripts = scripts.length;
                    for (;i < l; i++) {
                        node = fragment;
                        if (i !== iNoClone) {
                            node = jQuery.clone(node, true, true);
                            if (hasScripts) {
                                jQuery.merge(scripts, getAll(node, "script"));
                            }
                        }
                        callback.call(this[i], node, i);
                    }
                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;
                        jQuery.map(scripts, restoreScript);
                        for (i = 0; i < hasScripts; i++) {
                            node = scripts[i];
                            if (rscriptType.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(doc, node)) {
                                if (node.src) {
                                    if (jQuery._evalUrl) {
                                        jQuery._evalUrl(node.src);
                                    }
                                } else {
                                    jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, ""));
                                }
                            }
                        }
                    }
                    fragment = first = null;
                }
            }
            return this;
        }
    });
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var elems, i = 0, ret = [], insert = jQuery(selector), last = insert.length - 1;
            for (;i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    var iframe, elemdisplay = {};
    function actualDisplay(name, doc) {
        var style, elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], "display");
        elem.detach();
        return display;
    }
    function defaultDisplay(nodeName) {
        var doc = document, display = elemdisplay[nodeName];
        if (!display) {
            display = actualDisplay(nodeName, doc);
            if (display === "none" || !display) {
                iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);
                doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
                doc.write();
                doc.close();
                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }
            elemdisplay[nodeName] = display;
        }
        return display;
    }
    (function() {
        var shrinkWrapBlocksVal;
        support.shrinkWrapBlocks = function() {
            if (shrinkWrapBlocksVal != null) {
                return shrinkWrapBlocksVal;
            }
            shrinkWrapBlocksVal = false;
            var div, body, container;
            body = document.getElementsByTagName("body")[0];
            if (!body || !body.style) {
                return;
            }
            div = document.createElement("div");
            container = document.createElement("div");
            container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
            body.appendChild(container).appendChild(div);
            if (typeof div.style.zoom !== strundefined) {
                div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;" + "padding:1px;width:1px;zoom:1";
                div.appendChild(document.createElement("div")).style.width = "5px";
                shrinkWrapBlocksVal = div.offsetWidth !== 3;
            }
            body.removeChild(container);
            return shrinkWrapBlocksVal;
        };
    })();
    var rmargin = /^margin/;
    var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
    var getStyles, curCSS, rposition = /^(top|right|bottom|left)$/;
    if (window.getComputedStyle) {
        getStyles = function(elem) {
            return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
        };
        curCSS = function(elem, name, computed) {
            var width, minWidth, maxWidth, ret, style = elem.style;
            computed = computed || getStyles(elem);
            ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined;
            if (computed) {
                if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                    ret = jQuery.style(elem, name);
                }
                if (rnumnonpx.test(ret) && rmargin.test(name)) {
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;
                    style.minWidth = style.maxWidth = style.width = ret;
                    ret = computed.width;
                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth;
                }
            }
            return ret === undefined ? ret : ret + "";
        };
    } else if (document.documentElement.currentStyle) {
        getStyles = function(elem) {
            return elem.currentStyle;
        };
        curCSS = function(elem, name, computed) {
            var left, rs, rsLeft, ret, style = elem.style;
            computed = computed || getStyles(elem);
            ret = computed ? computed[name] : undefined;
            if (ret == null && style && style[name]) {
                ret = style[name];
            }
            if (rnumnonpx.test(ret) && !rposition.test(name)) {
                left = style.left;
                rs = elem.runtimeStyle;
                rsLeft = rs && rs.left;
                if (rsLeft) {
                    rs.left = elem.currentStyle.left;
                }
                style.left = name === "fontSize" ? "1em" : ret;
                ret = style.pixelLeft + "px";
                style.left = left;
                if (rsLeft) {
                    rs.left = rsLeft;
                }
            }
            return ret === undefined ? ret : ret + "" || "auto";
        };
    }
    function addGetHookIf(conditionFn, hookFn) {
        return {
            get: function() {
                var condition = conditionFn();
                if (condition == null) {
                    return;
                }
                if (condition) {
                    delete this.get;
                    return;
                }
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    (function() {
        var div, style, a, pixelPositionVal, boxSizingReliableVal, reliableHiddenOffsetsVal, reliableMarginRightVal;
        div = document.createElement("div");
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        a = div.getElementsByTagName("a")[0];
        style = a && a.style;
        if (!style) {
            return;
        }
        style.cssText = "float:left;opacity:.5";
        support.opacity = style.opacity === "0.5";
        support.cssFloat = !!style.cssFloat;
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" || style.WebkitBoxSizing === "";
        jQuery.extend(support, {
            reliableHiddenOffsets: function() {
                if (reliableHiddenOffsetsVal == null) {
                    computeStyleTests();
                }
                return reliableHiddenOffsetsVal;
            },
            boxSizingReliable: function() {
                if (boxSizingReliableVal == null) {
                    computeStyleTests();
                }
                return boxSizingReliableVal;
            },
            pixelPosition: function() {
                if (pixelPositionVal == null) {
                    computeStyleTests();
                }
                return pixelPositionVal;
            },
            reliableMarginRight: function() {
                if (reliableMarginRightVal == null) {
                    computeStyleTests();
                }
                return reliableMarginRightVal;
            }
        });
        function computeStyleTests() {
            var div, body, container, contents;
            body = document.getElementsByTagName("body")[0];
            if (!body || !body.style) {
                return;
            }
            div = document.createElement("div");
            container = document.createElement("div");
            container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
            body.appendChild(container).appendChild(div);
            div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + "box-sizing:border-box;display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute";
            pixelPositionVal = boxSizingReliableVal = false;
            reliableMarginRightVal = true;
            if (window.getComputedStyle) {
                pixelPositionVal = (window.getComputedStyle(div, null) || {}).top !== "1%";
                boxSizingReliableVal = (window.getComputedStyle(div, null) || {
                    width: "4px"
                }).width === "4px";
                contents = div.appendChild(document.createElement("div"));
                contents.style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
                contents.style.marginRight = contents.style.width = "0";
                div.style.width = "1px";
                reliableMarginRightVal = !parseFloat((window.getComputedStyle(contents, null) || {}).marginRight);
            }
            div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
            contents = div.getElementsByTagName("td");
            contents[0].style.cssText = "margin:0;border:0;padding:0;display:none";
            reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;
            if (reliableHiddenOffsetsVal) {
                contents[0].style.display = "";
                contents[1].style.display = "none";
                reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;
            }
            body.removeChild(container);
        }
    })();
    jQuery.swap = function(elem, options, callback, args) {
        var ret, name, old = {};
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) {
            elem.style[name] = old[name];
        }
        return ret;
    };
    var ralpha = /alpha\([^)]*\)/i, ropacity = /opacity\s*=\s*([^)]*)/, rdisplayswap = /^(none|table(?!-c[ea]).+)/, rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"), rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"), cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
    }, cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];
    function vendorPropName(style, name) {
        if (name in style) {
            return name;
        }
        var capName = name.charAt(0).toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in style) {
                return name;
            }
        }
        return origName;
    }
    function showHide(elements, show) {
        var display, elem, hidden, values = [], index = 0, length = elements.length;
        for (;index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            values[index] = jQuery._data(elem, "olddisplay");
            display = elem.style.display;
            if (show) {
                if (!values[index] && display === "none") {
                    elem.style.display = "";
                }
                if (elem.style.display === "" && isHidden(elem)) {
                    values[index] = jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName));
                }
            } else {
                hidden = isHidden(elem);
                if (display && display !== "none" || !hidden) {
                    jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
                }
            }
        }
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            if (!show || elem.style.display === "none" || elem.style.display === "") {
                elem.style.display = show ? values[index] || "" : "none";
            }
        }
        return elements;
    }
    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
    }
    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? "border" : "content") ? 4 : name === "width" ? 1 : 0, val = 0;
        for (;i < 4; i += 2) {
            if (extra === "margin") {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            }
            if (isBorderBox) {
                if (extra === "content") {
                    val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                }
                if (extra !== "margin") {
                    val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            } else {
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                if (extra !== "padding") {
                    val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
        }
        return val;
    }
    function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox = true, val = name === "width" ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box";
        if (val <= 0 || val == null) {
            val = curCSS(elem, name, styles);
            if (val < 0 || val == null) {
                val = elem.style[name];
            }
            if (rnumnonpx.test(val)) {
                return val;
            }
            valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
            val = parseFloat(val) || 0;
        }
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
    }
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },
        cssNumber: {
            columnCount: true,
            fillOpacity: true,
            flexGrow: true,
            flexShrink: true,
            fontWeight: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            widows: true,
            zIndex: true,
            zoom: true
        },
        cssProps: {
            "float": support.cssFloat ? "cssFloat" : "styleFloat"
        },
        style: function(elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }
            var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== undefined) {
                type = typeof value;
                if (type === "string" && (ret = rrelNum.exec(value))) {
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    type = "number";
                }
                if (value == null || value !== value) {
                    return;
                }
                if (type === "number" && !jQuery.cssNumber[origName]) {
                    value += "px";
                }
                if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                    style[name] = "inherit";
                }
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    try {
                        style[name] = value;
                    } catch (e) {}
                }
            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }
                return style[name];
            }
        },
        css: function(elem, name, extra, styles) {
            var num, val, hooks, origName = jQuery.camelCase(name);
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && "get" in hooks) {
                val = hooks.get(elem, true, extra);
            }
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }
            if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
            }
            return val;
        }
    });
    jQuery.each([ "height", "width" ], function(i, name) {
        jQuery.cssHooks[name] = {
            get: function(elem, computed, extra) {
                if (computed) {
                    return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function() {
                        return getWidthOrHeight(elem, name, extra);
                    }) : getWidthOrHeight(elem, name, extra);
                }
            },
            set: function(elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
            }
        };
    });
    if (!support.opacity) {
        jQuery.cssHooks.opacity = {
            get: function(elem, computed) {
                return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : computed ? "1" : "";
            },
            set: function(elem, value) {
                var style = elem.style, currentStyle = elem.currentStyle, opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "", filter = currentStyle && currentStyle.filter || style.filter || "";
                style.zoom = 1;
                if ((value >= 1 || value === "") && jQuery.trim(filter.replace(ralpha, "")) === "" && style.removeAttribute) {
                    style.removeAttribute("filter");
                    if (value === "" || currentStyle && !currentStyle.filter) {
                        return;
                    }
                }
                style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
            }
        };
    }
    jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(elem, computed) {
        if (computed) {
            return jQuery.swap(elem, {
                display: "inline-block"
            }, curCSS, [ elem, "marginRight" ]);
        }
    });
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
                var i = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [ value ];
                for (;i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                }
                return expanded;
            }
        };
        if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    jQuery.fn.extend({
        css: function(name, value) {
            return access(this, function(elem, name, value) {
                var styles, len, map = {}, i = 0;
                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (;i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        },
        show: function() {
            return showHide(this, true);
        },
        hide: function() {
            return showHide(this);
        },
        toggle: function(state) {
            if (typeof state === "boolean") {
                return state ? this.show() : this.hide();
            }
            return this.each(function() {
                if (isHidden(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function(tween) {
                var result;
                if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
                    return tween.elem[tween.prop];
                }
                result = jQuery.css(tween.elem, tween.prop, "");
                return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };
    jQuery.easing = {
        linear: function(p) {
            return p;
        },
        swing: function(p) {
            return .5 - Math.cos(p * Math.PI) / 2;
        }
    };
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.step = {};
    var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"), rrun = /queueHooks$/, animationPrefilters = [ defaultPrefilter ], tweeners = {
        "*": [ function(prop, value) {
            var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"), start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
            if (start && start[3] !== unit) {
                unit = unit || start[3];
                parts = parts || [];
                start = +target || 1;
                do {
                    scale = scale || ".5";
                    start = start / scale;
                    jQuery.style(tween.elem, prop, start + unit);
                } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
            }
            if (parts) {
                start = tween.start = +start || +target || 0;
                tween.unit = unit;
                tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
            }
            return tween;
        } ]
    };
    function createFxNow() {
        setTimeout(function() {
            fxNow = undefined;
        });
        return fxNow = jQuery.now();
    }
    function genFx(type, includeWidth) {
        var which, attrs = {
            height: type
        }, i = 0;
        includeWidth = includeWidth ? 1 : 0;
        for (;i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }
        return attrs;
    }
    function createTween(value, prop, animation) {
        var tween, collection = (tweeners[prop] || []).concat(tweeners["*"]), index = 0, length = collection.length;
        for (;index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
                return tween;
            }
        }
    }
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = jQuery._data(elem, "fxshow");
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
            anim.always(function() {
                anim.always(function() {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) {
                        hooks.empty.fire();
                    }
                });
            });
        }
        if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
            display = jQuery.css(elem, "display");
            checkDisplay = display === "none" ? jQuery._data(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;
            if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
                if (!support.inlineBlockNeedsLayout || defaultDisplay(elem.nodeName) === "inline") {
                    style.display = "inline-block";
                } else {
                    style.zoom = 1;
                }
            }
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            if (!support.shrinkWrapBlocks()) {
                anim.always(function() {
                    style.overflow = opts.overflow[0];
                    style.overflowX = opts.overflow[1];
                    style.overflowY = opts.overflow[2];
                });
            }
        }
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {
                    if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                        hidden = true;
                    } else {
                        continue;
                    }
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            } else {
                display = undefined;
            }
        }
        if (!jQuery.isEmptyObject(orig)) {
            if (dataShow) {
                if ("hidden" in dataShow) {
                    hidden = dataShow.hidden;
                }
            } else {
                dataShow = jQuery._data(elem, "fxshow", {});
            }
            if (toggle) {
                dataShow.hidden = !hidden;
            }
            if (hidden) {
                jQuery(elem).show();
            } else {
                anim.done(function() {
                    jQuery(elem).hide();
                });
            }
            anim.done(function() {
                var prop;
                jQuery._removeData(elem, "fxshow");
                for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                }
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = prop === "width" || prop === "height" ? 1 : 0;
                    }
                }
            }
        } else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
            style.display = display;
        }
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function() {
            delete tick.elem;
        }), tick = function() {
            if (stopped) {
                return false;
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for (;index < length; index++) {
                animation.tweens[index].run(percent);
            }
            deferred.notifyWith(elem, [ animation, percent, remaining ]);
            if (percent < 1 && length) {
                return remaining;
            } else {
                deferred.resolveWith(elem, [ animation ]);
                return false;
            }
        }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {
                specialEasing: {}
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
            },
            stop: function(gotoEnd) {
                var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) {
                    return this;
                }
                stopped = true;
                for (;index < length; index++) {
                    animation.tweens[index].run(1);
                }
                if (gotoEnd) {
                    deferred.resolveWith(elem, [ animation, gotoEnd ]);
                } else {
                    deferred.rejectWith(elem, [ animation, gotoEnd ]);
                }
                return this;
            }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (;index < length; index++) {
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                return result;
            }
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweener: function(props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = [ "*" ];
            } else {
                props = props.split(" ");
            }
            var prop, index = 0, length = props.length;
            for (;index < length; index++) {
                prop = props[index];
                tweeners[prop] = tweeners[prop] || [];
                tweeners[prop].unshift(callback);
            }
        },
        prefilter: function(callback, prepend) {
            if (prepend) {
                animationPrefilters.unshift(callback);
            } else {
                animationPrefilters.push(callback);
            }
        }
    });
    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
        }
        opt.old = opt.complete;
        opt.complete = function() {
            if (jQuery.isFunction(opt.old)) {
                opt.old.call(this);
            }
            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };
        return opt;
    };
    jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
            return this.filter(isHidden).css("opacity", 0).show().end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
                var anim = Animation(this, jQuery.extend({}, prop), optall);
                if (empty || jQuery._data(this, "finish")) {
                    anim.stop(true);
                }
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
            }
            return this.each(function() {
                var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = jQuery._data(this);
                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }
                for (index = timers.length; index--; ) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function(type) {
            if (type !== false) {
                type = type || "fx";
            }
            return this.each(function() {
                var index, data = jQuery._data(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
                data.finish = true;
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }
                for (index = timers.length; index--; ) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }
                delete data.finish;
            });
        }
    });
    jQuery.each([ "toggle", "show", "hide" ], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer, timers = jQuery.timers, i = 0;
        fxNow = jQuery.now();
        for (;i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }
        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };
    jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        if (timer()) {
            jQuery.fx.start();
        } else {
            jQuery.timers.pop();
        }
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function() {
        if (!timerId) {
            timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
    };
    jQuery.fx.stop = function() {
        clearInterval(timerId);
        timerId = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function(next, hooks) {
            var timeout = setTimeout(next, time);
            hooks.stop = function() {
                clearTimeout(timeout);
            };
        });
    };
    (function() {
        var input, div, select, a, opt;
        div = document.createElement("div");
        div.setAttribute("className", "t");
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        a = div.getElementsByTagName("a")[0];
        select = document.createElement("select");
        opt = select.appendChild(document.createElement("option"));
        input = div.getElementsByTagName("input")[0];
        a.style.cssText = "top:1px";
        support.getSetAttribute = div.className !== "t";
        support.style = /top/.test(a.getAttribute("style"));
        support.hrefNormalized = a.getAttribute("href") === "/a";
        support.checkOn = !!input.value;
        support.optSelected = opt.selected;
        support.enctype = !!document.createElement("form").enctype;
        select.disabled = true;
        support.optDisabled = !opt.disabled;
        input = document.createElement("input");
        input.setAttribute("value", "");
        support.input = input.getAttribute("value") === "";
        input.value = "t";
        input.setAttribute("type", "radio");
        support.radioValue = input.value === "t";
    })();
    var rreturn = /\r/g;
    jQuery.fn.extend({
        val: function(value) {
            var hooks, ret, isFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                        return ret;
                    }
                    ret = elem.value;
                    return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret;
                }
                return;
            }
            isFunction = jQuery.isFunction(value);
            return this.each(function(i) {
                var val;
                if (this.nodeType !== 1) {
                    return;
                }
                if (isFunction) {
                    val = value.call(this, i, jQuery(this).val());
                } else {
                    val = value;
                }
                if (val == null) {
                    val = "";
                } else if (typeof val === "number") {
                    val += "";
                } else if (jQuery.isArray(val)) {
                    val = jQuery.map(val, function(value) {
                        return value == null ? "" : value + "";
                    });
                }
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val;
                }
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function(elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return val != null ? val : jQuery.trim(jQuery.text(elem));
                }
            },
            select: {
                get: function(elem) {
                    var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one" || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
                    for (;i < max; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                            value = jQuery(option).val();
                            if (one) {
                                return value;
                            }
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function(elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while (i--) {
                        option = options[i];
                        if (jQuery.inArray(jQuery.valHooks.option.get(option), values) >= 0) {
                            try {
                                option.selected = optionSet = true;
                            } catch (_) {
                                option.scrollHeight;
                            }
                        } else {
                            option.selected = false;
                        }
                    }
                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }
                    return options;
                }
            }
        }
    });
    jQuery.each([ "radio", "checkbox" ], function() {
        jQuery.valHooks[this] = {
            set: function(elem, value) {
                if (jQuery.isArray(value)) {
                    return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
                }
            }
        };
        if (!support.checkOn) {
            jQuery.valHooks[this].get = function(elem) {
                return elem.getAttribute("value") === null ? "on" : elem.value;
            };
        }
    });
    var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle, ruseDefault = /^(?:checked|selected)$/i, getSetAttribute = support.getSetAttribute, getSetInput = support.input;
    jQuery.fn.extend({
        attr: function(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function(elem, name, value) {
            var hooks, ret, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (typeof elem.getAttribute === strundefined) {
                return jQuery.prop(elem, name, value);
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
            }
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                } else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                } else {
                    elem.setAttribute(name, value + "");
                    return value;
                }
            } else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            } else {
                ret = jQuery.find.attr(elem, name);
                return ret == null ? undefined : ret;
            }
        },
        removeAttr: function(elem, value) {
            var name, propName, i = 0, attrNames = value && value.match(rnotwhite);
            if (attrNames && elem.nodeType === 1) {
                while (name = attrNames[i++]) {
                    propName = jQuery.propFix[name] || name;
                    if (jQuery.expr.match.bool.test(name)) {
                        if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
                            elem[propName] = false;
                        } else {
                            elem[jQuery.camelCase("default-" + name)] = elem[propName] = false;
                        }
                    } else {
                        jQuery.attr(elem, name, "");
                    }
                    elem.removeAttribute(getSetAttribute ? name : propName);
                }
            }
        },
        attrHooks: {
            type: {
                set: function(elem, value) {
                    if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        }
    });
    boolHook = {
        set: function(elem, value, name) {
            if (value === false) {
                jQuery.removeAttr(elem, name);
            } else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
                elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name);
            } else {
                elem[jQuery.camelCase("default-" + name)] = elem[name] = true;
            }
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = getSetInput && getSetAttribute || !ruseDefault.test(name) ? function(elem, name, isXML) {
            var ret, handle;
            if (!isXML) {
                handle = attrHandle[name];
                attrHandle[name] = ret;
                ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
                attrHandle[name] = handle;
            }
            return ret;
        } : function(elem, name, isXML) {
            if (!isXML) {
                return elem[jQuery.camelCase("default-" + name)] ? name.toLowerCase() : null;
            }
        };
    });
    if (!getSetInput || !getSetAttribute) {
        jQuery.attrHooks.value = {
            set: function(elem, value, name) {
                if (jQuery.nodeName(elem, "input")) {
                    elem.defaultValue = value;
                } else {
                    return nodeHook && nodeHook.set(elem, value, name);
                }
            }
        };
    }
    if (!getSetAttribute) {
        nodeHook = {
            set: function(elem, value, name) {
                var ret = elem.getAttributeNode(name);
                if (!ret) {
                    elem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));
                }
                ret.value = value += "";
                if (name === "value" || value === elem.getAttribute(name)) {
                    return value;
                }
            }
        };
        attrHandle.id = attrHandle.name = attrHandle.coords = function(elem, name, isXML) {
            var ret;
            if (!isXML) {
                return (ret = elem.getAttributeNode(name)) && ret.value !== "" ? ret.value : null;
            }
        };
        jQuery.valHooks.button = {
            get: function(elem, name) {
                var ret = elem.getAttributeNode(name);
                if (ret && ret.specified) {
                    return ret.value;
                }
            },
            set: nodeHook.set
        };
        jQuery.attrHooks.contenteditable = {
            set: function(elem, value, name) {
                nodeHook.set(elem, value === "" ? false : value, name);
            }
        };
        jQuery.each([ "width", "height" ], function(i, name) {
            jQuery.attrHooks[name] = {
                set: function(elem, value) {
                    if (value === "") {
                        elem.setAttribute(name, "auto");
                        return value;
                    }
                }
            };
        });
    }
    if (!support.style) {
        jQuery.attrHooks.style = {
            get: function(elem) {
                return elem.style.cssText || undefined;
            },
            set: function(elem, value) {
                return elem.style.cssText = value + "";
            }
        };
    }
    var rfocusable = /^(?:input|select|textarea|button|object)$/i, rclickable = /^(?:a|area)$/i;
    jQuery.fn.extend({
        prop: function(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function(name) {
            name = jQuery.propFix[name] || name;
            return this.each(function() {
                try {
                    this[name] = undefined;
                    delete this[name];
                } catch (e) {}
            });
        }
    });
    jQuery.extend({
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },
        prop: function(elem, name, value) {
            var ret, hooks, notxml, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
            if (notxml) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
                return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
            } else {
                return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
            }
        },
        propHooks: {
            tabIndex: {
                get: function(elem) {
                    var tabindex = jQuery.find.attr(elem, "tabindex");
                    return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
                }
            }
        }
    });
    if (!support.hrefNormalized) {
        jQuery.each([ "href", "src" ], function(i, name) {
            jQuery.propHooks[name] = {
                get: function(elem) {
                    return elem.getAttribute(name, 4);
                }
            };
        });
    }
    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            get: function(elem) {
                var parent = elem.parentNode;
                if (parent) {
                    parent.selectedIndex;
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
                return null;
            }
        };
    }
    jQuery.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    if (!support.enctype) {
        jQuery.propFix.enctype = "encoding";
    }
    var rclass = /[\t\r\n\f]/g;
    jQuery.fn.extend({
        addClass: function(value) {
            var classes, elem, cur, clazz, j, finalValue, i = 0, len = this.length, proceed = typeof value === "string" && value;
            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).addClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || "").match(rnotwhite) || [];
                for (;i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            if (cur.indexOf(" " + clazz + " ") < 0) {
                                cur += clazz + " ";
                            }
                        }
                        finalValue = jQuery.trim(cur);
                        if (elem.className !== finalValue) {
                            elem.className = finalValue;
                        }
                    }
                }
            }
            return this;
        },
        removeClass: function(value) {
            var classes, elem, cur, clazz, j, finalValue, i = 0, len = this.length, proceed = arguments.length === 0 || typeof value === "string" && value;
            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).removeClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || "").match(rnotwhite) || [];
                for (;i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            while (cur.indexOf(" " + clazz + " ") >= 0) {
                                cur = cur.replace(" " + clazz + " ", " ");
                            }
                        }
                        finalValue = value ? jQuery.trim(cur) : "";
                        if (elem.className !== finalValue) {
                            elem.className = finalValue;
                        }
                    }
                }
            }
            return this;
        },
        toggleClass: function(value, stateVal) {
            var type = typeof value;
            if (typeof stateVal === "boolean" && type === "string") {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
                });
            }
            return this.each(function() {
                if (type === "string") {
                    var className, i = 0, self = jQuery(this), classNames = value.match(rnotwhite) || [];
                    while (className = classNames[i++]) {
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }
                } else if (type === strundefined || type === "boolean") {
                    if (this.className) {
                        jQuery._data(this, "__className__", this.className);
                    }
                    this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || "";
                }
            });
        },
        hasClass: function(selector) {
            var className = " " + selector + " ", i = 0, l = this.length;
            for (;i < l; i++) {
                if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
                    return true;
                }
            }
            return false;
        }
    });
    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {
        jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },
        bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        }
    });
    var nonce = jQuery.now();
    var rquery = /\?/;
    var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
    jQuery.parseJSON = function(data) {
        if (window.JSON && window.JSON.parse) {
            return window.JSON.parse(data + "");
        }
        var requireNonComma, depth = null, str = jQuery.trim(data + "");
        return str && !jQuery.trim(str.replace(rvalidtokens, function(token, comma, open, close) {
            if (requireNonComma && comma) {
                depth = 0;
            }
            if (depth === 0) {
                return token;
            }
            requireNonComma = open || comma;
            depth += !close - !open;
            return "";
        })) ? Function("return " + str)() : jQuery.error("Invalid JSON: " + data);
    };
    jQuery.parseXML = function(data) {
        var xml, tmp;
        if (!data || typeof data !== "string") {
            return null;
        }
        try {
            if (window.DOMParser) {
                tmp = new DOMParser();
                xml = tmp.parseFromString(data, "text/xml");
            } else {
                xml = new ActiveXObject("Microsoft.XMLDOM");
                xml.async = "false";
                xml.loadXML(data);
            }
        } catch (e) {
            xml = undefined;
        }
        if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
            jQuery.error("Invalid XML: " + data);
        }
        return xml;
    };
    var ajaxLocParts, ajaxLocation, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, prefilters = {}, transports = {}, allTypes = "*/".concat("*");
    try {
        ajaxLocation = location.href;
    } catch (e) {
        ajaxLocation = document.createElement("a");
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href;
    }
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
    function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
            if (jQuery.isFunction(func)) {
                while (dataType = dataTypes[i++]) {
                    if (dataType.charAt(0) === "+") {
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func);
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }
    function ajaxExtend(target, src) {
        var deep, key, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }
        return target;
    }
    function ajaxHandleResponses(s, jqXHR, responses) {
        var firstDataType, ct, finalDataType, type, contents = s.contents, dataTypes = s.dataTypes;
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }
        current = dataTypes.shift();
        while (current) {
            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
                if (current === "*") {
                    current = prev;
                } else if (prev !== "*" && prev !== current) {
                    conv = converters[prev + " " + current] || converters["* " + current];
                    if (!conv) {
                        for (conv2 in converters) {
                            tmp = conv2.split(" ");
                            if (tmp[1] === current) {
                                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                                if (conv) {
                                    if (conv === true) {
                                        conv = converters[conv2];
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    if (conv !== true) {
                        if (conv && s["throws"]) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: "parsererror",
                                    error: conv ? e : "No conversion from " + prev + " to " + current
                                };
                            }
                        }
                    }
                }
            }
        }
        return {
            state: "success",
            data: response
        };
    }
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": true,
                "text json": jQuery.parseJSON,
                "text xml": jQuery.parseXML
            },
            flatOptions: {
                url: true,
                context: true
            }
        },
        ajaxSetup: function(target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function(url, options) {
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }
            options = options || {};
            var parts, i, cacheURL, responseHeadersString, timeoutTimer, fireGlobals, transport, responseHeaders, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = "canceled", jqXHR = {
                readyState: 0,
                getResponseHeader: function(key) {
                    var match;
                    if (state === 2) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            while (match = rheaders.exec(responseHeadersString)) {
                                responseHeaders[match[1].toLowerCase()] = match[2];
                            }
                        }
                        match = responseHeaders[key.toLowerCase()];
                    }
                    return match == null ? null : match;
                },
                getAllResponseHeaders: function() {
                    return state === 2 ? responseHeadersString : null;
                },
                setRequestHeader: function(name, value) {
                    var lname = name.toLowerCase();
                    if (!state) {
                        name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },
                overrideMimeType: function(type) {
                    if (!state) {
                        s.mimeType = type;
                    }
                    return this;
                },
                statusCode: function(map) {
                    var code;
                    if (map) {
                        if (state < 2) {
                            for (code in map) {
                                statusCode[code] = [ statusCode[code], map[code] ];
                            }
                        } else {
                            jqXHR.always(map[jqXHR.status]);
                        }
                    }
                    return this;
                },
                abort: function(statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) {
                        transport.abort(finalText);
                    }
                    done(0, finalText);
                    return this;
                }
            };
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [ "" ];
            if (s.crossDomain == null) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
            }
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (state === 2) {
                return jqXHR;
            }
            fireGlobals = s.global;
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url;
            if (!s.hasContent) {
                if (s.data) {
                    cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                    delete s.data;
                }
                if (s.cache === false) {
                    s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + nonce++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
                }
            }
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                return jqXHR.abort();
            }
            strAbort = "abort";
            for (i in {
                success: 1,
                error: 1,
                complete: 1
            }) {
                jqXHR[i](s[i]);
            }
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
                done(-1, "No Transport");
            } else {
                jqXHR.readyState = 1;
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [ jqXHR, s ]);
                }
                if (s.async && s.timeout > 0) {
                    timeoutTimer = setTimeout(function() {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }
                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (state < 2) {
                        done(-1, e);
                    } else {
                        throw e;
                    }
                }
            }
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (state === 2) {
                    return;
                }
                state = 2;
                if (timeoutTimer) {
                    clearTimeout(timeoutTimer);
                }
                transport = undefined;
                responseHeadersString = headers || "";
                jqXHR.readyState = status > 0 ? 4 : 0;
                isSuccess = status >= 200 && status < 300 || status === 304;
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                if (isSuccess) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }
                    if (status === 204 || s.type === "HEAD") {
                        statusText = "nocontent";
                    } else if (status === 304) {
                        statusText = "notmodified";
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [ success, statusText, jqXHR ]);
                } else {
                    deferred.rejectWith(callbackContext, [ jqXHR, statusText, error ]);
                }
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [ jqXHR, s, isSuccess ? success : error ]);
                }
                completeDeferred.fireWith(callbackContext, [ jqXHR, statusText ]);
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [ jqXHR, s ]);
                    if (!--jQuery.active) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }
            return jqXHR;
        },
        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        getScript: function(url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        }
    });
    jQuery.each([ "get", "post" ], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        };
    });
    jQuery.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });
    jQuery._evalUrl = function(url) {
        return jQuery.ajax({
            url: url,
            type: "GET",
            dataType: "script",
            async: false,
            global: false,
            "throws": true
        });
    };
    jQuery.fn.extend({
        wrapAll: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapAll(html.call(this, i));
                });
            }
            if (this[0]) {
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }
                wrap.map(function() {
                    var elem = this;
                    while (elem.firstChild && elem.firstChild.nodeType === 1) {
                        elem = elem.firstChild;
                    }
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }
            return this.each(function() {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html);
                } else {
                    self.append(html);
                }
            });
        },
        wrap: function(html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function(i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function() {
            return this.parent().each(function() {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        }
    });
    jQuery.expr.filters.hidden = function(elem) {
        return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !support.reliableHiddenOffsets() && (elem.style && elem.style.display || jQuery.css(elem, "display")) === "none";
    };
    jQuery.expr.filters.visible = function(elem) {
        return !jQuery.expr.filters.hidden(elem);
    };
    var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) {
            jQuery.each(obj, function(i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v);
                } else {
                    buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
                }
            });
        } else if (!traditional && jQuery.type(obj) === "object") {
            for (name in obj) {
                buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }
        } else {
            add(prefix, obj);
        }
    }
    jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function(key, value) {
            value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
        };
        if (traditional === undefined) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            jQuery.each(a, function() {
                add(this.name, this.value);
            });
        } else {
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }
        return s.join("&").replace(r20, "+");
    };
    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
                var type = this.type;
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(i, elem) {
                var val = jQuery(this).val();
                return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    };
                }) : {
                    name: elem.name,
                    value: val.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ? function() {
        return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && createStandardXHR() || createActiveXHR();
    } : createStandardXHR;
    var xhrId = 0, xhrCallbacks = {}, xhrSupported = jQuery.ajaxSettings.xhr();
    if (window.ActiveXObject) {
        jQuery(window).on("unload", function() {
            for (var key in xhrCallbacks) {
                xhrCallbacks[key](undefined, true);
            }
        });
    }
    support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
    xhrSupported = support.ajax = !!xhrSupported;
    if (xhrSupported) {
        jQuery.ajaxTransport(function(options) {
            if (!options.crossDomain || support.cors) {
                var callback;
                return {
                    send: function(headers, complete) {
                        var i, xhr = options.xhr(), id = ++xhrId;
                        xhr.open(options.type, options.url, options.async, options.username, options.password);
                        if (options.xhrFields) {
                            for (i in options.xhrFields) {
                                xhr[i] = options.xhrFields[i];
                            }
                        }
                        if (options.mimeType && xhr.overrideMimeType) {
                            xhr.overrideMimeType(options.mimeType);
                        }
                        if (!options.crossDomain && !headers["X-Requested-With"]) {
                            headers["X-Requested-With"] = "XMLHttpRequest";
                        }
                        for (i in headers) {
                            if (headers[i] !== undefined) {
                                xhr.setRequestHeader(i, headers[i] + "");
                            }
                        }
                        xhr.send(options.hasContent && options.data || null);
                        callback = function(_, isAbort) {
                            var status, statusText, responses;
                            if (callback && (isAbort || xhr.readyState === 4)) {
                                delete xhrCallbacks[id];
                                callback = undefined;
                                xhr.onreadystatechange = jQuery.noop;
                                if (isAbort) {
                                    if (xhr.readyState !== 4) {
                                        xhr.abort();
                                    }
                                } else {
                                    responses = {};
                                    status = xhr.status;
                                    if (typeof xhr.responseText === "string") {
                                        responses.text = xhr.responseText;
                                    }
                                    try {
                                        statusText = xhr.statusText;
                                    } catch (e) {
                                        statusText = "";
                                    }
                                    if (!status && options.isLocal && !options.crossDomain) {
                                        status = responses.text ? 200 : 404;
                                    } else if (status === 1223) {
                                        status = 204;
                                    }
                                }
                            }
                            if (responses) {
                                complete(status, statusText, responses, xhr.getAllResponseHeaders());
                            }
                        };
                        if (!options.async) {
                            callback();
                        } else if (xhr.readyState === 4) {
                            setTimeout(callback);
                        } else {
                            xhr.onreadystatechange = xhrCallbacks[id] = callback;
                        }
                    },
                    abort: function() {
                        if (callback) {
                            callback(undefined, true);
                        }
                    }
                };
            }
        });
    }
    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {}
    }
    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) {}
    }
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = "GET";
            s.global = false;
        }
    });
    jQuery.ajaxTransport("script", function(s) {
        if (s.crossDomain) {
            var script, head = document.head || jQuery("head")[0] || document.documentElement;
            return {
                send: function(_, callback) {
                    script = document.createElement("script");
                    script.async = true;
                    if (s.scriptCharset) {
                        script.charset = s.scriptCharset;
                    }
                    script.src = s.url;
                    script.onload = script.onreadystatechange = function(_, isAbort) {
                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                            script.onload = script.onreadystatechange = null;
                            if (script.parentNode) {
                                script.parentNode.removeChild(script);
                            }
                            script = null;
                            if (!isAbort) {
                                callback(200, "success");
                            }
                        }
                    };
                    head.insertBefore(script, head.firstChild);
                },
                abort: function() {
                    if (script) {
                        script.onload(undefined, true);
                    }
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
            this[callback] = true;
            return callback;
        }
    });
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
        if (jsonProp || s.dataTypes[0] === "jsonp") {
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }
            s.converters["script json"] = function() {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            overwritten = window[callbackName];
            window[callbackName] = function() {
                responseContainer = arguments;
            };
            jqXHR.always(function() {
                window[callbackName] = overwritten;
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName);
                }
                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }
                responseContainer = overwritten = undefined;
            });
            return "script";
        }
    });
    jQuery.parseHTML = function(data, context, keepScripts) {
        if (!data || typeof data !== "string") {
            return null;
        }
        if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
        }
        context = context || document;
        var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
        if (parsed) {
            return [ context.createElement(parsed[1]) ];
        }
        parsed = jQuery.buildFragment([ data ], context, scripts);
        if (scripts && scripts.length) {
            jQuery(scripts).remove();
        }
        return jQuery.merge([], parsed.childNodes);
    };
    var _load = jQuery.fn.load;
    jQuery.fn.load = function(url, params, callback) {
        if (typeof url !== "string" && _load) {
            return _load.apply(this, arguments);
        }
        var selector, response, type, self = this, off = url.indexOf(" ");
        if (off >= 0) {
            selector = jQuery.trim(url.slice(off, url.length));
            url = url.slice(0, off);
        }
        if (jQuery.isFunction(params)) {
            callback = params;
            params = undefined;
        } else if (params && typeof params === "object") {
            type = "POST";
        }
        if (self.length > 0) {
            jQuery.ajax({
                url: url,
                type: type,
                dataType: "html",
                data: params
            }).done(function(responseText) {
                response = arguments;
                self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
            }).complete(callback && function(jqXHR, status) {
                self.each(callback, response || [ jqXHR.responseText, status, jqXHR ]);
            });
        }
        return this;
    };
    jQuery.expr.filters.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
        }).length;
    };
    var docElem = window.document.documentElement;
    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;
    }
    jQuery.offset = {
        setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {};
            if (position === "static") {
                elem.style.position = "relative";
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [ curCSSTop, curCSSLeft ]) > -1;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset);
            }
            if (options.top != null) {
                props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
                props.left = options.left - curOffset.left + curLeft;
            }
            if ("using" in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };
    jQuery.fn.extend({
        offset: function(options) {
            if (arguments.length) {
                return options === undefined ? this : this.each(function(i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }
            var docElem, win, box = {
                top: 0,
                left: 0
            }, elem = this[0], doc = elem && elem.ownerDocument;
            if (!doc) {
                return;
            }
            docElem = doc.documentElement;
            if (!jQuery.contains(docElem, elem)) {
                return box;
            }
            if (typeof elem.getBoundingClientRect !== strundefined) {
                box = elem.getBoundingClientRect();
            }
            win = getWindow(doc);
            return {
                top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
                left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
            };
        },
        position: function() {
            if (!this[0]) {
                return;
            }
            var offsetParent, offset, parentOffset = {
                top: 0,
                left: 0
            }, elem = this[0];
            if (jQuery.css(elem, "position") === "fixed") {
                offset = elem.getBoundingClientRect();
            } else {
                offsetParent = this.offsetParent();
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0], "html")) {
                    parentOffset = offsetParent.offset();
                }
                parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
                parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
            }
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },
        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent || docElem;
                while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || docElem;
            });
        }
    });
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = /Y/.test(prop);
        jQuery.fn[method] = function(val) {
            return access(this, function(elem, method, val) {
                var win = getWindow(elem);
                if (val === undefined) {
                    return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];
                }
                if (win) {
                    win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());
                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length, null);
        };
    });
    jQuery.each([ "top", "left" ], function(i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
            }
        });
    });
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function(defaultExtra, funcName) {
            jQuery.fn[funcName] = function(margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                return access(this, function(elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) {
                        return elem.document.documentElement["client" + name];
                    }
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }
                    return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable, null);
            };
        });
    });
    jQuery.fn.size = function() {
        return this.length;
    };
    jQuery.fn.andSelf = jQuery.fn.addBack;
    if (typeof define === "function" && define.amd) {
        define("jquery", [], function() {
            return jQuery;
        });
    }
    var _jQuery = window.jQuery, _$ = window.$;
    jQuery.noConflict = function(deep) {
        if (window.$ === jQuery) {
            window.$ = _$;
        }
        if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
        }
        return jQuery;
    };
    if (typeof noGlobal === strundefined) {
        window.jQuery = window.$ = jQuery;
    }
    return jQuery;
});

(function() {
    var undefined;
    var VERSION = "3.0.0";
    var BIND_FLAG = 1, BIND_KEY_FLAG = 2, CURRY_BOUND_FLAG = 4, CURRY_FLAG = 8, CURRY_RIGHT_FLAG = 16, PARTIAL_FLAG = 32, PARTIAL_RIGHT_FLAG = 64, REARG_FLAG = 128, ARY_FLAG = 256;
    var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
    var HOT_COUNT = 150, HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 0, LAZY_MAP_FLAG = 1, LAZY_WHILE_FLAG = 2;
    var FUNC_ERROR_TEXT = "Expected a function";
    var PLACEHOLDER = "__lodash_placeholder__";
    var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
    var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g, reUnescapedHtml = /[&<>"'`]/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reFuncName = /^\s*function[ \n\r\t]+\w/;
    var reHexPrefix = /^0[xX]/;
    var reHostCtor = /^\[object .+?Constructor\]$/;
    var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;
    var reNoMatch = /($^)/;
    var reRegExpChars = /[.*+?^${}()|[\]\/\\]/g, reHasRegExpChars = RegExp(reRegExpChars.source);
    var reThis = /\bthis\b/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var reWords = function() {
        var upper = "[A-Z\\xc0-\\xd6\\xd8-\\xde]", lower = "[a-z\\xdf-\\xf6\\xf8-\\xff]+";
        return RegExp(upper + "{2,}(?=" + upper + lower + ")|" + upper + "?" + lower + "|" + upper + "+|[0-9]+", "g");
    }();
    var whitespace = " 	\f ﻿" + "\n\r\u2028\u2029" + " ᠎             　";
    var contextProps = [ "Array", "ArrayBuffer", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Math", "Number", "Object", "RegExp", "Set", "String", "_", "clearTimeout", "document", "isFinite", "parseInt", "setTimeout", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "window", "WinRTError" ];
    var templateCounter = -1;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[stringTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[mapTag] = cloneableTags[setTag] = cloneableTags[weakMapTag] = false;
    var debounceOptions = {
        leading: false,
        maxWait: 0,
        trailing: false
    };
    var deburredLetters = {
        "À": "A",
        "Á": "A",
        "Â": "A",
        "Ã": "A",
        "Ä": "A",
        "Å": "A",
        "à": "a",
        "á": "a",
        "â": "a",
        "ã": "a",
        "ä": "a",
        "å": "a",
        "Ç": "C",
        "ç": "c",
        "Ð": "D",
        "ð": "d",
        "È": "E",
        "É": "E",
        "Ê": "E",
        "Ë": "E",
        "è": "e",
        "é": "e",
        "ê": "e",
        "ë": "e",
        "Ì": "I",
        "Í": "I",
        "Î": "I",
        "Ï": "I",
        "ì": "i",
        "í": "i",
        "î": "i",
        "ï": "i",
        "Ñ": "N",
        "ñ": "n",
        "Ò": "O",
        "Ó": "O",
        "Ô": "O",
        "Õ": "O",
        "Ö": "O",
        "Ø": "O",
        "ò": "o",
        "ó": "o",
        "ô": "o",
        "õ": "o",
        "ö": "o",
        "ø": "o",
        "Ù": "U",
        "Ú": "U",
        "Û": "U",
        "Ü": "U",
        "ù": "u",
        "ú": "u",
        "û": "u",
        "ü": "u",
        "Ý": "Y",
        "ý": "y",
        "ÿ": "y",
        "Æ": "Ae",
        "æ": "ae",
        "Þ": "Th",
        "þ": "th",
        "ß": "ss"
    };
    var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;",
        "`": "&#96;"
    };
    var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'",
        "&#96;": "`"
    };
    var objectTypes = {
        "function": true,
        object: true
    };
    var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
    };
    var root = objectTypes[typeof window] && window !== (this && this.window) ? window : this;
    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
    var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
    var freeGlobal = freeExports && freeModule && typeof global == "object" && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
        root = freeGlobal;
    }
    var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;
    function baseCompareAscending(value, other) {
        if (value !== other) {
            var valIsReflexive = value === value, othIsReflexive = other === other;
            if (value > other || !valIsReflexive || typeof value == "undefined" && othIsReflexive) {
                return 1;
            }
            if (value < other || !othIsReflexive || typeof other == "undefined" && valIsReflexive) {
                return -1;
            }
        }
        return 0;
    }
    function baseIndexOf(array, value, fromIndex) {
        if (value !== value) {
            return indexOfNaN(array, fromIndex);
        }
        var index = (fromIndex || 0) - 1, length = array.length;
        while (++index < length) {
            if (array[index] === value) {
                return index;
            }
        }
        return -1;
    }
    function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
            array[length] = array[length].value;
        }
        return array;
    }
    function baseToString(value) {
        if (typeof value == "string") {
            return value;
        }
        return value == null ? "" : value + "";
    }
    function charAtCallback(string) {
        return string.charCodeAt(0);
    }
    function charsLeftIndex(string, chars) {
        var index = -1, length = string.length;
        while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
        return index;
    }
    function charsRightIndex(string, chars) {
        var index = string.length;
        while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
        return index;
    }
    function compareAscending(object, other) {
        return baseCompareAscending(object.criteria, other.criteria) || object.index - other.index;
    }
    function compareMultipleAscending(object, other) {
        var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length;
        while (++index < length) {
            var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
            if (result) {
                return result;
            }
        }
        return object.index - other.index;
    }
    function deburrLetter(letter) {
        return deburredLetters[letter];
    }
    function escapeHtmlChar(chr) {
        return htmlEscapes[chr];
    }
    function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
    }
    function indexOfNaN(array, fromIndex, fromRight) {
        var length = array.length, index = fromRight ? fromIndex || length : (fromIndex || 0) - 1;
        while (fromRight ? index-- : ++index < length) {
            var other = array[index];
            if (other !== other) {
                return index;
            }
        }
        return -1;
    }
    function isObjectLike(value) {
        return value && typeof value == "object" || false;
    }
    function isSpace(charCode) {
        return charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160 || charCode == 5760 || charCode == 6158 || charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279);
    }
    function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = -1, result = [];
        while (++index < length) {
            if (array[index] === placeholder) {
                array[index] = PLACEHOLDER;
                result[++resIndex] = index;
            }
        }
        return result;
    }
    function sortedUniq(array, iteratee) {
        var seen, index = -1, length = array.length, resIndex = -1, result = [];
        while (++index < length) {
            var value = array[index], computed = iteratee ? iteratee(value, index, array) : value;
            if (!index || seen !== computed) {
                seen = computed;
                result[++resIndex] = value;
            }
        }
        return result;
    }
    function trimmedLeftIndex(string) {
        var index = -1, length = string.length;
        while (++index < length && isSpace(string.charCodeAt(index))) {}
        return index;
    }
    function trimmedRightIndex(string) {
        var index = string.length;
        while (index-- && isSpace(string.charCodeAt(index))) {}
        return index;
    }
    function unescapeHtmlChar(chr) {
        return htmlUnescapes[chr];
    }
    function runInContext(context) {
        context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;
        var Array = context.Array, Date = context.Date, Error = context.Error, Function = context.Function, Math = context.Math, Number = context.Number, Object = context.Object, RegExp = context.RegExp, String = context.String, TypeError = context.TypeError;
        var arrayProto = Array.prototype, objectProto = Object.prototype;
        var document = (document = context.window) && document.document;
        var fnToString = Function.prototype.toString;
        var getLength = baseProperty("length");
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var objToString = objectProto.toString;
        var oldDash = context._;
        var reNative = RegExp("^" + escapeRegExp(objToString).replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        var ArrayBuffer = isNative(ArrayBuffer = context.ArrayBuffer) && ArrayBuffer, bufferSlice = isNative(bufferSlice = ArrayBuffer && new ArrayBuffer(0).slice) && bufferSlice, ceil = Math.ceil, clearTimeout = context.clearTimeout, floor = Math.floor, getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf, push = arrayProto.push, propertyIsEnumerable = objectProto.propertyIsEnumerable, Set = isNative(Set = context.Set) && Set, setTimeout = context.setTimeout, splice = arrayProto.splice, Uint8Array = isNative(Uint8Array = context.Uint8Array) && Uint8Array, unshift = arrayProto.unshift, WeakMap = isNative(WeakMap = context.WeakMap) && WeakMap;
        var Float64Array = function() {
            try {
                var func = isNative(func = context.Float64Array) && func, result = new func(new ArrayBuffer(10), 0, 1) && func;
            } catch (e) {}
            return result;
        }();
        var nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray, nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate, nativeIsFinite = context.isFinite, nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys, nativeMax = Math.max, nativeMin = Math.min, nativeNow = isNative(nativeNow = Date.now) && nativeNow, nativeNumIsFinite = isNative(nativeNumIsFinite = Number.isFinite) && nativeNumIsFinite, nativeParseInt = context.parseInt, nativeRandom = Math.random;
        var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY, POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
        var MAX_ARRAY_LENGTH = Math.pow(2, 32) - 1, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
        var FLOAT64_BYTES_PER_ELEMENT = Float64Array ? Float64Array.BYTES_PER_ELEMENT : 0;
        var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;
        var metaMap = WeakMap && new WeakMap();
        function lodash(value) {
            if (isObjectLike(value) && !isArray(value)) {
                if (value instanceof LodashWrapper) {
                    return value;
                }
                if (hasOwnProperty.call(value, "__wrapped__")) {
                    return new LodashWrapper(value.__wrapped__, value.__chain__, arrayCopy(value.__actions__));
                }
            }
            return new LodashWrapper(value);
        }
        function LodashWrapper(value, chainAll, actions) {
            this.__actions__ = actions || [];
            this.__chain__ = !!chainAll;
            this.__wrapped__ = value;
        }
        var support = lodash.support = {};
        (function(x) {
            support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);
            support.funcNames = typeof Function.name == "string";
            try {
                support.dom = document.createDocumentFragment().nodeType === 11;
            } catch (e) {
                support.dom = false;
            }
            try {
                support.nonEnumArgs = !propertyIsEnumerable.call(arguments, 1);
            } catch (e) {
                support.nonEnumArgs = true;
            }
        })(0, 0);
        lodash.templateSettings = {
            escape: reEscape,
            evaluate: reEvaluate,
            interpolate: reInterpolate,
            variable: "",
            imports: {
                _: lodash
            }
        };
        function LazyWrapper(value) {
            this.actions = null;
            this.dir = 1;
            this.dropCount = 0;
            this.filtered = false;
            this.iteratees = null;
            this.takeCount = POSITIVE_INFINITY;
            this.views = null;
            this.wrapped = value;
        }
        function lazyClone() {
            var actions = this.actions, iteratees = this.iteratees, views = this.views, result = new LazyWrapper(this.wrapped);
            result.actions = actions ? arrayCopy(actions) : null;
            result.dir = this.dir;
            result.dropCount = this.dropCount;
            result.filtered = this.filtered;
            result.iteratees = iteratees ? arrayCopy(iteratees) : null;
            result.takeCount = this.takeCount;
            result.views = views ? arrayCopy(views) : null;
            return result;
        }
        function lazyReverse() {
            var filtered = this.filtered, result = filtered ? new LazyWrapper(this) : this.clone();
            result.dir = this.dir * -1;
            result.filtered = filtered;
            return result;
        }
        function lazyValue() {
            var array = this.wrapped.value();
            if (!isArray(array)) {
                return baseWrapperValue(array, this.actions);
            }
            var dir = this.dir, isRight = dir < 0, length = array.length, view = getView(0, length, this.views), start = view.start, end = view.end, dropCount = this.dropCount, takeCount = nativeMin(end - start, this.takeCount - dropCount), index = isRight ? end : start - 1, iteratees = this.iteratees, iterLength = iteratees ? iteratees.length : 0, resIndex = 0, result = [];
            outer: while (length-- && resIndex < takeCount) {
                index += dir;
                var iterIndex = -1, value = array[index];
                while (++iterIndex < iterLength) {
                    var data = iteratees[iterIndex], iteratee = data.iteratee, computed = iteratee(value, index, array), type = data.type;
                    if (type == LAZY_MAP_FLAG) {
                        value = computed;
                    } else if (!computed) {
                        if (type == LAZY_FILTER_FLAG) {
                            continue outer;
                        } else {
                            break outer;
                        }
                    }
                }
                if (dropCount) {
                    dropCount--;
                } else {
                    result[resIndex++] = value;
                }
            }
            return isRight ? result.reverse() : result;
        }
        function MapCache() {
            this.__data__ = {};
        }
        function mapDelete(key) {
            return this.has(key) && delete this.__data__[key];
        }
        function mapGet(key) {
            return key == "__proto__" ? undefined : this.__data__[key];
        }
        function mapHas(key) {
            return key != "__proto__" && hasOwnProperty.call(this.__data__, key);
        }
        function mapSet(key, value) {
            if (key != "__proto__") {
                this.__data__[key] = value;
            }
            return this;
        }
        function SetCache(values) {
            var length = values ? values.length : 0;
            this.data = {
                hash: nativeCreate(null),
                set: new Set()
            };
            while (length--) {
                this.push(values[length]);
            }
        }
        function cacheIndexOf(cache, value) {
            var data = cache.data, result = typeof value == "string" || isObject(value) ? data.set.has(value) : data.hash[value];
            return result ? 0 : -1;
        }
        function cachePush(value) {
            var data = this.data;
            if (typeof value == "string" || isObject(value)) {
                data.set.add(value);
            } else {
                data.hash[value] = true;
            }
        }
        function arrayCopy(source, array) {
            var index = -1, length = source.length;
            array || (array = Array(length));
            while (++index < length) {
                array[index] = source[index];
            }
            return array;
        }
        function arrayEach(array, iteratee) {
            var index = -1, length = array.length;
            while (++index < length) {
                if (iteratee(array[index], index, array) === false) {
                    break;
                }
            }
            return array;
        }
        function arrayEachRight(array, iteratee) {
            var length = array.length;
            while (length--) {
                if (iteratee(array[length], length, array) === false) {
                    break;
                }
            }
            return array;
        }
        function arrayEvery(array, predicate) {
            var index = -1, length = array.length;
            while (++index < length) {
                if (!predicate(array[index], index, array)) {
                    return false;
                }
            }
            return true;
        }
        function arrayFilter(array, predicate) {
            var index = -1, length = array.length, resIndex = -1, result = [];
            while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                    result[++resIndex] = value;
                }
            }
            return result;
        }
        function arrayMap(array, iteratee) {
            var index = -1, length = array.length, result = Array(length);
            while (++index < length) {
                result[index] = iteratee(array[index], index, array);
            }
            return result;
        }
        function arrayMax(array) {
            var index = -1, length = array.length, result = NEGATIVE_INFINITY;
            while (++index < length) {
                var value = array[index];
                if (value > result) {
                    result = value;
                }
            }
            return result;
        }
        function arrayMin(array) {
            var index = -1, length = array.length, result = POSITIVE_INFINITY;
            while (++index < length) {
                var value = array[index];
                if (value < result) {
                    result = value;
                }
            }
            return result;
        }
        function arrayReduce(array, iteratee, accumulator, initFromArray) {
            var index = -1, length = array.length;
            if (initFromArray && length) {
                accumulator = array[++index];
            }
            while (++index < length) {
                accumulator = iteratee(accumulator, array[index], index, array);
            }
            return accumulator;
        }
        function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
            var length = array.length;
            if (initFromArray && length) {
                accumulator = array[--length];
            }
            while (length--) {
                accumulator = iteratee(accumulator, array[length], length, array);
            }
            return accumulator;
        }
        function arraySome(array, predicate) {
            var index = -1, length = array.length;
            while (++index < length) {
                if (predicate(array[index], index, array)) {
                    return true;
                }
            }
            return false;
        }
        function assignDefaults(objectValue, sourceValue) {
            return typeof objectValue == "undefined" ? sourceValue : objectValue;
        }
        function assignOwnDefaults(objectValue, sourceValue, key, object) {
            return typeof objectValue == "undefined" || !hasOwnProperty.call(object, key) ? sourceValue : objectValue;
        }
        function baseAssign(object, source, customizer) {
            var props = keys(source);
            if (!customizer) {
                return baseCopy(source, object, props);
            }
            var index = -1, length = props.length;
            while (++index < length) {
                var key = props[index], value = object[key], result = customizer(value, source[key], key, object, source);
                if ((result === result ? result !== value : value === value) || typeof value == "undefined" && !(key in object)) {
                    object[key] = result;
                }
            }
            return object;
        }
        function baseAt(collection, props) {
            var index = -1, length = collection.length, isArr = isLength(length), propsLength = props.length, result = Array(propsLength);
            while (++index < propsLength) {
                var key = props[index];
                if (isArr) {
                    key = parseFloat(key);
                    result[index] = isIndex(key, length) ? collection[key] : undefined;
                } else {
                    result[index] = collection[key];
                }
            }
            return result;
        }
        function baseCopy(source, object, props) {
            if (!props) {
                props = object;
                object = {};
            }
            var index = -1, length = props.length;
            while (++index < length) {
                var key = props[index];
                object[key] = source[key];
            }
            return object;
        }
        function baseBindAll(object, methodNames) {
            var index = -1, length = methodNames.length;
            while (++index < length) {
                var key = methodNames[index];
                object[key] = createWrapper(object[key], BIND_FLAG, object);
            }
            return object;
        }
        function baseCallback(func, thisArg, argCount) {
            var type = typeof func;
            if (type == "function") {
                return typeof thisArg != "undefined" && isBindable(func) ? bindCallback(func, thisArg, argCount) : func;
            }
            if (func == null) {
                return identity;
            }
            return type == "object" ? baseMatches(func, !argCount) : baseProperty(argCount ? baseToString(func) : func);
        }
        function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
            var result;
            if (customizer) {
                result = object ? customizer(value, key, object) : customizer(value);
            }
            if (typeof result != "undefined") {
                return result;
            }
            if (!isObject(value)) {
                return value;
            }
            var isArr = isArray(value);
            if (isArr) {
                result = initCloneArray(value);
                if (!isDeep) {
                    return arrayCopy(value, result);
                }
            } else {
                var tag = objToString.call(value), isFunc = tag == funcTag;
                if (tag == objectTag || tag == argsTag || isFunc && !object) {
                    result = initCloneObject(isFunc ? {} : value);
                    if (!isDeep) {
                        return baseCopy(value, result, keys(value));
                    }
                } else {
                    return cloneableTags[tag] ? initCloneByTag(value, tag, isDeep) : object ? value : {};
                }
            }
            stackA || (stackA = []);
            stackB || (stackB = []);
            var length = stackA.length;
            while (length--) {
                if (stackA[length] == value) {
                    return stackB[length];
                }
            }
            stackA.push(value);
            stackB.push(result);
            (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
                result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
            });
            return result;
        }
        var baseCreate = function() {
            function Object() {}
            return function(prototype) {
                if (isObject(prototype)) {
                    Object.prototype = prototype;
                    var result = new Object();
                    Object.prototype = null;
                }
                return result || context.Object();
            };
        }();
        function baseDelay(func, wait, args, fromIndex) {
            if (!isFunction(func)) {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            return setTimeout(function() {
                func.apply(undefined, baseSlice(args, fromIndex));
            }, wait);
        }
        function baseDifference(array, values) {
            var length = array ? array.length : 0, result = [];
            if (!length) {
                return result;
            }
            var index = -1, indexOf = getIndexOf(), isCommon = indexOf == baseIndexOf, cache = isCommon && values.length >= 200 && createCache(values), valuesLength = values.length;
            if (cache) {
                indexOf = cacheIndexOf;
                isCommon = false;
                values = cache;
            }
            outer: while (++index < length) {
                var value = array[index];
                if (isCommon && value === value) {
                    var valuesIndex = valuesLength;
                    while (valuesIndex--) {
                        if (values[valuesIndex] === value) {
                            continue outer;
                        }
                    }
                    result.push(value);
                } else if (indexOf(values, value) < 0) {
                    result.push(value);
                }
            }
            return result;
        }
        function baseEach(collection, iteratee) {
            var length = collection ? collection.length : 0;
            if (!isLength(length)) {
                return baseForOwn(collection, iteratee);
            }
            var index = -1, iterable = toObject(collection);
            while (++index < length) {
                if (iteratee(iterable[index], index, iterable) === false) {
                    break;
                }
            }
            return collection;
        }
        function baseEachRight(collection, iteratee) {
            var length = collection ? collection.length : 0;
            if (!isLength(length)) {
                return baseForOwnRight(collection, iteratee);
            }
            var iterable = toObject(collection);
            while (length--) {
                if (iteratee(iterable[length], length, iterable) === false) {
                    break;
                }
            }
            return collection;
        }
        function baseEvery(collection, predicate) {
            var result = true;
            baseEach(collection, function(value, index, collection) {
                result = !!predicate(value, index, collection);
                return result;
            });
            return result;
        }
        function baseFilter(collection, predicate) {
            var result = [];
            baseEach(collection, function(value, index, collection) {
                if (predicate(value, index, collection)) {
                    result.push(value);
                }
            });
            return result;
        }
        function baseFind(collection, predicate, eachFunc, retKey) {
            var result;
            eachFunc(collection, function(value, key, collection) {
                if (predicate(value, key, collection)) {
                    result = retKey ? key : value;
                    return false;
                }
            });
            return result;
        }
        function baseFlatten(array, isDeep, isStrict, fromIndex) {
            var index = (fromIndex || 0) - 1, length = array.length, resIndex = -1, result = [];
            while (++index < length) {
                var value = array[index];
                if (isObjectLike(value) && isLength(value.length) && (isArray(value) || isArguments(value))) {
                    if (isDeep) {
                        value = baseFlatten(value, isDeep, isStrict);
                    }
                    var valIndex = -1, valLength = value.length;
                    result.length += valLength;
                    while (++valIndex < valLength) {
                        result[++resIndex] = value[valIndex];
                    }
                } else if (!isStrict) {
                    result[++resIndex] = value;
                }
            }
            return result;
        }
        function baseFor(object, iteratee, keysFunc) {
            var index = -1, iterable = toObject(object), props = keysFunc(object), length = props.length;
            while (++index < length) {
                var key = props[index];
                if (iteratee(iterable[key], key, iterable) === false) {
                    break;
                }
            }
            return object;
        }
        function baseForRight(object, iteratee, keysFunc) {
            var iterable = toObject(object), props = keysFunc(object), length = props.length;
            while (length--) {
                var key = props[length];
                if (iteratee(iterable[key], key, iterable) === false) {
                    break;
                }
            }
            return object;
        }
        function baseForIn(object, iteratee) {
            return baseFor(object, iteratee, keysIn);
        }
        function baseForOwn(object, iteratee) {
            return baseFor(object, iteratee, keys);
        }
        function baseForOwnRight(object, iteratee) {
            return baseForRight(object, iteratee, keys);
        }
        function baseFunctions(object, props) {
            var index = -1, length = props.length, resIndex = -1, result = [];
            while (++index < length) {
                var key = props[index];
                if (isFunction(object[key])) {
                    result[++resIndex] = key;
                }
            }
            return result;
        }
        function baseInvoke(collection, methodName, args) {
            var index = -1, isFunc = typeof methodName == "function", length = collection ? collection.length : 0, result = isLength(length) ? Array(length) : [];
            baseEach(collection, function(value) {
                var func = isFunc ? methodName : value != null && value[methodName];
                result[++index] = func ? func.apply(value, args) : undefined;
            });
            return result;
        }
        function baseIsEqual(value, other, customizer, isWhere, stackA, stackB) {
            if (value === other) {
                return value !== 0 || 1 / value == 1 / other;
            }
            var valType = typeof value, othType = typeof other;
            if (valType != "function" && valType != "object" && othType != "function" && othType != "object" || value == null || other == null) {
                return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, baseIsEqual, customizer, isWhere, stackA, stackB);
        }
        function baseIsEqualDeep(object, other, equalFunc, customizer, isWhere, stackA, stackB) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = arrayTag, othTag = arrayTag;
            if (!objIsArr) {
                objTag = objToString.call(object);
                if (objTag == argsTag) {
                    objTag = objectTag;
                } else if (objTag != objectTag) {
                    objIsArr = isTypedArray(object);
                }
            }
            if (!othIsArr) {
                othTag = objToString.call(other);
                if (othTag == argsTag) {
                    othTag = objectTag;
                } else if (othTag != objectTag) {
                    othIsArr = isTypedArray(other);
                }
            }
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && !(objIsArr || objIsObj)) {
                return equalByTag(object, other, objTag);
            }
            var valWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (valWrapped || othWrapped) {
                return equalFunc(valWrapped ? object.value() : object, othWrapped ? other.value() : other, customizer, isWhere, stackA, stackB);
            }
            if (!isSameTag) {
                return false;
            }
            stackA || (stackA = []);
            stackB || (stackB = []);
            var length = stackA.length;
            while (length--) {
                if (stackA[length] == object) {
                    return stackB[length] == other;
                }
            }
            stackA.push(object);
            stackB.push(other);
            var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isWhere, stackA, stackB);
            stackA.pop();
            stackB.pop();
            return result;
        }
        function baseIsMatch(object, props, values, strictCompareFlags, customizer) {
            var length = props.length;
            if (object == null) {
                return !length;
            }
            var index = -1, noCustomizer = !customizer;
            while (++index < length) {
                if (noCustomizer && strictCompareFlags[index] ? values[index] !== object[props[index]] : !hasOwnProperty.call(object, props[index])) {
                    return false;
                }
            }
            index = -1;
            while (++index < length) {
                var key = props[index];
                if (noCustomizer && strictCompareFlags[index]) {
                    var result = hasOwnProperty.call(object, key);
                } else {
                    var objValue = object[key], srcValue = values[index];
                    result = customizer ? customizer(objValue, srcValue, key) : undefined;
                    if (typeof result == "undefined") {
                        result = baseIsEqual(srcValue, objValue, customizer, true);
                    }
                }
                if (!result) {
                    return false;
                }
            }
            return true;
        }
        function baseMap(collection, iteratee) {
            var result = [];
            baseEach(collection, function(value, key, collection) {
                result.push(iteratee(value, key, collection));
            });
            return result;
        }
        function baseMatches(source, isCloned) {
            var props = keys(source), length = props.length;
            if (length == 1) {
                var key = props[0], value = source[key];
                if (isStrictComparable(value)) {
                    return function(object) {
                        return object != null && value === object[key] && hasOwnProperty.call(object, key);
                    };
                }
            }
            if (isCloned) {
                source = baseClone(source, true);
            }
            var values = Array(length), strictCompareFlags = Array(length);
            while (length--) {
                value = source[props[length]];
                values[length] = value;
                strictCompareFlags[length] = isStrictComparable(value);
            }
            return function(object) {
                return baseIsMatch(object, props, values, strictCompareFlags);
            };
        }
        function baseMerge(object, source, customizer, stackA, stackB) {
            var isSrcArr = isLength(source.length) && (isArray(source) || isTypedArray(source));
            (isSrcArr ? arrayEach : baseForOwn)(source, function(srcValue, key, source) {
                if (isObjectLike(srcValue)) {
                    stackA || (stackA = []);
                    stackB || (stackB = []);
                    return baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
                }
                var value = object[key], result = customizer ? customizer(value, srcValue, key, object, source) : undefined, isCommon = typeof result == "undefined";
                if (isCommon) {
                    result = srcValue;
                }
                if ((isSrcArr || typeof result != "undefined") && (isCommon || (result === result ? result !== value : value === value))) {
                    object[key] = result;
                }
            });
            return object;
        }
        function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
            var length = stackA.length, srcValue = source[key];
            while (length--) {
                if (stackA[length] == srcValue) {
                    object[key] = stackB[length];
                    return;
                }
            }
            var value = object[key], result = customizer ? customizer(value, srcValue, key, object, source) : undefined, isCommon = typeof result == "undefined";
            if (isCommon) {
                result = srcValue;
                if (isLength(srcValue.length) && (isArray(srcValue) || isTypedArray(srcValue))) {
                    result = isArray(value) ? value : value ? arrayCopy(value) : [];
                } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                    result = isArguments(value) ? toPlainObject(value) : isPlainObject(value) ? value : {};
                }
            }
            stackA.push(srcValue);
            stackB.push(result);
            if (isCommon) {
                object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
            } else if (result === result ? result !== value : value === value) {
                object[key] = result;
            }
        }
        function baseProperty(key) {
            return function(object) {
                return object == null ? undefined : object[key];
            };
        }
        function basePullAt(array, indexes) {
            var length = indexes.length, result = baseAt(array, indexes);
            indexes.sort(baseCompareAscending);
            while (length--) {
                var index = parseFloat(indexes[length]);
                if (index != previous && isIndex(index)) {
                    var previous = index;
                    splice.call(array, index, 1);
                }
            }
            return result;
        }
        function baseRandom(min, max) {
            return min + floor(nativeRandom() * (max - min + 1));
        }
        function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
            eachFunc(collection, function(value, index, collection) {
                accumulator = initFromCollection ? (initFromCollection = false, value) : iteratee(accumulator, value, index, collection);
            });
            return accumulator;
        }
        var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
        };
        function baseSlice(array, start, end) {
            var index = -1, length = array.length;
            start = start == null ? 0 : +start || 0;
            if (start < 0) {
                start = -start > length ? 0 : length + start;
            }
            end = typeof end == "undefined" || end > length ? length : +end || 0;
            if (end < 0) {
                end += length;
            }
            length = start > end ? 0 : end - start;
            var result = Array(length);
            while (++index < length) {
                result[index] = array[index + start];
            }
            return result;
        }
        function baseSome(collection, predicate) {
            var result;
            baseEach(collection, function(value, index, collection) {
                result = predicate(value, index, collection);
                return !result;
            });
            return !!result;
        }
        function baseUniq(array, iteratee) {
            var index = -1, indexOf = getIndexOf(), length = array.length, isCommon = indexOf == baseIndexOf, isLarge = isCommon && length >= 200, seen = isLarge && createCache(), result = [];
            if (seen) {
                indexOf = cacheIndexOf;
                isCommon = false;
            } else {
                isLarge = false;
                seen = iteratee ? [] : result;
            }
            outer: while (++index < length) {
                var value = array[index], computed = iteratee ? iteratee(value, index, array) : value;
                if (isCommon && value === value) {
                    var seenIndex = seen.length;
                    while (seenIndex--) {
                        if (seen[seenIndex] === computed) {
                            continue outer;
                        }
                    }
                    if (iteratee) {
                        seen.push(computed);
                    }
                    result.push(value);
                } else if (indexOf(seen, computed) < 0) {
                    if (iteratee || isLarge) {
                        seen.push(computed);
                    }
                    result.push(value);
                }
            }
            return result;
        }
        function baseValues(object, props) {
            var index = -1, length = props.length, result = Array(length);
            while (++index < length) {
                result[index] = object[props[index]];
            }
            return result;
        }
        function baseWrapperValue(value, actions) {
            var result = value;
            if (result instanceof LazyWrapper) {
                result = result.value();
            }
            var index = -1, length = actions.length;
            while (++index < length) {
                var args = [ result ], action = actions[index];
                push.apply(args, action.args);
                result = action.func.apply(action.thisArg, args);
            }
            return result;
        }
        function binaryIndex(array, value, retHighest) {
            var low = 0, high = array ? array.length : low;
            if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                while (low < high) {
                    var mid = low + high >>> 1, computed = array[mid];
                    if (retHighest ? computed <= value : computed < value) {
                        low = mid + 1;
                    } else {
                        high = mid;
                    }
                }
                return high;
            }
            return binaryIndexBy(array, value, identity, retHighest);
        }
        function binaryIndexBy(array, value, iteratee, retHighest) {
            value = iteratee(value);
            var low = 0, high = array ? array.length : 0, valIsNaN = value !== value, valIsUndef = typeof value == "undefined";
            while (low < high) {
                var mid = floor((low + high) / 2), computed = iteratee(array[mid]), isReflexive = computed === computed;
                if (valIsNaN) {
                    var setLow = isReflexive || retHighest;
                } else if (valIsUndef) {
                    setLow = isReflexive && (retHighest || typeof computed != "undefined");
                } else {
                    setLow = retHighest ? computed <= value : computed < value;
                }
                if (setLow) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function bindCallback(func, thisArg, argCount) {
            if (typeof func != "function") {
                return identity;
            }
            if (typeof thisArg == "undefined") {
                return func;
            }
            switch (argCount) {
              case 1:
                return function(value) {
                    return func.call(thisArg, value);
                };

              case 3:
                return function(value, index, collection) {
                    return func.call(thisArg, value, index, collection);
                };

              case 4:
                return function(accumulator, value, index, collection) {
                    return func.call(thisArg, accumulator, value, index, collection);
                };

              case 5:
                return function(value, other, key, object, source) {
                    return func.call(thisArg, value, other, key, object, source);
                };
            }
            return function() {
                return func.apply(thisArg, arguments);
            };
        }
        function bufferClone(buffer) {
            return bufferSlice.call(buffer, 0);
        }
        if (!bufferSlice) {
            bufferClone = !(ArrayBuffer && Uint8Array) ? constant(null) : function(buffer) {
                var byteLength = buffer.byteLength, floatLength = Float64Array ? floor(byteLength / FLOAT64_BYTES_PER_ELEMENT) : 0, offset = floatLength * FLOAT64_BYTES_PER_ELEMENT, result = new ArrayBuffer(byteLength);
                if (floatLength) {
                    var view = new Float64Array(result, 0, floatLength);
                    view.set(new Float64Array(buffer, 0, floatLength));
                }
                if (byteLength != offset) {
                    view = new Uint8Array(result, offset);
                    view.set(new Uint8Array(buffer, offset));
                }
                return result;
            };
        }
        function composeArgs(args, partials, holders) {
            var holdersLength = holders.length, argsIndex = -1, argsLength = nativeMax(args.length - holdersLength, 0), leftIndex = -1, leftLength = partials.length, result = Array(argsLength + leftLength);
            while (++leftIndex < leftLength) {
                result[leftIndex] = partials[leftIndex];
            }
            while (++argsIndex < holdersLength) {
                result[holders[argsIndex]] = args[argsIndex];
            }
            while (argsLength--) {
                result[leftIndex++] = args[argsIndex++];
            }
            return result;
        }
        function composeArgsRight(args, partials, holders) {
            var holdersIndex = -1, holdersLength = holders.length, argsIndex = -1, argsLength = nativeMax(args.length - holdersLength, 0), rightIndex = -1, rightLength = partials.length, result = Array(argsLength + rightLength);
            while (++argsIndex < argsLength) {
                result[argsIndex] = args[argsIndex];
            }
            var pad = argsIndex;
            while (++rightIndex < rightLength) {
                result[pad + rightIndex] = partials[rightIndex];
            }
            while (++holdersIndex < holdersLength) {
                result[pad + holders[holdersIndex]] = args[argsIndex++];
            }
            return result;
        }
        function createAggregator(setter, initializer) {
            return function(collection, iteratee, thisArg) {
                var result = initializer ? initializer() : {};
                iteratee = getCallback(iteratee, thisArg, 3);
                if (isArray(collection)) {
                    var index = -1, length = collection.length;
                    while (++index < length) {
                        var value = collection[index];
                        setter(result, value, iteratee(value, index, collection), collection);
                    }
                } else {
                    baseEach(collection, function(value, key, collection) {
                        setter(result, value, iteratee(value, key, collection), collection);
                    });
                }
                return result;
            };
        }
        function createAssigner(assigner) {
            return function() {
                var length = arguments.length, object = arguments[0];
                if (length < 2 || object == null) {
                    return object;
                }
                if (length > 3 && isIterateeCall(arguments[1], arguments[2], arguments[3])) {
                    length = 2;
                }
                if (length > 3 && typeof arguments[length - 2] == "function") {
                    var customizer = bindCallback(arguments[--length - 1], arguments[length--], 5);
                } else if (length > 2 && typeof arguments[length - 1] == "function") {
                    customizer = arguments[--length];
                }
                var index = 0;
                while (++index < length) {
                    var source = arguments[index];
                    if (source) {
                        assigner(object, source, customizer);
                    }
                }
                return object;
            };
        }
        function createBindWrapper(func, thisArg) {
            var Ctor = createCtorWrapper(func);
            function wrapper() {
                return (this instanceof wrapper ? Ctor : func).apply(thisArg, arguments);
            }
            return wrapper;
        }
        var createCache = !(nativeCreate && Set) ? constant(null) : function(values) {
            return new SetCache(values);
        };
        function createCompounder(callback) {
            return function(string) {
                var index = -1, array = words(deburr(string)), length = array.length, result = "";
                while (++index < length) {
                    result = callback(result, array[index], index);
                }
                return result;
            };
        }
        function createCtorWrapper(Ctor) {
            return function() {
                var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, arguments);
                return isObject(result) ? result : thisBinding;
            };
        }
        function createExtremum(arrayFunc, isMin) {
            return function(collection, iteratee, thisArg) {
                if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
                    iteratee = null;
                }
                var func = getCallback(), noIteratee = iteratee == null;
                if (!(func === baseCallback && noIteratee)) {
                    noIteratee = false;
                    iteratee = func(iteratee, thisArg, 3);
                }
                if (noIteratee) {
                    var isArr = isArray(collection);
                    if (!isArr && isString(collection)) {
                        iteratee = charAtCallback;
                    } else {
                        return arrayFunc(isArr ? collection : toIterable(collection));
                    }
                }
                return extremumBy(collection, iteratee, isMin);
            };
        }
        function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
            var isAry = bitmask & ARY_FLAG, isBind = bitmask & BIND_FLAG, isBindKey = bitmask & BIND_KEY_FLAG, isCurry = bitmask & CURRY_FLAG, isCurryBound = bitmask & CURRY_BOUND_FLAG, isCurryRight = bitmask & CURRY_RIGHT_FLAG;
            var Ctor = !isBindKey && createCtorWrapper(func), key = func;
            function wrapper() {
                var length = arguments.length, index = length, args = Array(length);
                while (index--) {
                    args[index] = arguments[index];
                }
                if (partials) {
                    args = composeArgs(args, partials, holders);
                }
                if (partialsRight) {
                    args = composeArgsRight(args, partialsRight, holdersRight);
                }
                if (isCurry || isCurryRight) {
                    var placeholder = wrapper.placeholder, argsHolders = replaceHolders(args, placeholder);
                    length -= argsHolders.length;
                    if (length < arity) {
                        var newArgPos = argPos ? arrayCopy(argPos) : null, newArity = nativeMax(arity - length, 0), newsHolders = isCurry ? argsHolders : null, newHoldersRight = isCurry ? null : argsHolders, newPartials = isCurry ? args : null, newPartialsRight = isCurry ? null : args;
                        bitmask |= isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG;
                        bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);
                        if (!isCurryBound) {
                            bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
                        }
                        var result = createHybridWrapper(func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity);
                        result.placeholder = placeholder;
                        return result;
                    }
                }
                var thisBinding = isBind ? thisArg : this;
                if (isBindKey) {
                    func = thisBinding[key];
                }
                if (argPos) {
                    args = reorder(args, argPos);
                }
                if (isAry && ary < args.length) {
                    args.length = ary;
                }
                return (this instanceof wrapper ? Ctor || createCtorWrapper(func) : func).apply(thisBinding, args);
            }
            return wrapper;
        }
        function createPad(string, length, chars) {
            var strLength = string.length;
            length = +length;
            if (strLength >= length || !nativeIsFinite(length)) {
                return "";
            }
            var padLength = length - strLength;
            chars = chars == null ? " " : baseToString(chars);
            return repeat(chars, ceil(padLength / chars.length)).slice(0, padLength);
        }
        function createPartialWrapper(func, bitmask, thisArg, partials) {
            var isBind = bitmask & BIND_FLAG, Ctor = createCtorWrapper(func);
            function wrapper() {
                var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(argsLength + leftLength);
                while (++leftIndex < leftLength) {
                    args[leftIndex] = partials[leftIndex];
                }
                while (argsLength--) {
                    args[leftIndex++] = arguments[++argsIndex];
                }
                return (this instanceof wrapper ? Ctor : func).apply(isBind ? thisArg : this, args);
            }
            return wrapper;
        }
        function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
            var isBindKey = bitmask & BIND_KEY_FLAG;
            if (!isBindKey && !isFunction(func)) {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            var length = partials ? partials.length : 0;
            if (!length) {
                bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
                partials = holders = null;
            }
            length -= holders ? holders.length : 0;
            if (bitmask & PARTIAL_RIGHT_FLAG) {
                var partialsRight = partials, holdersRight = holders;
                partials = holders = null;
            }
            var data = !isBindKey && getData(func), newData = [ func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity ];
            if (data && data !== true) {
                mergeData(newData, data);
                bitmask = newData[1];
                arity = newData[9];
            }
            newData[9] = arity == null ? isBindKey ? 0 : func.length : nativeMax(arity - length, 0) || 0;
            if (bitmask == BIND_FLAG) {
                var result = createBindWrapper(newData[0], newData[2]);
            } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
                result = createPartialWrapper.apply(null, newData);
            } else {
                result = createHybridWrapper.apply(null, newData);
            }
            var setter = data ? baseSetData : setData;
            return setter(result, newData);
        }
        function equalArrays(array, other, equalFunc, customizer, isWhere, stackA, stackB) {
            var index = -1, arrLength = array.length, othLength = other.length, result = true;
            if (arrLength != othLength && !(isWhere && othLength > arrLength)) {
                return false;
            }
            while (result && ++index < arrLength) {
                var arrValue = array[index], othValue = other[index];
                result = undefined;
                if (customizer) {
                    result = isWhere ? customizer(othValue, arrValue, index) : customizer(arrValue, othValue, index);
                }
                if (typeof result == "undefined") {
                    if (isWhere) {
                        var othIndex = othLength;
                        while (othIndex--) {
                            othValue = other[othIndex];
                            result = arrValue && arrValue === othValue || equalFunc(arrValue, othValue, customizer, isWhere, stackA, stackB);
                            if (result) {
                                break;
                            }
                        }
                    } else {
                        result = arrValue && arrValue === othValue || equalFunc(arrValue, othValue, customizer, isWhere, stackA, stackB);
                    }
                }
            }
            return !!result;
        }
        function equalByTag(object, other, tag) {
            switch (tag) {
              case boolTag:
              case dateTag:
                return +object == +other;

              case errorTag:
                return object.name == other.name && object.message == other.message;

              case numberTag:
                return object != +object ? other != +other : object == 0 ? 1 / object == 1 / other : object == +other;

              case regexpTag:
              case stringTag:
                return object == baseToString(other);
            }
            return false;
        }
        function equalObjects(object, other, equalFunc, customizer, isWhere, stackA, stackB) {
            var objProps = keys(object), objLength = objProps.length, othProps = keys(other), othLength = othProps.length;
            if (objLength != othLength && !isWhere) {
                return false;
            }
            var hasCtor, index = -1;
            while (++index < objLength) {
                var key = objProps[index], result = hasOwnProperty.call(other, key);
                if (result) {
                    var objValue = object[key], othValue = other[key];
                    result = undefined;
                    if (customizer) {
                        result = isWhere ? customizer(othValue, objValue, key) : customizer(objValue, othValue, key);
                    }
                    if (typeof result == "undefined") {
                        result = objValue && objValue === othValue || equalFunc(objValue, othValue, customizer, isWhere, stackA, stackB);
                    }
                }
                if (!result) {
                    return false;
                }
                hasCtor || (hasCtor = key == "constructor");
            }
            if (!hasCtor) {
                var objCtor = object.constructor, othCtor = other.constructor;
                if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                    return false;
                }
            }
            return true;
        }
        function extremumBy(collection, iteratee, isMin) {
            var exValue = isMin ? POSITIVE_INFINITY : NEGATIVE_INFINITY, computed = exValue, result = computed;
            baseEach(collection, function(value, index, collection) {
                var current = iteratee(value, index, collection);
                if ((isMin ? current < computed : current > computed) || current === exValue && current === result) {
                    computed = current;
                    result = value;
                }
            });
            return result;
        }
        function getCallback(func, thisArg, argCount) {
            var result = lodash.callback || callback;
            result = result === callback ? baseCallback : result;
            return argCount ? result(func, thisArg, argCount) : result;
        }
        var getData = !metaMap ? noop : function(func) {
            return metaMap.get(func);
        };
        function getIndexOf(collection, target, fromIndex) {
            var result = lodash.indexOf || indexOf;
            result = result === indexOf ? baseIndexOf : result;
            return collection ? result(collection, target, fromIndex) : result;
        }
        function getView(start, end, transforms) {
            var index = -1, length = transforms ? transforms.length : 0;
            while (++index < length) {
                var data = transforms[index], size = data.size;
                switch (data.type) {
                  case "drop":
                    start += size;
                    break;

                  case "dropRight":
                    end -= size;
                    break;

                  case "take":
                    end = nativeMin(end, start + size);
                    break;

                  case "takeRight":
                    start = nativeMax(start, end - size);
                    break;
                }
            }
            return {
                start: start,
                end: end
            };
        }
        function initCloneArray(array) {
            var length = array.length, result = new array.constructor(length);
            if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
                result.index = array.index;
                result.input = array.input;
            }
            return result;
        }
        function initCloneObject(object) {
            var Ctor = object.constructor;
            if (!(typeof Ctor == "function" && Ctor instanceof Ctor)) {
                Ctor = Object;
            }
            return new Ctor();
        }
        function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag:
                return bufferClone(object);

              case boolTag:
              case dateTag:
                return new Ctor(+object);

              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                var buffer = object.buffer;
                return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

              case numberTag:
              case stringTag:
                return new Ctor(object);

              case regexpTag:
                var result = new Ctor(object.source, reFlags.exec(object));
                result.lastIndex = object.lastIndex;
            }
            return result;
        }
        function isBindable(func) {
            var support = lodash.support, result = !(support.funcNames ? func.name : support.funcDecomp);
            if (!result) {
                var source = fnToString.call(func);
                if (!support.funcNames) {
                    result = !reFuncName.test(source);
                }
                if (!result) {
                    result = reThis.test(source) || isNative(func);
                    baseSetData(func, result);
                }
            }
            return result;
        }
        function isIndex(value, length) {
            value = +value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return value > -1 && value % 1 == 0 && value < length;
        }
        function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
                return false;
            }
            var type = typeof index;
            if (type == "number") {
                var length = object.length, prereq = isLength(length) && isIndex(index, length);
            } else {
                prereq = type == "string" && index in value;
            }
            return prereq && object[index] === value;
        }
        function isLength(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isStrictComparable(value) {
            return value === value && (value === 0 ? 1 / value > 0 : !isObject(value));
        }
        function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask;
            var arityFlags = ARY_FLAG | REARG_FLAG, bindFlags = BIND_FLAG | BIND_KEY_FLAG, comboFlags = arityFlags | bindFlags | CURRY_BOUND_FLAG | CURRY_RIGHT_FLAG;
            var isAry = bitmask & ARY_FLAG && !(srcBitmask & ARY_FLAG), isRearg = bitmask & REARG_FLAG && !(srcBitmask & REARG_FLAG), argPos = (isRearg ? data : source)[7], ary = (isAry ? data : source)[8];
            var isCommon = !(bitmask >= REARG_FLAG && srcBitmask > bindFlags) && !(bitmask > bindFlags && srcBitmask >= REARG_FLAG);
            var isCombo = newBitmask >= arityFlags && newBitmask <= comboFlags && (bitmask < REARG_FLAG || (isRearg || isAry) && argPos.length <= ary);
            if (!(isCommon || isCombo)) {
                return data;
            }
            if (srcBitmask & BIND_FLAG) {
                data[2] = source[2];
                newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
            }
            var value = source[3];
            if (value) {
                var partials = data[3];
                data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
                data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
            }
            value = source[5];
            if (value) {
                partials = data[5];
                data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
                data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
            }
            value = source[7];
            if (value) {
                data[7] = arrayCopy(value);
            }
            if (srcBitmask & ARY_FLAG) {
                data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            }
            if (data[9] == null) {
                data[9] = source[9];
            }
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
        }
        function pickByArray(object, props) {
            object = toObject(object);
            var index = -1, length = props.length, result = {};
            while (++index < length) {
                var key = props[index];
                if (key in object) {
                    result[key] = object[key];
                }
            }
            return result;
        }
        function pickByCallback(object, predicate) {
            var result = {};
            baseForIn(object, function(value, key, object) {
                if (predicate(value, key, object)) {
                    result[key] = value;
                }
            });
            return result;
        }
        function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = arrayCopy(array);
            while (length--) {
                var index = indexes[length];
                array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
            }
            return array;
        }
        var setData = function() {
            var count = 0, lastCalled = 0;
            return function(key, value) {
                var stamp = now(), remaining = HOT_SPAN - (stamp - lastCalled);
                lastCalled = stamp;
                if (remaining > 0) {
                    if (++count >= HOT_COUNT) {
                        return key;
                    }
                } else {
                    count = 0;
                }
                return baseSetData(key, value);
            };
        }();
        function shimIsPlainObject(value) {
            var Ctor, support = lodash.support;
            if (!(isObjectLike(value) && objToString.call(value) == objectTag) || !hasOwnProperty.call(value, "constructor") && (Ctor = value.constructor, 
            typeof Ctor == "function" && !(Ctor instanceof Ctor))) {
                return false;
            }
            var result;
            baseForIn(value, function(subValue, key) {
                result = key;
            });
            return typeof result == "undefined" || hasOwnProperty.call(value, result);
        }
        function shimKeys(object) {
            var props = keysIn(object), propsLength = props.length, length = propsLength && object.length, support = lodash.support;
            var allowIndexes = length && isLength(length) && (isArray(object) || support.nonEnumArgs && isArguments(object));
            var index = -1, result = [];
            while (++index < propsLength) {
                var key = props[index];
                if (allowIndexes && isIndex(key, length) || hasOwnProperty.call(object, key)) {
                    result.push(key);
                }
            }
            return result;
        }
        function toIterable(value) {
            if (value == null) {
                return [];
            }
            if (!isLength(value.length)) {
                return values(value);
            }
            return isObject(value) ? value : Object(value);
        }
        function toObject(value) {
            return isObject(value) ? value : Object(value);
        }
        function chunk(array, size, guard) {
            if (guard ? isIterateeCall(array, size, guard) : size == null) {
                size = 1;
            } else {
                size = nativeMax(+size || 1, 1);
            }
            var index = 0, length = array ? array.length : 0, resIndex = -1, result = Array(ceil(length / size));
            while (index < length) {
                result[++resIndex] = baseSlice(array, index, index += size);
            }
            return result;
        }
        function compact(array) {
            var index = -1, length = array ? array.length : 0, resIndex = -1, result = [];
            while (++index < length) {
                var value = array[index];
                if (value) {
                    result[++resIndex] = value;
                }
            }
            return result;
        }
        function difference() {
            var index = -1, length = arguments.length;
            while (++index < length) {
                var value = arguments[index];
                if (isArray(value) || isArguments(value)) {
                    break;
                }
            }
            return baseDifference(value, baseFlatten(arguments, false, true, ++index));
        }
        function drop(array, n, guard) {
            var length = array ? array.length : 0;
            if (!length) {
                return [];
            }
            if (guard ? isIterateeCall(array, n, guard) : n == null) {
                n = 1;
            }
            return baseSlice(array, n < 0 ? 0 : n);
        }
        function dropRight(array, n, guard) {
            var length = array ? array.length : 0;
            if (!length) {
                return [];
            }
            if (guard ? isIterateeCall(array, n, guard) : n == null) {
                n = 1;
            }
            n = length - (+n || 0);
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate, thisArg) {
            var length = array ? array.length : 0;
            if (!length) {
                return [];
            }
            predicate = getCallback(predicate, thisArg, 3);
            while (length-- && predicate(array[length], length, array)) {}
            return baseSlice(array, 0, length + 1);
        }
        function dropWhile(array, predicate, thisArg) {
            var length = array ? array.length : 0;
            if (!length) {
                return [];
            }
            var index = -1;
            predicate = getCallback(predicate, thisArg, 3);
            while (++index < length && predicate(array[index], index, array)) {}
            return baseSlice(array, index);
        }
        function findIndex(array, predicate, thisArg) {
            var index = -1, length = array ? array.length : 0;
            predicate = getCallback(predicate, thisArg, 3);
            while (++index < length) {
                if (predicate(array[index], index, array)) {
                    return index;
                }
            }
            return -1;
        }
        function findLastIndex(array, predicate, thisArg) {
            var length = array ? array.length : 0;
            predicate = getCallback(predicate, thisArg, 3);
            while (length--) {
                if (predicate(array[length], length, array)) {
                    return length;
                }
            }
            return -1;
        }
        function first(array) {
            return array ? array[0] : undefined;
        }
        function flatten(array, isDeep, guard) {
            var length = array ? array.length : 0;
            if (guard && isIterateeCall(array, isDeep, guard)) {
                isDeep = false;
            }
            return length ? baseFlatten(array, isDeep) : [];
        }
        function flattenDeep(array) {
            var length = array ? array.length : 0;
            return length ? baseFlatten(array, true) : [];
        }
        function indexOf(array, value, fromIndex) {
            var length = array ? array.length : 0;
            if (!length) {
                return -1;
            }
            if (typeof fromIndex == "number") {
                fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex || 0;
            } else if (fromIndex) {
                var index = binaryIndex(array, value), other = array[index];
                return (value === value ? value === other : other !== other) ? index : -1;
            }
            return baseIndexOf(array, value, fromIndex);
        }
        function initial(array) {
            return dropRight(array, 1);
        }
        function intersection() {
            var args = [], argsIndex = -1, argsLength = arguments.length, caches = [], indexOf = getIndexOf(), isCommon = indexOf == baseIndexOf;
            while (++argsIndex < argsLength) {
                var value = arguments[argsIndex];
                if (isArray(value) || isArguments(value)) {
                    args.push(value);
                    caches.push(isCommon && value.length >= 120 && createCache(argsIndex && value));
                }
            }
            argsLength = args.length;
            var array = args[0], index = -1, length = array ? array.length : 0, result = [], seen = caches[0];
            outer: while (++index < length) {
                value = array[index];
                if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value)) < 0) {
                    argsIndex = argsLength;
                    while (--argsIndex) {
                        var cache = caches[argsIndex];
                        if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
                            continue outer;
                        }
                    }
                    if (seen) {
                        seen.push(value);
                    }
                    result.push(value);
                }
            }
            return result;
        }
        function last(array) {
            var length = array ? array.length : 0;
            return length ? array[length - 1] : undefined;
        }
        function lastIndexOf(array, value, fromIndex) {
            var length = array ? array.length : 0;
            if (!length) {
                return -1;
            }
            var index = length;
            if (typeof fromIndex == "number") {
                index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
            } else if (fromIndex) {
                index = binaryIndex(array, value, true) - 1;
                var other = array[index];
                return (value === value ? value === other : other !== other) ? index : -1;
            }
            if (value !== value) {
                return indexOfNaN(array, index, true);
            }
            while (index--) {
                if (array[index] === value) {
                    return index;
                }
            }
            return -1;
        }
        function pull() {
            var array = arguments[0];
            if (!(array && array.length)) {
                return array;
            }
            var index = 0, indexOf = getIndexOf(), length = arguments.length;
            while (++index < length) {
                var fromIndex = 0, value = arguments[index];
                while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
                    splice.call(array, fromIndex, 1);
                }
            }
            return array;
        }
        function pullAt(array) {
            return basePullAt(array || [], baseFlatten(arguments, false, false, 1));
        }
        function remove(array, predicate, thisArg) {
            var index = -1, length = array ? array.length : 0, result = [];
            predicate = getCallback(predicate, thisArg, 3);
            while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                    result.push(value);
                    splice.call(array, index--, 1);
                    length--;
                }
            }
            return result;
        }
        function rest(array) {
            return drop(array, 1);
        }
        function slice(array, start, end) {
            var length = array ? array.length : 0;
            if (!length) {
                return [];
            }
            if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
                start = 0;
                end = length;
            }
            return baseSlice(array, start, end);
        }
        function sortedIndex(array, value, iteratee, thisArg) {
            var func = getCallback(iteratee);
            return func === baseCallback && iteratee == null ? binaryIndex(array, value) : binaryIndexBy(array, value, func(iteratee, thisArg, 1));
        }
        function sortedLastIndex(array, value, iteratee, thisArg) {
            var func = getCallback(iteratee);
            return func === baseCallback && iteratee == null ? binaryIndex(array, value, true) : binaryIndexBy(array, value, func(iteratee, thisArg, 1), true);
        }
        function take(array, n, guard) {
            var length = array ? array.length : 0;
            if (!length) {
                return [];
            }
            if (guard ? isIterateeCall(array, n, guard) : n == null) {
                n = 1;
            }
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
            var length = array ? array.length : 0;
            if (!length) {
                return [];
            }
            if (guard ? isIterateeCall(array, n, guard) : n == null) {
                n = 1;
            }
            n = length - (+n || 0);
            return baseSlice(array, n < 0 ? 0 : n);
        }
        function takeRightWhile(array, predicate, thisArg) {
            var length = array ? array.length : 0;
            if (!length) {
                return [];
            }
            predicate = getCallback(predicate, thisArg, 3);
            while (length-- && predicate(array[length], length, array)) {}
            return baseSlice(array, length + 1);
        }
        function takeWhile(array, predicate, thisArg) {
            var length = array ? array.length : 0;
            if (!length) {
                return [];
            }
            var index = -1;
            predicate = getCallback(predicate, thisArg, 3);
            while (++index < length && predicate(array[index], index, array)) {}
            return baseSlice(array, 0, index);
        }
        function union() {
            return baseUniq(baseFlatten(arguments, false, true));
        }
        function uniq(array, isSorted, iteratee, thisArg) {
            var length = array ? array.length : 0;
            if (!length) {
                return [];
            }
            if (typeof isSorted != "boolean" && isSorted != null) {
                thisArg = iteratee;
                iteratee = isIterateeCall(array, isSorted, thisArg) ? null : isSorted;
                isSorted = false;
            }
            var func = getCallback();
            if (!(func === baseCallback && iteratee == null)) {
                iteratee = func(iteratee, thisArg, 3);
            }
            return isSorted && getIndexOf() == baseIndexOf ? sortedUniq(array, iteratee) : baseUniq(array, iteratee);
        }
        function unzip(array) {
            var index = -1, length = (array && array.length && arrayMax(arrayMap(array, getLength))) >>> 0, result = Array(length);
            while (++index < length) {
                result[index] = arrayMap(array, baseProperty(index));
            }
            return result;
        }
        function without(array) {
            return baseDifference(array, baseSlice(arguments, 1));
        }
        function xor() {
            var index = -1, length = arguments.length;
            while (++index < length) {
                var array = arguments[index];
                if (isArray(array) || isArguments(array)) {
                    var result = result ? baseDifference(result, array).concat(baseDifference(array, result)) : array;
                }
            }
            return result ? baseUniq(result) : [];
        }
        function zip() {
            var length = arguments.length, array = Array(length);
            while (length--) {
                array[length] = arguments[length];
            }
            return unzip(array);
        }
        function zipObject(props, values) {
            var index = -1, length = props ? props.length : 0, result = {};
            if (length && !values && !isArray(props[0])) {
                values = [];
            }
            while (++index < length) {
                var key = props[index];
                if (values) {
                    result[key] = values[index];
                } else if (key) {
                    result[key[0]] = key[1];
                }
            }
            return result;
        }
        function chain(value) {
            var result = lodash(value);
            result.__chain__ = true;
            return result;
        }
        function tap(value, interceptor, thisArg) {
            interceptor.call(thisArg, value);
            return value;
        }
        function thru(value, interceptor, thisArg) {
            return interceptor.call(thisArg, value);
        }
        function wrapperChain() {
            return chain(this);
        }
        function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
                return new LodashWrapper(value.reverse());
            }
            return this.thru(function(value) {
                return value.reverse();
            });
        }
        function wrapperToString() {
            return this.value() + "";
        }
        function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        function at(collection) {
            var length = collection ? collection.length : 0;
            if (isLength(length)) {
                collection = toIterable(collection);
            }
            return baseAt(collection, baseFlatten(arguments, false, false, 1));
        }
        function includes(collection, target, fromIndex) {
            var length = collection ? collection.length : 0;
            if (!isLength(length)) {
                collection = values(collection);
                length = collection.length;
            }
            if (!length) {
                return false;
            }
            if (typeof fromIndex == "number") {
                fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex || 0;
            } else {
                fromIndex = 0;
            }
            return typeof collection == "string" || !isArray(collection) && isString(collection) ? fromIndex < length && collection.indexOf(target, fromIndex) > -1 : getIndexOf(collection, target, fromIndex) > -1;
        }
        var countBy = createAggregator(function(result, value, key) {
            hasOwnProperty.call(result, key) ? ++result[key] : result[key] = 1;
        });
        function every(collection, predicate, thisArg) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (typeof predicate != "function" || typeof thisArg != "undefined") {
                predicate = getCallback(predicate, thisArg, 3);
            }
            return func(collection, predicate);
        }
        function filter(collection, predicate, thisArg) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            predicate = getCallback(predicate, thisArg, 3);
            return func(collection, predicate);
        }
        function find(collection, predicate, thisArg) {
            if (isArray(collection)) {
                var index = findIndex(collection, predicate, thisArg);
                return index > -1 ? collection[index] : undefined;
            }
            predicate = getCallback(predicate, thisArg, 3);
            return baseFind(collection, predicate, baseEach);
        }
        function findLast(collection, predicate, thisArg) {
            predicate = getCallback(predicate, thisArg, 3);
            return baseFind(collection, predicate, baseEachRight);
        }
        function findWhere(collection, source) {
            return find(collection, matches(source));
        }
        function forEach(collection, iteratee, thisArg) {
            return typeof iteratee == "function" && typeof thisArg == "undefined" && isArray(collection) ? arrayEach(collection, iteratee) : baseEach(collection, bindCallback(iteratee, thisArg, 3));
        }
        function forEachRight(collection, iteratee, thisArg) {
            return typeof iteratee == "function" && typeof thisArg == "undefined" && isArray(collection) ? arrayEachRight(collection, iteratee) : baseEachRight(collection, bindCallback(iteratee, thisArg, 3));
        }
        var groupBy = createAggregator(function(result, value, key) {
            if (hasOwnProperty.call(result, key)) {
                result[key].push(value);
            } else {
                result[key] = [ value ];
            }
        });
        var indexBy = createAggregator(function(result, value, key) {
            result[key] = value;
        });
        function invoke(collection, methodName) {
            return baseInvoke(collection, methodName, baseSlice(arguments, 2));
        }
        function map(collection, iteratee, thisArg) {
            var func = isArray(collection) ? arrayMap : baseMap;
            iteratee = getCallback(iteratee, thisArg, 3);
            return func(collection, iteratee);
        }
        var max = createExtremum(arrayMax);
        var min = createExtremum(arrayMin, true);
        var partition = createAggregator(function(result, value, key) {
            result[key ? 0 : 1].push(value);
        }, function() {
            return [ [], [] ];
        });
        function pluck(collection, key) {
            return map(collection, property(key));
        }
        function reduce(collection, iteratee, accumulator, thisArg) {
            var func = isArray(collection) ? arrayReduce : baseReduce;
            return func(collection, getCallback(iteratee, thisArg, 4), accumulator, arguments.length < 3, baseEach);
        }
        function reduceRight(collection, iteratee, accumulator, thisArg) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce;
            return func(collection, getCallback(iteratee, thisArg, 4), accumulator, arguments.length < 3, baseEachRight);
        }
        function reject(collection, predicate, thisArg) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            predicate = getCallback(predicate, thisArg, 3);
            return func(collection, function(value, index, collection) {
                return !predicate(value, index, collection);
            });
        }
        function sample(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n == null) {
                collection = toIterable(collection);
                var length = collection.length;
                return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
            }
            var result = shuffle(collection);
            result.length = nativeMin(n < 0 ? 0 : +n || 0, result.length);
            return result;
        }
        function shuffle(collection) {
            collection = toIterable(collection);
            var index = -1, length = collection.length, result = Array(length);
            while (++index < length) {
                var rand = baseRandom(0, index);
                if (index != rand) {
                    result[index] = result[rand];
                }
                result[rand] = collection[index];
            }
            return result;
        }
        function size(collection) {
            var length = collection ? collection.length : 0;
            return isLength(length) ? length : keys(collection).length;
        }
        function some(collection, predicate, thisArg) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (typeof predicate != "function" || typeof thisArg != "undefined") {
                predicate = getCallback(predicate, thisArg, 3);
            }
            return func(collection, predicate);
        }
        function sortBy(collection, iteratee, thisArg) {
            var index = -1, length = collection ? collection.length : 0, result = isLength(length) ? Array(length) : [];
            if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
                iteratee = null;
            }
            iteratee = getCallback(iteratee, thisArg, 3);
            baseEach(collection, function(value, key, collection) {
                result[++index] = {
                    criteria: iteratee(value, key, collection),
                    index: index,
                    value: value
                };
            });
            return baseSortBy(result, compareAscending);
        }
        function sortByAll(collection) {
            var args = arguments;
            if (args.length > 3 && isIterateeCall(args[1], args[2], args[3])) {
                args = [ collection, args[1] ];
            }
            var index = -1, length = collection ? collection.length : 0, props = baseFlatten(args, false, false, 1), result = isLength(length) ? Array(length) : [];
            baseEach(collection, function(value, key, collection) {
                var length = props.length, criteria = Array(length);
                while (length--) {
                    criteria[length] = value == null ? undefined : value[props[length]];
                }
                result[++index] = {
                    criteria: criteria,
                    index: index,
                    value: value
                };
            });
            return baseSortBy(result, compareMultipleAscending);
        }
        function where(collection, source) {
            return filter(collection, matches(source));
        }
        var now = nativeNow || function() {
            return new Date().getTime();
        };
        function after(n, func) {
            if (!isFunction(func)) {
                if (isFunction(n)) {
                    var temp = n;
                    n = func;
                    func = temp;
                } else {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
            }
            n = nativeIsFinite(n = +n) ? n : 0;
            return function() {
                if (--n < 1) {
                    return func.apply(this, arguments);
                }
            };
        }
        function ary(func, n, guard) {
            if (guard && isIterateeCall(func, n, guard)) {
                n = null;
            }
            n = func && n == null ? func.length : nativeMax(+n || 0, 0);
            return createWrapper(func, ARY_FLAG, null, null, null, null, n);
        }
        function before(n, func) {
            var result;
            if (!isFunction(func)) {
                if (isFunction(n)) {
                    var temp = n;
                    n = func;
                    func = temp;
                } else {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
            }
            return function() {
                if (--n > 0) {
                    result = func.apply(this, arguments);
                } else {
                    func = null;
                }
                return result;
            };
        }
        function bind(func, thisArg) {
            var bitmask = BIND_FLAG;
            if (arguments.length > 2) {
                var partials = baseSlice(arguments, 2), holders = replaceHolders(partials, bind.placeholder);
                bitmask |= PARTIAL_FLAG;
            }
            return createWrapper(func, bitmask, thisArg, partials, holders);
        }
        function bindAll(object) {
            return baseBindAll(object, arguments.length > 1 ? baseFlatten(arguments, false, false, 1) : functions(object));
        }
        function bindKey(object, key) {
            var bitmask = BIND_FLAG | BIND_KEY_FLAG;
            if (arguments.length > 2) {
                var partials = baseSlice(arguments, 2), holders = replaceHolders(partials, bindKey.placeholder);
                bitmask |= PARTIAL_FLAG;
            }
            return createWrapper(key, bitmask, object, partials, holders);
        }
        function curry(func, arity, guard) {
            if (guard && isIterateeCall(func, arity, guard)) {
                arity = null;
            }
            var result = createWrapper(func, CURRY_FLAG, null, null, null, null, null, arity);
            result.placeholder = curry.placeholder;
            return result;
        }
        function curryRight(func, arity, guard) {
            if (guard && isIterateeCall(func, arity, guard)) {
                arity = null;
            }
            var result = createWrapper(func, CURRY_RIGHT_FLAG, null, null, null, null, null, arity);
            result.placeholder = curryRight.placeholder;
            return result;
        }
        function debounce(func, wait, options) {
            var args, maxTimeoutId, result, stamp, thisArg, timeoutId, trailingCall, lastCalled = 0, maxWait = false, trailing = true;
            if (!isFunction(func)) {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            wait = wait < 0 ? 0 : wait;
            if (options === true) {
                var leading = true;
                trailing = false;
            } else if (isObject(options)) {
                leading = options.leading;
                maxWait = "maxWait" in options && nativeMax(+options.maxWait || 0, wait);
                trailing = "trailing" in options ? options.trailing : trailing;
            }
            function cancel() {
                if (timeoutId) {
                    clearTimeout(timeoutId);
                }
                if (maxTimeoutId) {
                    clearTimeout(maxTimeoutId);
                }
                maxTimeoutId = timeoutId = trailingCall = undefined;
            }
            function delayed() {
                var remaining = wait - (now() - stamp);
                if (remaining <= 0 || remaining > wait) {
                    if (maxTimeoutId) {
                        clearTimeout(maxTimeoutId);
                    }
                    var isCalled = trailingCall;
                    maxTimeoutId = timeoutId = trailingCall = undefined;
                    if (isCalled) {
                        lastCalled = now();
                        result = func.apply(thisArg, args);
                        if (!timeoutId && !maxTimeoutId) {
                            args = thisArg = null;
                        }
                    }
                } else {
                    timeoutId = setTimeout(delayed, remaining);
                }
            }
            function maxDelayed() {
                if (timeoutId) {
                    clearTimeout(timeoutId);
                }
                maxTimeoutId = timeoutId = trailingCall = undefined;
                if (trailing || maxWait !== wait) {
                    lastCalled = now();
                    result = func.apply(thisArg, args);
                    if (!timeoutId && !maxTimeoutId) {
                        args = thisArg = null;
                    }
                }
            }
            function debounced() {
                args = arguments;
                stamp = now();
                thisArg = this;
                trailingCall = trailing && (timeoutId || !leading);
                if (maxWait === false) {
                    var leadingCall = leading && !timeoutId;
                } else {
                    if (!maxTimeoutId && !leading) {
                        lastCalled = stamp;
                    }
                    var remaining = maxWait - (stamp - lastCalled), isCalled = remaining <= 0 || remaining > maxWait;
                    if (isCalled) {
                        if (maxTimeoutId) {
                            maxTimeoutId = clearTimeout(maxTimeoutId);
                        }
                        lastCalled = stamp;
                        result = func.apply(thisArg, args);
                    } else if (!maxTimeoutId) {
                        maxTimeoutId = setTimeout(maxDelayed, remaining);
                    }
                }
                if (isCalled && timeoutId) {
                    timeoutId = clearTimeout(timeoutId);
                } else if (!timeoutId && wait !== maxWait) {
                    timeoutId = setTimeout(delayed, wait);
                }
                if (leadingCall) {
                    isCalled = true;
                    result = func.apply(thisArg, args);
                }
                if (isCalled && !timeoutId && !maxTimeoutId) {
                    args = thisArg = null;
                }
                return result;
            }
            debounced.cancel = cancel;
            return debounced;
        }
        function defer(func) {
            return baseDelay(func, 1, arguments, 1);
        }
        function delay(func, wait) {
            return baseDelay(func, wait, arguments, 2);
        }
        function flow() {
            var funcs = arguments, length = funcs.length;
            if (!length) {
                return function() {};
            }
            if (!arrayEvery(funcs, isFunction)) {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            return function() {
                var index = 0, result = funcs[index].apply(this, arguments);
                while (++index < length) {
                    result = funcs[index].call(this, result);
                }
                return result;
            };
        }
        function flowRight() {
            var funcs = arguments, fromIndex = funcs.length - 1;
            if (fromIndex < 0) {
                return function() {};
            }
            if (!arrayEvery(funcs, isFunction)) {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            return function() {
                var index = fromIndex, result = funcs[index].apply(this, arguments);
                while (index--) {
                    result = funcs[index].call(this, result);
                }
                return result;
            };
        }
        function memoize(func, resolver) {
            if (!isFunction(func) || resolver && !isFunction(resolver)) {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            var memoized = function() {
                var cache = memoized.cache, key = resolver ? resolver.apply(this, arguments) : arguments[0];
                if (cache.has(key)) {
                    return cache.get(key);
                }
                var result = func.apply(this, arguments);
                cache.set(key, result);
                return result;
            };
            memoized.cache = new memoize.Cache();
            return memoized;
        }
        function negate(predicate) {
            if (!isFunction(predicate)) {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            return function() {
                return !predicate.apply(this, arguments);
            };
        }
        function once(func) {
            return before(func, 2);
        }
        function partial(func) {
            var partials = baseSlice(arguments, 1), holders = replaceHolders(partials, partial.placeholder);
            return createWrapper(func, PARTIAL_FLAG, null, partials, holders);
        }
        function partialRight(func) {
            var partials = baseSlice(arguments, 1), holders = replaceHolders(partials, partialRight.placeholder);
            return createWrapper(func, PARTIAL_RIGHT_FLAG, null, partials, holders);
        }
        function rearg(func) {
            var indexes = baseFlatten(arguments, false, false, 1);
            return createWrapper(func, REARG_FLAG, null, null, null, indexes);
        }
        function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (!isFunction(func)) {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            if (options === false) {
                leading = false;
            } else if (isObject(options)) {
                leading = "leading" in options ? !!options.leading : leading;
                trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            debounceOptions.leading = leading;
            debounceOptions.maxWait = +wait;
            debounceOptions.trailing = trailing;
            return debounce(func, wait, debounceOptions);
        }
        function wrap(value, wrapper) {
            wrapper = wrapper == null ? identity : wrapper;
            return createWrapper(wrapper, PARTIAL_FLAG, null, [ value ], []);
        }
        function clone(value, isDeep, customizer, thisArg) {
            if (typeof isDeep != "boolean" && isDeep != null) {
                thisArg = customizer;
                customizer = isIterateeCall(value, isDeep, thisArg) ? null : isDeep;
                isDeep = false;
            }
            customizer = typeof customizer == "function" && bindCallback(customizer, thisArg, 1);
            return baseClone(value, isDeep, customizer);
        }
        function cloneDeep(value, customizer, thisArg) {
            customizer = typeof customizer == "function" && bindCallback(customizer, thisArg, 1);
            return baseClone(value, true, customizer);
        }
        function isArguments(value) {
            var length = isObjectLike(value) ? value.length : undefined;
            return isLength(length) && objToString.call(value) == argsTag || false;
        }
        var isArray = nativeIsArray || function(value) {
            return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag || false;
        };
        function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && objToString.call(value) == boolTag || false;
        }
        function isDate(value) {
            return isObjectLike(value) && objToString.call(value) == dateTag || false;
        }
        function isElement(value) {
            return value && value.nodeType === 1 && isObjectLike(value) && objToString.call(value).indexOf("Element") > -1 || false;
        }
        if (!support.dom) {
            isElement = function(value) {
                return value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value) || false;
            };
        }
        function isEmpty(value) {
            if (value == null) {
                return true;
            }
            var length = value.length;
            if (isLength(length) && (isArray(value) || isString(value) || isArguments(value) || isObjectLike(value) && isFunction(value.splice))) {
                return !length;
            }
            return !keys(value).length;
        }
        function isEqual(value, other, customizer, thisArg) {
            customizer = typeof customizer == "function" && bindCallback(customizer, thisArg, 3);
            if (!customizer && isStrictComparable(value) && isStrictComparable(other)) {
                return value === other;
            }
            var result = customizer ? customizer(value, other) : undefined;
            return typeof result == "undefined" ? baseIsEqual(value, other, customizer) : !!result;
        }
        function isError(value) {
            return isObjectLike(value) && typeof value.message == "string" && objToString.call(value) == errorTag || false;
        }
        var isFinite = nativeNumIsFinite || function(value) {
            return typeof value == "number" && nativeIsFinite(value);
        };
        function isFunction(value) {
            return typeof value == "function" || false;
        }
        if (isFunction(/x/) || Uint8Array && !isFunction(Uint8Array)) {
            isFunction = function(value) {
                return objToString.call(value) == funcTag;
            };
        }
        function isObject(value) {
            var type = typeof value;
            return type == "function" || value && type == "object" || false;
        }
        function isMatch(object, source, customizer, thisArg) {
            var props = keys(source), length = props.length;
            customizer = typeof customizer == "function" && bindCallback(customizer, thisArg, 3);
            if (!customizer && length == 1) {
                var key = props[0], value = source[key];
                if (isStrictComparable(value)) {
                    return object != null && value === object[key] && hasOwnProperty.call(object, key);
                }
            }
            var values = Array(length), strictCompareFlags = Array(length);
            while (length--) {
                value = values[length] = source[props[length]];
                strictCompareFlags[length] = isStrictComparable(value);
            }
            return baseIsMatch(object, props, values, strictCompareFlags, customizer);
        }
        function isNaN(value) {
            return isNumber(value) && value != +value;
        }
        function isNative(value) {
            if (value == null) {
                return false;
            }
            if (objToString.call(value) == funcTag) {
                return reNative.test(fnToString.call(value));
            }
            return isObjectLike(value) && reHostCtor.test(value) || false;
        }
        function isNull(value) {
            return value === null;
        }
        function isNumber(value) {
            return typeof value == "number" || isObjectLike(value) && objToString.call(value) == numberTag || false;
        }
        var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
            if (!(value && objToString.call(value) == objectTag)) {
                return false;
            }
            var valueOf = value.valueOf, objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);
            return objProto ? value == objProto || getPrototypeOf(value) == objProto : shimIsPlainObject(value);
        };
        function isRegExp(value) {
            return isObjectLike(value) && objToString.call(value) == regexpTag || false;
        }
        function isString(value) {
            return typeof value == "string" || isObjectLike(value) && objToString.call(value) == stringTag || false;
        }
        function isTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && typedArrayTags[objToString.call(value)] || false;
        }
        function isUndefined(value) {
            return typeof value == "undefined";
        }
        function toArray(value) {
            var length = value ? value.length : 0;
            if (!isLength(length)) {
                return values(value);
            }
            if (!length) {
                return [];
            }
            return arrayCopy(value);
        }
        function toPlainObject(value) {
            return baseCopy(value, keysIn(value));
        }
        var assign = createAssigner(baseAssign);
        function create(prototype, properties, guard) {
            var result = baseCreate(prototype);
            if (guard && isIterateeCall(prototype, properties, guard)) {
                properties = null;
            }
            return properties ? baseCopy(properties, result, keys(properties)) : result;
        }
        function defaults(object) {
            if (object == null) {
                return object;
            }
            var args = arrayCopy(arguments);
            args.push(assignDefaults);
            return assign.apply(undefined, args);
        }
        function findKey(object, predicate, thisArg) {
            predicate = getCallback(predicate, thisArg, 3);
            return baseFind(object, predicate, baseForOwn, true);
        }
        function findLastKey(object, predicate, thisArg) {
            predicate = getCallback(predicate, thisArg, 3);
            return baseFind(object, predicate, baseForOwnRight, true);
        }
        function forIn(object, iteratee, thisArg) {
            if (typeof iteratee != "function" || typeof thisArg != "undefined") {
                iteratee = bindCallback(iteratee, thisArg, 3);
            }
            return baseFor(object, iteratee, keysIn);
        }
        function forInRight(object, iteratee, thisArg) {
            iteratee = bindCallback(iteratee, thisArg, 3);
            return baseForRight(object, iteratee, keysIn);
        }
        function forOwn(object, iteratee, thisArg) {
            if (typeof iteratee != "function" || typeof thisArg != "undefined") {
                iteratee = bindCallback(iteratee, thisArg, 3);
            }
            return baseForOwn(object, iteratee);
        }
        function forOwnRight(object, iteratee, thisArg) {
            iteratee = bindCallback(iteratee, thisArg, 3);
            return baseForRight(object, iteratee, keys);
        }
        function functions(object) {
            return baseFunctions(object, keysIn(object));
        }
        function has(object, key) {
            return object ? hasOwnProperty.call(object, key) : false;
        }
        function invert(object, multiValue, guard) {
            if (guard && isIterateeCall(object, multiValue, guard)) {
                multiValue = null;
            }
            var index = -1, props = keys(object), length = props.length, result = {};
            while (++index < length) {
                var key = props[index], value = object[key];
                if (multiValue) {
                    if (hasOwnProperty.call(result, value)) {
                        result[value].push(key);
                    } else {
                        result[value] = [ key ];
                    }
                } else {
                    result[value] = key;
                }
            }
            return result;
        }
        var keys = !nativeKeys ? shimKeys : function(object) {
            if (object) {
                var Ctor = object.constructor, length = object.length;
            }
            if (typeof Ctor == "function" && Ctor.prototype === object || typeof object != "function" && (length && isLength(length))) {
                return shimKeys(object);
            }
            return isObject(object) ? nativeKeys(object) : [];
        };
        function keysIn(object) {
            if (object == null) {
                return [];
            }
            if (!isObject(object)) {
                object = Object(object);
            }
            var length = object.length;
            length = length && isLength(length) && (isArray(object) || support.nonEnumArgs && isArguments(object)) && length || 0;
            var Ctor = object.constructor, index = -1, isProto = typeof Ctor == "function" && Ctor.prototype == object, result = Array(length), skipIndexes = length > 0;
            while (++index < length) {
                result[index] = index + "";
            }
            for (var key in object) {
                if (!(skipIndexes && isIndex(key, length)) && !(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
                    result.push(key);
                }
            }
            return result;
        }
        function mapValues(object, iteratee, thisArg) {
            var result = {};
            iteratee = getCallback(iteratee, thisArg, 3);
            baseForOwn(object, function(value, key, object) {
                result[key] = iteratee(value, key, object);
            });
            return result;
        }
        var merge = createAssigner(baseMerge);
        function omit(object, predicate, thisArg) {
            if (object == null) {
                return {};
            }
            if (typeof predicate != "function") {
                var props = arrayMap(baseFlatten(arguments, false, false, 1), String);
                return pickByArray(object, baseDifference(keysIn(object), props));
            }
            predicate = bindCallback(predicate, thisArg, 3);
            return pickByCallback(object, function(value, key, object) {
                return !predicate(value, key, object);
            });
        }
        function pairs(object) {
            var index = -1, props = keys(object), length = props.length, result = Array(length);
            while (++index < length) {
                var key = props[index];
                result[index] = [ key, object[key] ];
            }
            return result;
        }
        function pick(object, predicate, thisArg) {
            if (object == null) {
                return {};
            }
            return typeof predicate == "function" ? pickByCallback(object, bindCallback(predicate, thisArg, 3)) : pickByArray(object, baseFlatten(arguments, false, false, 1));
        }
        function result(object, key, defaultValue) {
            var value = object == null ? undefined : object[key];
            if (typeof value == "undefined") {
                value = defaultValue;
            }
            return isFunction(value) ? value.call(object) : value;
        }
        function transform(object, iteratee, accumulator, thisArg) {
            var isArr = isArray(object) || isTypedArray(object);
            iteratee = getCallback(iteratee, thisArg, 4);
            if (accumulator == null) {
                if (isArr || isObject(object)) {
                    var Ctor = object.constructor;
                    if (isArr) {
                        accumulator = isArray(object) ? new Ctor() : [];
                    } else {
                        accumulator = baseCreate(typeof Ctor == "function" && Ctor.prototype);
                    }
                } else {
                    accumulator = {};
                }
            }
            (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
                return iteratee(accumulator, value, index, object);
            });
            return accumulator;
        }
        function values(object) {
            return baseValues(object, keys(object));
        }
        function valuesIn(object) {
            return baseValues(object, keysIn(object));
        }
        function random(min, max, floating) {
            if (floating && isIterateeCall(min, max, floating)) {
                max = floating = null;
            }
            var noMin = min == null, noMax = max == null;
            if (floating == null) {
                if (noMax && typeof min == "boolean") {
                    floating = min;
                    min = 1;
                } else if (typeof max == "boolean") {
                    floating = max;
                    noMax = true;
                }
            }
            if (noMin && noMax) {
                max = 1;
                noMax = false;
            }
            min = +min || 0;
            if (noMax) {
                max = min;
                min = 0;
            } else {
                max = +max || 0;
            }
            if (floating || min % 1 || max % 1) {
                var rand = nativeRandom();
                return nativeMin(min + rand * (max - min + parseFloat("1e-" + ((rand + "").length - 1))), max);
            }
            return baseRandom(min, max);
        }
        var camelCase = createCompounder(function(result, word, index) {
            word = word.toLowerCase();
            return index ? result + word.charAt(0).toUpperCase() + word.slice(1) : word;
        });
        function capitalize(string) {
            string = baseToString(string);
            return string && string.charAt(0).toUpperCase() + string.slice(1);
        }
        function deburr(string) {
            string = baseToString(string);
            return string && string.replace(reLatin1, deburrLetter);
        }
        function endsWith(string, target, position) {
            string = baseToString(string);
            target = target + "";
            var length = string.length;
            position = (typeof position == "undefined" ? length : nativeMin(position < 0 ? 0 : +position || 0, length)) - target.length;
            return position >= 0 && string.indexOf(target, position) == position;
        }
        function escape(string) {
            string = baseToString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
            string = baseToString(string);
            return string && reHasRegExpChars.test(string) ? string.replace(reRegExpChars, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result, word, index) {
            return result + (index ? "-" : "") + word.toLowerCase();
        });
        function pad(string, length, chars) {
            string = baseToString(string);
            length = +length;
            var strLength = string.length;
            if (strLength >= length || !nativeIsFinite(length)) {
                return string;
            }
            var mid = (length - strLength) / 2, leftLength = floor(mid), rightLength = ceil(mid);
            chars = createPad("", rightLength, chars);
            return chars.slice(0, leftLength) + string + chars;
        }
        function padLeft(string, length, chars) {
            string = baseToString(string);
            return string && createPad(string, length, chars) + string;
        }
        function padRight(string, length, chars) {
            string = baseToString(string);
            return string && string + createPad(string, length, chars);
        }
        function parseInt(string, radix, guard) {
            if (guard && isIterateeCall(string, radix, guard)) {
                radix = 0;
            }
            return nativeParseInt(string, radix);
        }
        if (nativeParseInt(whitespace + "08") != 8) {
            parseInt = function(string, radix, guard) {
                if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
                    radix = 0;
                } else if (radix) {
                    radix = +radix;
                }
                string = trim(string);
                return nativeParseInt(string, radix || (reHexPrefix.test(string) ? 16 : 10));
            };
        }
        function repeat(string, n) {
            var result = "";
            string = baseToString(string);
            n = +n;
            if (n < 1 || !string || !nativeIsFinite(n)) {
                return result;
            }
            do {
                if (n % 2) {
                    result += string;
                }
                n = floor(n / 2);
                string += string;
            } while (n);
            return result;
        }
        var snakeCase = createCompounder(function(result, word, index) {
            return result + (index ? "_" : "") + word.toLowerCase();
        });
        function startsWith(string, target, position) {
            string = baseToString(string);
            position = position == null ? 0 : nativeMin(position < 0 ? 0 : +position || 0, string.length);
            return string.lastIndexOf(target, position) == position;
        }
        function template(string, options, otherOptions) {
            var settings = lodash.templateSettings;
            if (otherOptions && isIterateeCall(string, options, otherOptions)) {
                options = otherOptions = null;
            }
            string = baseToString(string);
            options = baseAssign(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);
            var imports = baseAssign(baseAssign({}, options.imports), settings.imports, assignOwnDefaults), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            var reDelimiters = RegExp((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
            var sourceURL = "//# sourceURL=" + ("sourceURL" in options ? options.sourceURL : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                interpolateValue || (interpolateValue = esTemplateValue);
                source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                if (escapeValue) {
                    isEscaping = true;
                    source += "' +\n__e(" + escapeValue + ") +\n'";
                }
                if (evaluateValue) {
                    isEvaluating = true;
                    source += "';\n" + evaluateValue + ";\n__p += '";
                }
                if (interpolateValue) {
                    source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                }
                index = offset + match.length;
                return match;
            });
            source += "';\n";
            var variable = options.variable;
            if (!variable) {
                source = "with (obj) {\n" + source + "\n}\n";
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\n" + "function print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result = attempt(function() {
                return Function(importsKeys, sourceURL + "return " + source).apply(undefined, importsValues);
            });
            result.source = source;
            if (isError(result)) {
                throw result;
            }
            return result;
        }
        function trim(string, chars, guard) {
            var value = string;
            string = baseToString(string);
            if (!string) {
                return string;
            }
            if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
                return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
            }
            chars = baseToString(chars);
            return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
        }
        function trimLeft(string, chars, guard) {
            var value = string;
            string = baseToString(string);
            if (!string) {
                return string;
            }
            if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
                return string.slice(trimmedLeftIndex(string));
            }
            return string.slice(charsLeftIndex(string, baseToString(chars)));
        }
        function trimRight(string, chars, guard) {
            var value = string;
            string = baseToString(string);
            if (!string) {
                return string;
            }
            if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
                return string.slice(0, trimmedRightIndex(string) + 1);
            }
            return string.slice(0, charsRightIndex(string, baseToString(chars)) + 1);
        }
        function trunc(string, options, guard) {
            if (guard && isIterateeCall(string, options, guard)) {
                options = null;
            }
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (options != null) {
                if (isObject(options)) {
                    var separator = "separator" in options ? options.separator : separator;
                    length = "length" in options ? +options.length || 0 : length;
                    omission = "omission" in options ? baseToString(options.omission) : omission;
                } else {
                    length = +options || 0;
                }
            }
            string = baseToString(string);
            if (length >= string.length) {
                return string;
            }
            var end = length - omission.length;
            if (end < 1) {
                return omission;
            }
            var result = string.slice(0, end);
            if (separator == null) {
                return result + omission;
            }
            if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                    var match, newEnd, substring = string.slice(0, end);
                    if (!separator.global) {
                        separator = RegExp(separator.source, (reFlags.exec(separator) || "") + "g");
                    }
                    separator.lastIndex = 0;
                    while (match = separator.exec(substring)) {
                        newEnd = match.index;
                    }
                    result = result.slice(0, newEnd == null ? end : newEnd);
                }
            } else if (string.indexOf(separator, end) != end) {
                var index = result.lastIndexOf(separator);
                if (index > -1) {
                    result = result.slice(0, index);
                }
            }
            return result + omission;
        }
        function unescape(string) {
            string = baseToString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        function words(string, pattern, guard) {
            if (guard && isIterateeCall(string, pattern, guard)) {
                pattern = null;
            }
            string = baseToString(string);
            return string.match(pattern || reWords) || [];
        }
        function attempt(func) {
            try {
                return func();
            } catch (e) {
                return isError(e) ? e : Error(e);
            }
        }
        function callback(func, thisArg, guard) {
            if (guard && isIterateeCall(func, thisArg, guard)) {
                thisArg = null;
            }
            return baseCallback(func, thisArg);
        }
        function constant(value) {
            return function() {
                return value;
            };
        }
        function identity(value) {
            return value;
        }
        function matches(source) {
            return baseMatches(source, true);
        }
        function mixin(object, source, options) {
            if (options == null) {
                var isObj = isObject(source), props = isObj && keys(source), methodNames = props && props.length && baseFunctions(source, props);
                if (!(methodNames ? methodNames.length : isObj)) {
                    methodNames = false;
                    options = source;
                    source = object;
                    object = this;
                }
            }
            if (!methodNames) {
                methodNames = baseFunctions(source, keys(source));
            }
            var chain = true, index = -1, isFunc = isFunction(object), length = methodNames.length;
            if (options === false) {
                chain = false;
            } else if (isObject(options) && "chain" in options) {
                chain = options.chain;
            }
            while (++index < length) {
                var methodName = methodNames[index], func = source[methodName];
                object[methodName] = func;
                if (isFunc) {
                    object.prototype[methodName] = function(func) {
                        return function() {
                            var chainAll = this.__chain__;
                            if (chain || chainAll) {
                                var result = object(this.__wrapped__);
                                (result.__actions__ = arrayCopy(this.__actions__)).push({
                                    func: func,
                                    args: arguments,
                                    thisArg: object
                                });
                                result.__chain__ = chainAll;
                                return result;
                            }
                            var args = [ this.value() ];
                            push.apply(args, arguments);
                            return func.apply(object, args);
                        };
                    }(func);
                }
            }
            return object;
        }
        function noConflict() {
            context._ = oldDash;
            return this;
        }
        function noop() {}
        function property(key) {
            return baseProperty(key + "");
        }
        function propertyOf(object) {
            return function(key) {
                return object == null ? undefined : object[key];
            };
        }
        function range(start, end, step) {
            if (step && isIterateeCall(start, end, step)) {
                end = step = null;
            }
            start = +start || 0;
            step = step == null ? 1 : +step || 0;
            if (end == null) {
                end = start;
                start = 0;
            } else {
                end = +end || 0;
            }
            var index = -1, length = nativeMax(ceil((end - start) / (step || 1)), 0), result = Array(length);
            while (++index < length) {
                result[index] = start;
                start += step;
            }
            return result;
        }
        function times(n, iteratee, thisArg) {
            n = +n;
            if (n < 1 || !nativeIsFinite(n)) {
                return [];
            }
            var index = -1, result = Array(nativeMin(n, MAX_ARRAY_LENGTH));
            iteratee = bindCallback(iteratee, thisArg, 1);
            while (++index < n) {
                if (index < MAX_ARRAY_LENGTH) {
                    result[index] = iteratee(index);
                } else {
                    iteratee(index);
                }
            }
            return result;
        }
        function uniqueId(prefix) {
            var id = ++idCounter;
            return baseToString(prefix) + id;
        }
        LodashWrapper.prototype = lodash.prototype;
        MapCache.prototype["delete"] = mapDelete;
        MapCache.prototype.get = mapGet;
        MapCache.prototype.has = mapHas;
        MapCache.prototype.set = mapSet;
        SetCache.prototype.push = cachePush;
        memoize.Cache = MapCache;
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.callback = callback;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.filter = filter;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.functions = functions;
        lodash.groupBy = groupBy;
        lodash.indexBy = indexBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.invert = invert;
        lodash.invoke = invoke;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.omit = omit;
        lodash.once = once;
        lodash.pairs = pairs;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pluck = pluck;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortByAll = sortByAll;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.times = times;
        lodash.toArray = toArray;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.union = union;
        lodash.uniq = uniq;
        lodash.unzip = unzip;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.where = where;
        lodash.without = without;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.backflow = flowRight;
        lodash.collect = map;
        lodash.compose = flowRight;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.extend = assign;
        lodash.iteratee = callback;
        lodash.methods = functions;
        lodash.object = zipObject;
        lodash.select = filter;
        lodash.tail = rest;
        lodash.unique = uniq;
        mixin(lodash, lodash);
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.deburr = deburr;
        lodash.endsWith = endsWith;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.findWhere = findWhere;
        lodash.first = first;
        lodash.has = has;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isBoolean = isBoolean;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isMatch = isMatch;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isString = isString;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.max = max;
        lodash.min = min;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padLeft = padLeft;
        lodash.padRight = padRight;
        lodash.parseInt = parseInt;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.result = result;
        lodash.runInContext = runInContext;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.startsWith = startsWith;
        lodash.template = template;
        lodash.trim = trim;
        lodash.trimLeft = trimLeft;
        lodash.trimRight = trimRight;
        lodash.trunc = trunc;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.words = words;
        lodash.all = every;
        lodash.any = some;
        lodash.contains = includes;
        lodash.detect = find;
        lodash.foldl = reduce;
        lodash.foldr = reduceRight;
        lodash.head = first;
        lodash.include = includes;
        lodash.inject = reduce;
        mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
                if (!lodash.prototype[methodName]) {
                    source[methodName] = func;
                }
            });
            return source;
        }(), false);
        lodash.sample = sample;
        lodash.prototype.sample = function(n) {
            if (!this.__chain__ && n == null) {
                return sample(this.value());
            }
            return this.thru(function(value) {
                return sample(value, n);
            });
        };
        lodash.VERSION = VERSION;
        arrayEach([ "bind", "bindKey", "curry", "curryRight", "partial", "partialRight" ], function(methodName) {
            lodash[methodName].placeholder = lodash;
        });
        arrayEach([ "filter", "map", "takeWhile" ], function(methodName, index) {
            var isFilter = index == LAZY_FILTER_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
                var result = this.clone(), filtered = result.filtered, iteratees = result.iteratees || (result.iteratees = []);
                result.filtered = filtered || isFilter || index == LAZY_WHILE_FLAG && result.dir < 0;
                iteratees.push({
                    iteratee: getCallback(iteratee, thisArg, 3),
                    type: index
                });
                return result;
            };
        });
        arrayEach([ "drop", "take" ], function(methodName, index) {
            var countName = methodName + "Count", whileName = methodName + "While";
            LazyWrapper.prototype[methodName] = function(n) {
                n = n == null ? 1 : nativeMax(+n || 0, 0);
                var result = this.clone();
                if (result.filtered) {
                    var value = result[countName];
                    result[countName] = index ? nativeMin(value, n) : value + n;
                } else {
                    var views = result.views || (result.views = []);
                    views.push({
                        size: n,
                        type: methodName + (result.dir < 0 ? "Right" : "")
                    });
                }
                return result;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n) {
                return this.reverse()[methodName](n).reverse();
            };
            LazyWrapper.prototype[methodName + "RightWhile"] = function(predicate, thisArg) {
                return this.reverse()[whileName](predicate, thisArg).reverse();
            };
        });
        arrayEach([ "first", "last" ], function(methodName, index) {
            var takeName = "take" + (index ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
                return this[takeName](1).value()[0];
            };
        });
        arrayEach([ "initial", "rest" ], function(methodName, index) {
            var dropName = "drop" + (index ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
                return this[dropName](1);
            };
        });
        arrayEach([ "pluck", "where" ], function(methodName, index) {
            var operationName = index ? "filter" : "map", createCallback = index ? matches : property;
            LazyWrapper.prototype[methodName] = function(value) {
                return this[operationName](createCallback(value));
            };
        });
        LazyWrapper.prototype.dropWhile = function(iteratee, thisArg) {
            var done, lastIndex, isRight = this.dir < 0;
            iteratee = getCallback(iteratee, thisArg, 3);
            return this.filter(function(value, index, array) {
                done = done && (isRight ? index < lastIndex : index > lastIndex);
                lastIndex = index;
                return done || (done = !iteratee(value, index, array));
            });
        };
        LazyWrapper.prototype.reject = function(iteratee, thisArg) {
            iteratee = getCallback(iteratee, thisArg, 3);
            return this.filter(function(value, index, array) {
                return !iteratee(value, index, array);
            });
        };
        LazyWrapper.prototype.slice = function(start, end) {
            start = start == null ? 0 : +start || 0;
            var result = start < 0 ? this.takeRight(-start) : this.drop(start);
            if (typeof end != "undefined") {
                end = +end || 0;
                result = end < 0 ? result.dropRight(-end) : result.take(end - start);
            }
            return result;
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var retUnwrapped = /^(?:first|last)$/.test(methodName);
            lodash.prototype[methodName] = function() {
                var value = this.__wrapped__, args = arguments, chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isLazy = value instanceof LazyWrapper, onlyLazy = isLazy && !isHybrid;
                if (retUnwrapped && !chainAll) {
                    return onlyLazy ? func.call(value) : lodash[methodName](this.value());
                }
                var interceptor = function(value) {
                    var otherArgs = [ value ];
                    push.apply(otherArgs, args);
                    return lodash[methodName].apply(lodash, otherArgs);
                };
                if (isLazy || isArray(value)) {
                    var wrapper = onlyLazy ? value : new LazyWrapper(this), result = func.apply(wrapper, args);
                    if (!retUnwrapped && (isHybrid || result.actions)) {
                        var actions = result.actions || (result.actions = []);
                        actions.push({
                            func: thru,
                            args: [ interceptor ],
                            thisArg: lodash
                        });
                    }
                    return new LodashWrapper(result, chainAll);
                }
                return this.thru(interceptor);
            };
        });
        arrayEach([ "concat", "join", "pop", "push", "shift", "sort", "splice", "unshift" ], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:join|pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
                var args = arguments;
                if (retUnwrapped && !this.__chain__) {
                    return func.apply(this.value(), args);
                }
                return this[chainName](function(value) {
                    return func.apply(value, args);
                });
            };
        });
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toString = wrapperToString;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.collect = lodash.prototype.map;
        lodash.prototype.head = lodash.prototype.first;
        lodash.prototype.select = lodash.prototype.filter;
        lodash.prototype.tail = lodash.prototype.rest;
        return lodash;
    }
    var _ = runInContext();
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _;
        define(function() {
            return _;
        });
    } else if (freeExports && freeModule) {
        if (moduleExports) {
            (freeModule.exports = _)._ = _;
        } else {
            freeExports._ = _;
        }
    } else {
        root._ = _;
    }
}).call(this);

(function(root, factory) {
    if (typeof define === "function" && define.amd) {
        define([ "../../.", "jquery", "exports" ], function(_, $, exports) {
            root.Backbone = factory(root, exports, _, $);
        });
    } else if (typeof exports !== "undefined") {
        var _ = require("underscore");
        factory(root, exports, _);
    } else {
        root.Backbone = factory(root, {}, root._, root.jQuery || root.Zepto || root.ender || root.$);
    }
})(this, function(root, Backbone, _, $) {
    var previousBackbone = root.Backbone;
    var array = [];
    var push = array.push;
    var slice = array.slice;
    var splice = array.splice;
    Backbone.VERSION = "1.1.2";
    Backbone.$ = $;
    Backbone.noConflict = function() {
        root.Backbone = previousBackbone;
        return this;
    };
    Backbone.emulateHTTP = false;
    Backbone.emulateJSON = false;
    var Events = Backbone.Events = {
        on: function(name, callback, context) {
            if (!eventsApi(this, "on", name, [ callback, context ]) || !callback) return this;
            this._events || (this._events = {});
            var events = this._events[name] || (this._events[name] = []);
            events.push({
                callback: callback,
                context: context,
                ctx: context || this
            });
            return this;
        },
        once: function(name, callback, context) {
            if (!eventsApi(this, "once", name, [ callback, context ]) || !callback) return this;
            var self = this;
            var once = _.once(function() {
                self.off(name, once);
                callback.apply(this, arguments);
            });
            once._callback = callback;
            return this.on(name, once, context);
        },
        off: function(name, callback, context) {
            var retain, ev, events, names, i, l, j, k;
            if (!this._events || !eventsApi(this, "off", name, [ callback, context ])) return this;
            if (!name && !callback && !context) {
                this._events = void 0;
                return this;
            }
            names = name ? [ name ] : _.keys(this._events);
            for (i = 0, l = names.length; i < l; i++) {
                name = names[i];
                if (events = this._events[name]) {
                    this._events[name] = retain = [];
                    if (callback || context) {
                        for (j = 0, k = events.length; j < k; j++) {
                            ev = events[j];
                            if (callback && callback !== ev.callback && callback !== ev.callback._callback || context && context !== ev.context) {
                                retain.push(ev);
                            }
                        }
                    }
                    if (!retain.length) delete this._events[name];
                }
            }
            return this;
        },
        trigger: function(name) {
            if (!this._events) return this;
            var args = slice.call(arguments, 1);
            if (!eventsApi(this, "trigger", name, args)) return this;
            var events = this._events[name];
            var allEvents = this._events.all;
            if (events) triggerEvents(events, args);
            if (allEvents) triggerEvents(allEvents, arguments);
            return this;
        },
        stopListening: function(obj, name, callback) {
            var listeningTo = this._listeningTo;
            if (!listeningTo) return this;
            var remove = !name && !callback;
            if (!callback && typeof name === "object") callback = this;
            if (obj) (listeningTo = {})[obj._listenId] = obj;
            for (var id in listeningTo) {
                obj = listeningTo[id];
                obj.off(name, callback, this);
                if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];
            }
            return this;
        }
    };
    var eventSplitter = /\s+/;
    var eventsApi = function(obj, action, name, rest) {
        if (!name) return true;
        if (typeof name === "object") {
            for (var key in name) {
                obj[action].apply(obj, [ key, name[key] ].concat(rest));
            }
            return false;
        }
        if (eventSplitter.test(name)) {
            var names = name.split(eventSplitter);
            for (var i = 0, l = names.length; i < l; i++) {
                obj[action].apply(obj, [ names[i] ].concat(rest));
            }
            return false;
        }
        return true;
    };
    var triggerEvents = function(events, args) {
        var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
        switch (args.length) {
          case 0:
            while (++i < l) (ev = events[i]).callback.call(ev.ctx);
            return;

          case 1:
            while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1);
            return;

          case 2:
            while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2);
            return;

          case 3:
            while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
            return;

          default:
            while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);
            return;
        }
    };
    var listenMethods = {
        listenTo: "on",
        listenToOnce: "once"
    };
    _.each(listenMethods, function(implementation, method) {
        Events[method] = function(obj, name, callback) {
            var listeningTo = this._listeningTo || (this._listeningTo = {});
            var id = obj._listenId || (obj._listenId = _.uniqueId("l"));
            listeningTo[id] = obj;
            if (!callback && typeof name === "object") callback = this;
            obj[implementation](name, callback, this);
            return this;
        };
    });
    Events.bind = Events.on;
    Events.unbind = Events.off;
    _.extend(Backbone, Events);
    var Model = Backbone.Model = function(attributes, options) {
        var attrs = attributes || {};
        options || (options = {});
        this.cid = _.uniqueId("c");
        this.attributes = {};
        if (options.collection) this.collection = options.collection;
        if (options.parse) attrs = this.parse(attrs, options) || {};
        attrs = _.defaults({}, attrs, _.result(this, "defaults"));
        this.set(attrs, options);
        this.changed = {};
        this.initialize.apply(this, arguments);
    };
    _.extend(Model.prototype, Events, {
        changed: null,
        validationError: null,
        idAttribute: "id",
        initialize: function() {},
        toJSON: function(options) {
            return _.clone(this.attributes);
        },
        sync: function() {
            return Backbone.sync.apply(this, arguments);
        },
        get: function(attr) {
            return this.attributes[attr];
        },
        escape: function(attr) {
            return _.escape(this.get(attr));
        },
        has: function(attr) {
            return this.get(attr) != null;
        },
        set: function(key, val, options) {
            var attr, attrs, unset, changes, silent, changing, prev, current;
            if (key == null) return this;
            if (typeof key === "object") {
                attrs = key;
                options = val;
            } else {
                (attrs = {})[key] = val;
            }
            options || (options = {});
            if (!this._validate(attrs, options)) return false;
            unset = options.unset;
            silent = options.silent;
            changes = [];
            changing = this._changing;
            this._changing = true;
            if (!changing) {
                this._previousAttributes = _.clone(this.attributes);
                this.changed = {};
            }
            current = this.attributes, prev = this._previousAttributes;
            if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];
            for (attr in attrs) {
                val = attrs[attr];
                if (!_.isEqual(current[attr], val)) changes.push(attr);
                if (!_.isEqual(prev[attr], val)) {
                    this.changed[attr] = val;
                } else {
                    delete this.changed[attr];
                }
                unset ? delete current[attr] : current[attr] = val;
            }
            if (!silent) {
                if (changes.length) this._pending = options;
                for (var i = 0, l = changes.length; i < l; i++) {
                    this.trigger("change:" + changes[i], this, current[changes[i]], options);
                }
            }
            if (changing) return this;
            if (!silent) {
                while (this._pending) {
                    options = this._pending;
                    this._pending = false;
                    this.trigger("change", this, options);
                }
            }
            this._pending = false;
            this._changing = false;
            return this;
        },
        unset: function(attr, options) {
            return this.set(attr, void 0, _.extend({}, options, {
                unset: true
            }));
        },
        clear: function(options) {
            var attrs = {};
            for (var key in this.attributes) attrs[key] = void 0;
            return this.set(attrs, _.extend({}, options, {
                unset: true
            }));
        },
        hasChanged: function(attr) {
            if (attr == null) return !_.isEmpty(this.changed);
            return _.has(this.changed, attr);
        },
        changedAttributes: function(diff) {
            if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
            var val, changed = false;
            var old = this._changing ? this._previousAttributes : this.attributes;
            for (var attr in diff) {
                if (_.isEqual(old[attr], val = diff[attr])) continue;
                (changed || (changed = {}))[attr] = val;
            }
            return changed;
        },
        previous: function(attr) {
            if (attr == null || !this._previousAttributes) return null;
            return this._previousAttributes[attr];
        },
        previousAttributes: function() {
            return _.clone(this._previousAttributes);
        },
        fetch: function(options) {
            options = options ? _.clone(options) : {};
            if (options.parse === void 0) options.parse = true;
            var model = this;
            var success = options.success;
            options.success = function(resp) {
                if (!model.set(model.parse(resp, options), options)) return false;
                if (success) success(model, resp, options);
                model.trigger("sync", model, resp, options);
            };
            wrapError(this, options);
            return this.sync("read", this, options);
        },
        save: function(key, val, options) {
            var attrs, method, xhr, attributes = this.attributes;
            if (key == null || typeof key === "object") {
                attrs = key;
                options = val;
            } else {
                (attrs = {})[key] = val;
            }
            options = _.extend({
                validate: true
            }, options);
            if (attrs && !options.wait) {
                if (!this.set(attrs, options)) return false;
            } else {
                if (!this._validate(attrs, options)) return false;
            }
            if (attrs && options.wait) {
                this.attributes = _.extend({}, attributes, attrs);
            }
            if (options.parse === void 0) options.parse = true;
            var model = this;
            var success = options.success;
            options.success = function(resp) {
                model.attributes = attributes;
                var serverAttrs = model.parse(resp, options);
                if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
                if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
                    return false;
                }
                if (success) success(model, resp, options);
                model.trigger("sync", model, resp, options);
            };
            wrapError(this, options);
            method = this.isNew() ? "create" : options.patch ? "patch" : "update";
            if (method === "patch") options.attrs = attrs;
            xhr = this.sync(method, this, options);
            if (attrs && options.wait) this.attributes = attributes;
            return xhr;
        },
        destroy: function(options) {
            options = options ? _.clone(options) : {};
            var model = this;
            var success = options.success;
            var destroy = function() {
                model.trigger("destroy", model, model.collection, options);
            };
            options.success = function(resp) {
                if (options.wait || model.isNew()) destroy();
                if (success) success(model, resp, options);
                if (!model.isNew()) model.trigger("sync", model, resp, options);
            };
            if (this.isNew()) {
                options.success();
                return false;
            }
            wrapError(this, options);
            var xhr = this.sync("delete", this, options);
            if (!options.wait) destroy();
            return xhr;
        },
        url: function() {
            var base = _.result(this, "urlRoot") || _.result(this.collection, "url") || urlError();
            if (this.isNew()) return base;
            return base.replace(/([^\/])$/, "$1/") + encodeURIComponent(this.id);
        },
        parse: function(resp, options) {
            return resp;
        },
        clone: function() {
            return new this.constructor(this.attributes);
        },
        isNew: function() {
            return !this.has(this.idAttribute);
        },
        isValid: function(options) {
            return this._validate({}, _.extend(options || {}, {
                validate: true
            }));
        },
        _validate: function(attrs, options) {
            if (!options.validate || !this.validate) return true;
            attrs = _.extend({}, this.attributes, attrs);
            var error = this.validationError = this.validate(attrs, options) || null;
            if (!error) return true;
            this.trigger("invalid", this, error, _.extend(options, {
                validationError: error
            }));
            return false;
        }
    });
    var modelMethods = [ "keys", "values", "pairs", "invert", "pick", "omit" ];
    _.each(modelMethods, function(method) {
        Model.prototype[method] = function() {
            var args = slice.call(arguments);
            args.unshift(this.attributes);
            return _[method].apply(_, args);
        };
    });
    var Collection = Backbone.Collection = function(models, options) {
        options || (options = {});
        if (options.model) this.model = options.model;
        if (options.comparator !== void 0) this.comparator = options.comparator;
        this._reset();
        this.initialize.apply(this, arguments);
        if (models) this.reset(models, _.extend({
            silent: true
        }, options));
    };
    var setOptions = {
        add: true,
        remove: true,
        merge: true
    };
    var addOptions = {
        add: true,
        remove: false
    };
    _.extend(Collection.prototype, Events, {
        model: Model,
        initialize: function() {},
        toJSON: function(options) {
            return this.map(function(model) {
                return model.toJSON(options);
            });
        },
        sync: function() {
            return Backbone.sync.apply(this, arguments);
        },
        add: function(models, options) {
            return this.set(models, _.extend({
                merge: false
            }, options, addOptions));
        },
        remove: function(models, options) {
            var singular = !_.isArray(models);
            models = singular ? [ models ] : _.clone(models);
            options || (options = {});
            var i, l, index, model;
            for (i = 0, l = models.length; i < l; i++) {
                model = models[i] = this.get(models[i]);
                if (!model) continue;
                delete this._byId[model.id];
                delete this._byId[model.cid];
                index = this.indexOf(model);
                this.models.splice(index, 1);
                this.length--;
                if (!options.silent) {
                    options.index = index;
                    model.trigger("remove", model, this, options);
                }
                this._removeReference(model, options);
            }
            return singular ? models[0] : models;
        },
        set: function(models, options) {
            options = _.defaults({}, options, setOptions);
            if (options.parse) models = this.parse(models, options);
            var singular = !_.isArray(models);
            models = singular ? models ? [ models ] : [] : _.clone(models);
            var i, l, id, model, attrs, existing, sort;
            var at = options.at;
            var targetModel = this.model;
            var sortable = this.comparator && at == null && options.sort !== false;
            var sortAttr = _.isString(this.comparator) ? this.comparator : null;
            var toAdd = [], toRemove = [], modelMap = {};
            var add = options.add, merge = options.merge, remove = options.remove;
            var order = !sortable && add && remove ? [] : false;
            for (i = 0, l = models.length; i < l; i++) {
                attrs = models[i] || {};
                if (attrs instanceof Model) {
                    id = model = attrs;
                } else {
                    id = attrs[targetModel.prototype.idAttribute || "id"];
                }
                if (existing = this.get(id)) {
                    if (remove) modelMap[existing.cid] = true;
                    if (merge) {
                        attrs = attrs === model ? model.attributes : attrs;
                        if (options.parse) attrs = existing.parse(attrs, options);
                        existing.set(attrs, options);
                        if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
                    }
                    models[i] = existing;
                } else if (add) {
                    model = models[i] = this._prepareModel(attrs, options);
                    if (!model) continue;
                    toAdd.push(model);
                    this._addReference(model, options);
                }
                model = existing || model;
                if (order && (model.isNew() || !modelMap[model.id])) order.push(model);
                modelMap[model.id] = true;
            }
            if (remove) {
                for (i = 0, l = this.length; i < l; ++i) {
                    if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
                }
                if (toRemove.length) this.remove(toRemove, options);
            }
            if (toAdd.length || order && order.length) {
                if (sortable) sort = true;
                this.length += toAdd.length;
                if (at != null) {
                    for (i = 0, l = toAdd.length; i < l; i++) {
                        this.models.splice(at + i, 0, toAdd[i]);
                    }
                } else {
                    if (order) this.models.length = 0;
                    var orderedModels = order || toAdd;
                    for (i = 0, l = orderedModels.length; i < l; i++) {
                        this.models.push(orderedModels[i]);
                    }
                }
            }
            if (sort) this.sort({
                silent: true
            });
            if (!options.silent) {
                for (i = 0, l = toAdd.length; i < l; i++) {
                    (model = toAdd[i]).trigger("add", model, this, options);
                }
                if (sort || order && order.length) this.trigger("sort", this, options);
            }
            return singular ? models[0] : models;
        },
        reset: function(models, options) {
            options || (options = {});
            for (var i = 0, l = this.models.length; i < l; i++) {
                this._removeReference(this.models[i], options);
            }
            options.previousModels = this.models;
            this._reset();
            models = this.add(models, _.extend({
                silent: true
            }, options));
            if (!options.silent) this.trigger("reset", this, options);
            return models;
        },
        push: function(model, options) {
            return this.add(model, _.extend({
                at: this.length
            }, options));
        },
        pop: function(options) {
            var model = this.at(this.length - 1);
            this.remove(model, options);
            return model;
        },
        unshift: function(model, options) {
            return this.add(model, _.extend({
                at: 0
            }, options));
        },
        shift: function(options) {
            var model = this.at(0);
            this.remove(model, options);
            return model;
        },
        slice: function() {
            return slice.apply(this.models, arguments);
        },
        get: function(obj) {
            if (obj == null) return void 0;
            return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];
        },
        at: function(index) {
            return this.models[index];
        },
        where: function(attrs, first) {
            if (_.isEmpty(attrs)) return first ? void 0 : [];
            return this[first ? "find" : "filter"](function(model) {
                for (var key in attrs) {
                    if (attrs[key] !== model.get(key)) return false;
                }
                return true;
            });
        },
        findWhere: function(attrs) {
            return this.where(attrs, true);
        },
        sort: function(options) {
            if (!this.comparator) throw new Error("Cannot sort a set without a comparator");
            options || (options = {});
            if (_.isString(this.comparator) || this.comparator.length === 1) {
                this.models = this.sortBy(this.comparator, this);
            } else {
                this.models.sort(_.bind(this.comparator, this));
            }
            if (!options.silent) this.trigger("sort", this, options);
            return this;
        },
        pluck: function(attr) {
            return _.invoke(this.models, "get", attr);
        },
        fetch: function(options) {
            options = options ? _.clone(options) : {};
            if (options.parse === void 0) options.parse = true;
            var success = options.success;
            var collection = this;
            options.success = function(resp) {
                var method = options.reset ? "reset" : "set";
                collection[method](resp, options);
                if (success) success(collection, resp, options);
                collection.trigger("sync", collection, resp, options);
            };
            wrapError(this, options);
            return this.sync("read", this, options);
        },
        create: function(model, options) {
            options = options ? _.clone(options) : {};
            if (!(model = this._prepareModel(model, options))) return false;
            if (!options.wait) this.add(model, options);
            var collection = this;
            var success = options.success;
            options.success = function(model, resp) {
                if (options.wait) collection.add(model, options);
                if (success) success(model, resp, options);
            };
            model.save(null, options);
            return model;
        },
        parse: function(resp, options) {
            return resp;
        },
        clone: function() {
            return new this.constructor(this.models);
        },
        _reset: function() {
            this.length = 0;
            this.models = [];
            this._byId = {};
        },
        _prepareModel: function(attrs, options) {
            if (attrs instanceof Model) return attrs;
            options = options ? _.clone(options) : {};
            options.collection = this;
            var model = new this.model(attrs, options);
            if (!model.validationError) return model;
            this.trigger("invalid", this, model.validationError, options);
            return false;
        },
        _addReference: function(model, options) {
            this._byId[model.cid] = model;
            if (model.id != null) this._byId[model.id] = model;
            if (!model.collection) model.collection = this;
            model.on("all", this._onModelEvent, this);
        },
        _removeReference: function(model, options) {
            if (this === model.collection) delete model.collection;
            model.off("all", this._onModelEvent, this);
        },
        _onModelEvent: function(event, model, collection, options) {
            if ((event === "add" || event === "remove") && collection !== this) return;
            if (event === "destroy") this.remove(model, options);
            if (model && event === "change:" + model.idAttribute) {
                delete this._byId[model.previous(model.idAttribute)];
                if (model.id != null) this._byId[model.id] = model;
            }
            this.trigger.apply(this, arguments);
        }
    });
    var methods = [ "forEach", "each", "map", "collect", "reduce", "foldl", "inject", "reduceRight", "foldr", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "max", "min", "toArray", "size", "first", "head", "take", "initial", "rest", "tail", "drop", "last", "without", "difference", "indexOf", "shuffle", "lastIndexOf", "isEmpty", "chain", "sample" ];
    _.each(methods, function(method) {
        Collection.prototype[method] = function() {
            var args = slice.call(arguments);
            args.unshift(this.models);
            return _[method].apply(_, args);
        };
    });
    var attributeMethods = [ "groupBy", "countBy", "sortBy", "indexBy" ];
    _.each(attributeMethods, function(method) {
        Collection.prototype[method] = function(value, context) {
            var iterator = _.isFunction(value) ? value : function(model) {
                return model.get(value);
            };
            return _[method](this.models, iterator, context);
        };
    });
    var View = Backbone.View = function(options) {
        this.cid = _.uniqueId("view");
        options || (options = {});
        _.extend(this, _.pick(options, viewOptions));
        this._ensureElement();
        this.initialize.apply(this, arguments);
        this.delegateEvents();
    };
    var delegateEventSplitter = /^(\S+)\s*(.*)$/;
    var viewOptions = [ "model", "collection", "el", "id", "attributes", "className", "tagName", "events" ];
    _.extend(View.prototype, Events, {
        tagName: "div",
        $: function(selector) {
            return this.$el.find(selector);
        },
        initialize: function() {},
        render: function() {
            return this;
        },
        remove: function() {
            this.$el.remove();
            this.stopListening();
            return this;
        },
        setElement: function(element, delegate) {
            if (this.$el) this.undelegateEvents();
            this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
            this.el = this.$el[0];
            if (delegate !== false) this.delegateEvents();
            return this;
        },
        delegateEvents: function(events) {
            if (!(events || (events = _.result(this, "events")))) return this;
            this.undelegateEvents();
            for (var key in events) {
                var method = events[key];
                if (!_.isFunction(method)) method = this[events[key]];
                if (!method) continue;
                var match = key.match(delegateEventSplitter);
                var eventName = match[1], selector = match[2];
                method = _.bind(method, this);
                eventName += ".delegateEvents" + this.cid;
                if (selector === "") {
                    this.$el.on(eventName, method);
                } else {
                    this.$el.on(eventName, selector, method);
                }
            }
            return this;
        },
        undelegateEvents: function() {
            this.$el.off(".delegateEvents" + this.cid);
            return this;
        },
        _ensureElement: function() {
            if (!this.el) {
                var attrs = _.extend({}, _.result(this, "attributes"));
                if (this.id) attrs.id = _.result(this, "id");
                if (this.className) attrs["class"] = _.result(this, "className");
                var $el = Backbone.$("<" + _.result(this, "tagName") + ">").attr(attrs);
                this.setElement($el, false);
            } else {
                this.setElement(_.result(this, "el"), false);
            }
        }
    });
    Backbone.sync = function(method, model, options) {
        var type = methodMap[method];
        _.defaults(options || (options = {}), {
            emulateHTTP: Backbone.emulateHTTP,
            emulateJSON: Backbone.emulateJSON
        });
        var params = {
            type: type,
            dataType: "json"
        };
        if (!options.url) {
            params.url = _.result(model, "url") || urlError();
        }
        if (options.data == null && model && (method === "create" || method === "update" || method === "patch")) {
            params.contentType = "application/json";
            params.data = JSON.stringify(options.attrs || model.toJSON(options));
        }
        if (options.emulateJSON) {
            params.contentType = "application/x-www-form-urlencoded";
            params.data = params.data ? {
                model: params.data
            } : {};
        }
        if (options.emulateHTTP && (type === "PUT" || type === "DELETE" || type === "PATCH")) {
            params.type = "POST";
            if (options.emulateJSON) params.data._method = type;
            var beforeSend = options.beforeSend;
            options.beforeSend = function(xhr) {
                xhr.setRequestHeader("X-HTTP-Method-Override", type);
                if (beforeSend) return beforeSend.apply(this, arguments);
            };
        }
        if (params.type !== "GET" && !options.emulateJSON) {
            params.processData = false;
        }
        if (params.type === "PATCH" && noXhrPatch) {
            params.xhr = function() {
                return new ActiveXObject("Microsoft.XMLHTTP");
            };
        }
        var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
        model.trigger("request", model, xhr, options);
        return xhr;
    };
    var noXhrPatch = typeof window !== "undefined" && !!window.ActiveXObject && !(window.XMLHttpRequest && new XMLHttpRequest().dispatchEvent);
    var methodMap = {
        create: "POST",
        update: "PUT",
        patch: "PATCH",
        "delete": "DELETE",
        read: "GET"
    };
    Backbone.ajax = function() {
        return Backbone.$.ajax.apply(Backbone.$, arguments);
    };
    var Router = Backbone.Router = function(options) {
        options || (options = {});
        if (options.routes) this.routes = options.routes;
        this._bindRoutes();
        this.initialize.apply(this, arguments);
    };
    var optionalParam = /\((.*?)\)/g;
    var namedParam = /(\(\?)?:\w+/g;
    var splatParam = /\*\w+/g;
    var escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;
    _.extend(Router.prototype, Events, {
        initialize: function() {},
        route: function(route, name, callback) {
            if (!_.isRegExp(route)) route = this._routeToRegExp(route);
            if (_.isFunction(name)) {
                callback = name;
                name = "";
            }
            if (!callback) callback = this[name];
            var router = this;
            Backbone.history.route(route, function(fragment) {
                var args = router._extractParameters(route, fragment);
                router.execute(callback, args);
                router.trigger.apply(router, [ "route:" + name ].concat(args));
                router.trigger("route", name, args);
                Backbone.history.trigger("route", router, name, args);
            });
            return this;
        },
        execute: function(callback, args) {
            if (callback) callback.apply(this, args);
        },
        navigate: function(fragment, options) {
            Backbone.history.navigate(fragment, options);
            return this;
        },
        _bindRoutes: function() {
            if (!this.routes) return;
            this.routes = _.result(this, "routes");
            var route, routes = _.keys(this.routes);
            while ((route = routes.pop()) != null) {
                this.route(route, this.routes[route]);
            }
        },
        _routeToRegExp: function(route) {
            route = route.replace(escapeRegExp, "\\$&").replace(optionalParam, "(?:$1)?").replace(namedParam, function(match, optional) {
                return optional ? match : "([^/?]+)";
            }).replace(splatParam, "([^?]*?)");
            return new RegExp("^" + route + "(?:\\?([\\s\\S]*))?$");
        },
        _extractParameters: function(route, fragment) {
            var params = route.exec(fragment).slice(1);
            return _.map(params, function(param, i) {
                if (i === params.length - 1) return param || null;
                return param ? decodeURIComponent(param) : null;
            });
        }
    });
    var History = Backbone.History = function() {
        this.handlers = [];
        _.bindAll(this, "checkUrl");
        if (typeof window !== "undefined") {
            this.location = window.location;
            this.history = window.history;
        }
    };
    var routeStripper = /^[#\/]|\s+$/g;
    var rootStripper = /^\/+|\/+$/g;
    var isExplorer = /msie [\w.]+/;
    var trailingSlash = /\/$/;
    var pathStripper = /#.*$/;
    History.started = false;
    _.extend(History.prototype, Events, {
        interval: 50,
        atRoot: function() {
            return this.location.pathname.replace(/[^\/]$/, "$&/") === this.root;
        },
        getHash: function(window) {
            var match = (window || this).location.href.match(/#(.*)$/);
            return match ? match[1] : "";
        },
        getFragment: function(fragment, forcePushState) {
            if (fragment == null) {
                if (this._hasPushState || !this._wantsHashChange || forcePushState) {
                    fragment = decodeURI(this.location.pathname + this.location.search);
                    var root = this.root.replace(trailingSlash, "");
                    if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);
                } else {
                    fragment = this.getHash();
                }
            }
            return fragment.replace(routeStripper, "");
        },
        start: function(options) {
            if (History.started) throw new Error("Backbone.history has already been started");
            History.started = true;
            this.options = _.extend({
                root: "/"
            }, this.options, options);
            this.root = this.options.root;
            this._wantsHashChange = this.options.hashChange !== false;
            this._wantsPushState = !!this.options.pushState;
            this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState);
            var fragment = this.getFragment();
            var docMode = document.documentMode;
            var oldIE = isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7);
            this.root = ("/" + this.root + "/").replace(rootStripper, "/");
            if (oldIE && this._wantsHashChange) {
                var frame = Backbone.$('<iframe src="javascript:0" tabindex="-1">');
                this.iframe = frame.hide().appendTo("body")[0].contentWindow;
                this.navigate(fragment);
            }
            if (this._hasPushState) {
                Backbone.$(window).on("popstate", this.checkUrl);
            } else if (this._wantsHashChange && "onhashchange" in window && !oldIE) {
                Backbone.$(window).on("hashchange", this.checkUrl);
            } else if (this._wantsHashChange) {
                this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
            }
            this.fragment = fragment;
            var loc = this.location;
            if (this._wantsHashChange && this._wantsPushState) {
                if (!this._hasPushState && !this.atRoot()) {
                    this.fragment = this.getFragment(null, true);
                    this.location.replace(this.root + "#" + this.fragment);
                    return true;
                } else if (this._hasPushState && this.atRoot() && loc.hash) {
                    this.fragment = this.getHash().replace(routeStripper, "");
                    this.history.replaceState({}, document.title, this.root + this.fragment);
                }
            }
            if (!this.options.silent) return this.loadUrl();
        },
        stop: function() {
            Backbone.$(window).off("popstate", this.checkUrl).off("hashchange", this.checkUrl);
            if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
            History.started = false;
        },
        route: function(route, callback) {
            this.handlers.unshift({
                route: route,
                callback: callback
            });
        },
        checkUrl: function(e) {
            var current = this.getFragment();
            if (current === this.fragment && this.iframe) {
                current = this.getFragment(this.getHash(this.iframe));
            }
            if (current === this.fragment) return false;
            if (this.iframe) this.navigate(current);
            this.loadUrl();
        },
        loadUrl: function(fragment) {
            fragment = this.fragment = this.getFragment(fragment);
            return _.any(this.handlers, function(handler) {
                if (handler.route.test(fragment)) {
                    handler.callback(fragment);
                    return true;
                }
            });
        },
        navigate: function(fragment, options) {
            if (!History.started) return false;
            if (!options || options === true) options = {
                trigger: !!options
            };
            var url = this.root + (fragment = this.getFragment(fragment || ""));
            fragment = fragment.replace(pathStripper, "");
            if (this.fragment === fragment) return;
            this.fragment = fragment;
            if (fragment === "" && url !== "/") url = url.slice(0, -1);
            if (this._hasPushState) {
                this.history[options.replace ? "replaceState" : "pushState"]({}, document.title, url);
            } else if (this._wantsHashChange) {
                this._updateHash(this.location, fragment, options.replace);
                if (this.iframe && fragment !== this.getFragment(this.getHash(this.iframe))) {
                    if (!options.replace) this.iframe.document.open().close();
                    this._updateHash(this.iframe.location, fragment, options.replace);
                }
            } else {
                return this.location.assign(url);
            }
            if (options.trigger) return this.loadUrl(fragment);
        },
        _updateHash: function(location, fragment, replace) {
            if (replace) {
                var href = location.href.replace(/(javascript:|#).*$/, "");
                location.replace(href + "#" + fragment);
            } else {
                location.hash = "#" + fragment;
            }
        }
    });
    Backbone.history = new History();
    var extend = function(protoProps, staticProps) {
        var parent = this;
        var child;
        if (protoProps && _.has(protoProps, "constructor")) {
            child = protoProps.constructor;
        } else {
            child = function() {
                return parent.apply(this, arguments);
            };
        }
        _.extend(child, parent, staticProps);
        var Surrogate = function() {
            this.constructor = child;
        };
        Surrogate.prototype = parent.prototype;
        child.prototype = new Surrogate();
        if (protoProps) _.extend(child.prototype, protoProps);
        child.__super__ = parent.prototype;
        return child;
    };
    Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;
    var urlError = function() {
        throw new Error('A "url" property or function must be specified');
    };
    var wrapError = function(model, options) {
        var error = options.error;
        options.error = function(resp) {
            if (error) error(model, resp, options);
            model.trigger("error", model, resp, options);
        };
    };
    return Backbone;
});

if (typeof JSON !== "object") {
    JSON = {};
}

(function() {
    "use strict";
    function f(n) {
        return n < 10 ? "0" + n : n;
    }
    if (typeof Date.prototype.toJSON !== "function") {
        Date.prototype.toJSON = function() {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null;
        };
        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function() {
            return this.valueOf();
        };
    }
    var cx, escapable, gap, indent, meta, rep;
    function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
            var c = meta[a];
            return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }
    function str(key, holder) {
        var i, k, v, length, mind = gap, partial, value = holder[key];
        if (value && typeof value === "object" && typeof value.toJSON === "function") {
            value = value.toJSON(key);
        }
        if (typeof rep === "function") {
            value = rep.call(holder, key, value);
        }
        switch (typeof value) {
          case "string":
            return quote(value);

          case "number":
            return isFinite(value) ? String(value) : "null";

          case "boolean":
          case "null":
            return String(value);

          case "object":
            if (!value) {
                return "null";
            }
            gap += indent;
            partial = [];
            if (Object.prototype.toString.apply(value) === "[object Array]") {
                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || "null";
                }
                v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                gap = mind;
                return v;
            }
            if (rep && typeof rep === "object") {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === "string") {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ": " : ":") + v);
                        }
                    }
                }
            } else {
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ": " : ":") + v);
                        }
                    }
                }
            }
            v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
            gap = mind;
            return v;
        }
    }
    if (typeof JSON.stringify !== "function") {
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        meta = {
            "\b": "\\b",
            "	": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            '"': '\\"',
            "\\": "\\\\"
        };
        JSON.stringify = function(value, replacer, space) {
            var i;
            gap = "";
            indent = "";
            if (typeof space === "number") {
                for (i = 0; i < space; i += 1) {
                    indent += " ";
                }
            } else if (typeof space === "string") {
                indent = space;
            }
            rep = replacer;
            if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
                throw new Error("JSON.stringify");
            }
            return str("", {
                "": value
            });
        };
    }
    if (typeof JSON.parse !== "function") {
        cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        JSON.parse = function(text, reviver) {
            var j;
            function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === "object") {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }
            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function(a) {
                    return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }
            if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
                j = eval("(" + text + ")");
                return typeof reviver === "function" ? walk({
                    "": j
                }, "") : j;
            }
            throw new SyntaxError("JSON.parse");
        };
    }
})();

(function(factory) {
    if (typeof require === "function" && typeof module !== "undefined" && module.exports) {
        module.exports = factory(require("underscore"));
    } else if (typeof define === "function") {
        define([ "underscore" ], factory);
    } else {
        this.Cocktail = factory(_);
    }
})(function(_) {
    var Cocktail = {};
    Cocktail.mixins = {};
    Cocktail.mixin = function mixin(klass) {
        var mixins = _.chain(arguments).toArray().rest().flatten().value();
        var obj = klass.prototype || klass;
        var collisions = {};
        _.each(mixins, function(mixin) {
            if (_.isString(mixin)) {
                mixin = Cocktail.mixins[mixin];
            }
            _.each(mixin, function(value, key) {
                if (_.isFunction(value)) {
                    if (obj[key] === value) return;
                    if (obj[key]) {
                        collisions[key] = collisions.hasOwnProperty(key) ? collisions[key] : [ obj[key] ];
                        collisions[key].push(value);
                    }
                    obj[key] = value;
                } else if (_.isArray(value)) {
                    obj[key] = _.union(value, obj[key] || []);
                } else if (_.isObject(value)) {
                    obj[key] = _.extend({}, value, obj[key] || {});
                } else if (!(key in obj)) {
                    obj[key] = value;
                }
            });
        });
        _.each(collisions, function(propertyValues, propertyName) {
            obj[propertyName] = function() {
                var that = this, args = arguments, returnValue;
                _.each(propertyValues, function(value) {
                    var returnedValue = _.isFunction(value) ? value.apply(that, args) : value;
                    returnValue = typeof returnedValue === "undefined" ? returnValue : returnedValue;
                });
                return returnValue;
            };
        });
        return klass;
    };
    var originalExtend;
    Cocktail.patch = function patch(Backbone) {
        originalExtend = Backbone.Model.extend;
        var extend = function(protoProps, classProps) {
            var klass = originalExtend.call(this, protoProps, classProps);
            var mixins = klass.prototype.mixins;
            if (mixins && klass.prototype.hasOwnProperty("mixins")) {
                Cocktail.mixin(klass, mixins);
            }
            return klass;
        };
        _.each([ Backbone.Model, Backbone.Collection, Backbone.Router, Backbone.View ], function(klass) {
            klass.mixin = function mixin() {
                Cocktail.mixin(this, _.toArray(arguments));
            };
            klass.extend = extend;
        });
    };
    Cocktail.unpatch = function unpatch(Backbone) {
        _.each([ Backbone.Model, Backbone.Collection, Backbone.Router, Backbone.View ], function(klass) {
            klass.mixin = undefined;
            klass.extend = originalExtend;
        });
    };
    return Cocktail;
});

(function(root, factory) {
    if (typeof define === "function" && define.amd) {
        define([ "backbone", "underscore" ], function(Backbone, _) {
            return factory(Backbone, _);
        });
    } else if (typeof exports !== "undefined") {
        var Backbone = require("backbone");
        var _ = require("underscore");
        module.exports = factory(Backbone, _);
    } else {
        factory(root.Backbone, root._);
    }
})(this, function(Backbone, _) {
    "use strict";
    var previousChildViewContainer = Backbone.ChildViewContainer;
    Backbone.ChildViewContainer = function(Backbone, _) {
        var Container = function(views) {
            this._views = {};
            this._indexByModel = {};
            this._indexByCustom = {};
            this._updateLength();
            _.each(views, this.add, this);
        };
        _.extend(Container.prototype, {
            add: function(view, customIndex) {
                var viewCid = view.cid;
                this._views[viewCid] = view;
                if (view.model) {
                    this._indexByModel[view.model.cid] = viewCid;
                }
                if (customIndex) {
                    this._indexByCustom[customIndex] = viewCid;
                }
                this._updateLength();
                return this;
            },
            findByModel: function(model) {
                return this.findByModelCid(model.cid);
            },
            findByModelCid: function(modelCid) {
                var viewCid = this._indexByModel[modelCid];
                return this.findByCid(viewCid);
            },
            findByCustom: function(index) {
                var viewCid = this._indexByCustom[index];
                return this.findByCid(viewCid);
            },
            findByIndex: function(index) {
                return _.values(this._views)[index];
            },
            findByCid: function(cid) {
                return this._views[cid];
            },
            remove: function(view) {
                var viewCid = view.cid;
                if (view.model) {
                    delete this._indexByModel[view.model.cid];
                }
                _.any(this._indexByCustom, function(cid, key) {
                    if (cid === viewCid) {
                        delete this._indexByCustom[key];
                        return true;
                    }
                }, this);
                delete this._views[viewCid];
                this._updateLength();
                return this;
            },
            call: function(method) {
                this.apply(method, _.tail(arguments));
            },
            apply: function(method, args) {
                _.each(this._views, function(view) {
                    if (_.isFunction(view[method])) {
                        view[method].apply(view, args || []);
                    }
                });
            },
            _updateLength: function() {
                this.length = _.size(this._views);
            }
        });
        var methods = [ "forEach", "each", "map", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "toArray", "first", "initial", "rest", "last", "without", "isEmpty", "pluck", "reduce" ];
        _.each(methods, function(method) {
            Container.prototype[method] = function() {
                var views = _.values(this._views);
                var args = [ views ].concat(_.toArray(arguments));
                return _[method].apply(_, args);
            };
        });
        return Container;
    }(Backbone, _);
    Backbone.ChildViewContainer.VERSION = "0.1.6";
    Backbone.ChildViewContainer.noConflict = function() {
        Backbone.ChildViewContainer = previousChildViewContainer;
        return this;
    };
    return Backbone.ChildViewContainer;
});

(function(root, factory) {
    if (typeof exports === "object" && typeof require === "function") {
        module.exports = factory(require("backbone"));
    } else if (typeof define === "function" && define.amd) {
        define([ "backbone" ], function(Backbone) {
            return factory(Backbone || root.Backbone);
        });
    } else {
        factory(Backbone);
    }
})(this, function(Backbone) {
    function S4() {
        return ((1 + Math.random()) * 65536 | 0).toString(16).substring(1);
    }
    function guid() {
        return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
    }
    function isObject(item) {
        return item === Object(item);
    }
    function contains(array, item) {
        var i = array.length;
        while (i--) if (array[i] === item) return true;
        return false;
    }
    function extend(obj, props) {
        for (var key in props) obj[key] = props[key];
        return obj;
    }
    function result(object, property) {
        if (object == null) return void 0;
        var value = object[property];
        return typeof value === "function" ? object[property]() : value;
    }
    Backbone.LocalStorage = window.Store = function(name, serializer) {
        if (!this.localStorage) {
            throw "Backbone.localStorage: Environment does not support localStorage.";
        }
        this.name = name;
        this.serializer = serializer || {
            serialize: function(item) {
                return isObject(item) ? JSON.stringify(item) : item;
            },
            deserialize: function(data) {
                return data && JSON.parse(data);
            }
        };
        var store = this.localStorage().getItem(this.name);
        this.records = store && store.split(",") || [];
    };
    extend(Backbone.LocalStorage.prototype, {
        save: function() {
            this.localStorage().setItem(this.name, this.records.join(","));
        },
        create: function(model) {
            if (!model.id && model.id !== 0) {
                model.id = guid();
                model.set(model.idAttribute, model.id);
            }
            this.localStorage().setItem(this._itemName(model.id), this.serializer.serialize(model));
            this.records.push(model.id.toString());
            this.save();
            return this.find(model);
        },
        update: function(model) {
            this.localStorage().setItem(this._itemName(model.id), this.serializer.serialize(model));
            var modelId = model.id.toString();
            if (!contains(this.records, modelId)) {
                this.records.push(modelId);
                this.save();
            }
            return this.find(model);
        },
        find: function(model) {
            return this.serializer.deserialize(this.localStorage().getItem(this._itemName(model.id)));
        },
        findAll: function() {
            var result = [];
            for (var i = 0, id, data; i < this.records.length; i++) {
                id = this.records[i];
                data = this.serializer.deserialize(this.localStorage().getItem(this._itemName(id)));
                if (data != null) result.push(data);
            }
            return result;
        },
        destroy: function(model) {
            this.localStorage().removeItem(this._itemName(model.id));
            var modelId = model.id.toString();
            for (var i = 0, id; i < this.records.length; i++) {
                if (this.records[i] === modelId) {
                    this.records.splice(i, 1);
                }
            }
            this.save();
            return model;
        },
        localStorage: function() {
            return localStorage;
        },
        _clear: function() {
            var local = this.localStorage(), itemRe = new RegExp("^" + this.name + "-");
            local.removeItem(this.name);
            for (var k in local) {
                if (itemRe.test(k)) {
                    local.removeItem(k);
                }
            }
            this.records.length = 0;
        },
        _storageSize: function() {
            return this.localStorage().length;
        },
        _itemName: function(id) {
            return this.name + "-" + id;
        }
    });
    Backbone.LocalStorage.sync = window.Store.sync = Backbone.localSync = function(method, model, options) {
        var store = result(model, "localStorage") || result(model.collection, "localStorage");
        var resp, errorMessage;
        var syncDfd = Backbone.$ ? Backbone.$.Deferred && Backbone.$.Deferred() : Backbone.Deferred && Backbone.Deferred();
        try {
            switch (method) {
              case "read":
                resp = model.id != undefined ? store.find(model) : store.findAll();
                break;

              case "create":
                resp = store.create(model);
                break;

              case "update":
                resp = store.update(model);
                break;

              case "delete":
                resp = store.destroy(model);
                break;
            }
        } catch (error) {
            if (error.code === 22 && store._storageSize() === 0) errorMessage = "Private browsing is unsupported"; else errorMessage = error.message;
        }
        if (resp) {
            if (options && options.success) {
                if (Backbone.VERSION === "0.9.10") {
                    options.success(model, resp, options);
                } else {
                    options.success(resp);
                }
            }
            if (syncDfd) {
                syncDfd.resolve(resp);
            }
        } else {
            errorMessage = errorMessage ? errorMessage : "Record Not Found";
            if (options && options.error) if (Backbone.VERSION === "0.9.10") {
                options.error(model, errorMessage, options);
            } else {
                options.error(errorMessage);
            }
            if (syncDfd) syncDfd.reject(errorMessage);
        }
        if (options && options.complete) options.complete(resp);
        return syncDfd && syncDfd.promise();
    };
    Backbone.ajaxSync = Backbone.sync;
    Backbone.getSyncMethod = function(model, options) {
        var forceAjaxSync = options && options.ajaxSync;
        if (!forceAjaxSync && (result(model, "localStorage") || result(model.collection, "localStorage"))) {
            return Backbone.localSync;
        }
        return Backbone.ajaxSync;
    };
    Backbone.sync = function(method, model, options) {
        return Backbone.getSyncMethod(model, options).apply(this, [ method, model, options ]);
    };
    return Backbone.LocalStorage;
});

(function(root, factory) {
    if (typeof define === "function" && define.amd) {
        define([ "backbone", "underscore" ], function(Backbone, _) {
            return root.Marionette = root.Mn = factory(root, Backbone, _);
        });
    } else if (typeof exports !== "undefined") {
        var Backbone = require("backbone");
        var _ = require("underscore");
        module.exports = factory(root, Backbone, _);
    } else {
        root.Marionette = root.Mn = factory(root, root.Backbone, root._);
    }
})(this, function(root, Backbone, _) {
    "use strict";
    (function(Backbone, _) {
        "use strict";
        var previousChildViewContainer = Backbone.ChildViewContainer;
        Backbone.ChildViewContainer = function(Backbone, _) {
            var Container = function(views) {
                this._views = {};
                this._indexByModel = {};
                this._indexByCustom = {};
                this._updateLength();
                _.each(views, this.add, this);
            };
            _.extend(Container.prototype, {
                add: function(view, customIndex) {
                    var viewCid = view.cid;
                    this._views[viewCid] = view;
                    if (view.model) {
                        this._indexByModel[view.model.cid] = viewCid;
                    }
                    if (customIndex) {
                        this._indexByCustom[customIndex] = viewCid;
                    }
                    this._updateLength();
                    return this;
                },
                findByModel: function(model) {
                    return this.findByModelCid(model.cid);
                },
                findByModelCid: function(modelCid) {
                    var viewCid = this._indexByModel[modelCid];
                    return this.findByCid(viewCid);
                },
                findByCustom: function(index) {
                    var viewCid = this._indexByCustom[index];
                    return this.findByCid(viewCid);
                },
                findByIndex: function(index) {
                    return _.values(this._views)[index];
                },
                findByCid: function(cid) {
                    return this._views[cid];
                },
                remove: function(view) {
                    var viewCid = view.cid;
                    if (view.model) {
                        delete this._indexByModel[view.model.cid];
                    }
                    _.any(this._indexByCustom, function(cid, key) {
                        if (cid === viewCid) {
                            delete this._indexByCustom[key];
                            return true;
                        }
                    }, this);
                    delete this._views[viewCid];
                    this._updateLength();
                    return this;
                },
                call: function(method) {
                    this.apply(method, _.tail(arguments));
                },
                apply: function(method, args) {
                    _.each(this._views, function(view) {
                        if (_.isFunction(view[method])) {
                            view[method].apply(view, args || []);
                        }
                    });
                },
                _updateLength: function() {
                    this.length = _.size(this._views);
                }
            });
            var methods = [ "forEach", "each", "map", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "toArray", "first", "initial", "rest", "last", "without", "isEmpty", "pluck" ];
            _.each(methods, function(method) {
                Container.prototype[method] = function() {
                    var views = _.values(this._views);
                    var args = [ views ].concat(_.toArray(arguments));
                    return _[method].apply(_, args);
                };
            });
            return Container;
        }(Backbone, _);
        Backbone.ChildViewContainer.VERSION = "0.1.5";
        Backbone.ChildViewContainer.noConflict = function() {
            Backbone.ChildViewContainer = previousChildViewContainer;
            return this;
        };
        return Backbone.ChildViewContainer;
    })(Backbone, _);
    (function(Backbone, _) {
        "use strict";
        var previousWreqr = Backbone.Wreqr;
        var Wreqr = Backbone.Wreqr = {};
        Backbone.Wreqr.VERSION = "1.3.1";
        Backbone.Wreqr.noConflict = function() {
            Backbone.Wreqr = previousWreqr;
            return this;
        };
        Wreqr.Handlers = function(Backbone, _) {
            "use strict";
            var Handlers = function(options) {
                this.options = options;
                this._wreqrHandlers = {};
                if (_.isFunction(this.initialize)) {
                    this.initialize(options);
                }
            };
            Handlers.extend = Backbone.Model.extend;
            _.extend(Handlers.prototype, Backbone.Events, {
                setHandlers: function(handlers) {
                    _.each(handlers, function(handler, name) {
                        var context = null;
                        if (_.isObject(handler) && !_.isFunction(handler)) {
                            context = handler.context;
                            handler = handler.callback;
                        }
                        this.setHandler(name, handler, context);
                    }, this);
                },
                setHandler: function(name, handler, context) {
                    var config = {
                        callback: handler,
                        context: context
                    };
                    this._wreqrHandlers[name] = config;
                    this.trigger("handler:add", name, handler, context);
                },
                hasHandler: function(name) {
                    return !!this._wreqrHandlers[name];
                },
                getHandler: function(name) {
                    var config = this._wreqrHandlers[name];
                    if (!config) {
                        return;
                    }
                    return function() {
                        var args = Array.prototype.slice.apply(arguments);
                        return config.callback.apply(config.context, args);
                    };
                },
                removeHandler: function(name) {
                    delete this._wreqrHandlers[name];
                },
                removeAllHandlers: function() {
                    this._wreqrHandlers = {};
                }
            });
            return Handlers;
        }(Backbone, _);
        Wreqr.CommandStorage = function() {
            "use strict";
            var CommandStorage = function(options) {
                this.options = options;
                this._commands = {};
                if (_.isFunction(this.initialize)) {
                    this.initialize(options);
                }
            };
            _.extend(CommandStorage.prototype, Backbone.Events, {
                getCommands: function(commandName) {
                    var commands = this._commands[commandName];
                    if (!commands) {
                        commands = {
                            command: commandName,
                            instances: []
                        };
                        this._commands[commandName] = commands;
                    }
                    return commands;
                },
                addCommand: function(commandName, args) {
                    var command = this.getCommands(commandName);
                    command.instances.push(args);
                },
                clearCommands: function(commandName) {
                    var command = this.getCommands(commandName);
                    command.instances = [];
                }
            });
            return CommandStorage;
        }();
        Wreqr.Commands = function(Wreqr) {
            "use strict";
            return Wreqr.Handlers.extend({
                storageType: Wreqr.CommandStorage,
                constructor: function(options) {
                    this.options = options || {};
                    this._initializeStorage(this.options);
                    this.on("handler:add", this._executeCommands, this);
                    var args = Array.prototype.slice.call(arguments);
                    Wreqr.Handlers.prototype.constructor.apply(this, args);
                },
                execute: function(name, args) {
                    name = arguments[0];
                    args = Array.prototype.slice.call(arguments, 1);
                    if (this.hasHandler(name)) {
                        this.getHandler(name).apply(this, args);
                    } else {
                        this.storage.addCommand(name, args);
                    }
                },
                _executeCommands: function(name, handler, context) {
                    var command = this.storage.getCommands(name);
                    _.each(command.instances, function(args) {
                        handler.apply(context, args);
                    });
                    this.storage.clearCommands(name);
                },
                _initializeStorage: function(options) {
                    var storage;
                    var StorageType = options.storageType || this.storageType;
                    if (_.isFunction(StorageType)) {
                        storage = new StorageType();
                    } else {
                        storage = StorageType;
                    }
                    this.storage = storage;
                }
            });
        }(Wreqr);
        Wreqr.RequestResponse = function(Wreqr) {
            "use strict";
            return Wreqr.Handlers.extend({
                request: function() {
                    var name = arguments[0];
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (this.hasHandler(name)) {
                        return this.getHandler(name).apply(this, args);
                    }
                }
            });
        }(Wreqr);
        Wreqr.EventAggregator = function(Backbone, _) {
            "use strict";
            var EA = function() {};
            EA.extend = Backbone.Model.extend;
            _.extend(EA.prototype, Backbone.Events);
            return EA;
        }(Backbone, _);
        Wreqr.Channel = function(Wreqr) {
            "use strict";
            var Channel = function(channelName) {
                this.vent = new Backbone.Wreqr.EventAggregator();
                this.reqres = new Backbone.Wreqr.RequestResponse();
                this.commands = new Backbone.Wreqr.Commands();
                this.channelName = channelName;
            };
            _.extend(Channel.prototype, {
                reset: function() {
                    this.vent.off();
                    this.vent.stopListening();
                    this.reqres.removeAllHandlers();
                    this.commands.removeAllHandlers();
                    return this;
                },
                connectEvents: function(hash, context) {
                    this._connect("vent", hash, context);
                    return this;
                },
                connectCommands: function(hash, context) {
                    this._connect("commands", hash, context);
                    return this;
                },
                connectRequests: function(hash, context) {
                    this._connect("reqres", hash, context);
                    return this;
                },
                _connect: function(type, hash, context) {
                    if (!hash) {
                        return;
                    }
                    context = context || this;
                    var method = type === "vent" ? "on" : "setHandler";
                    _.each(hash, function(fn, eventName) {
                        this[type][method](eventName, _.bind(fn, context));
                    }, this);
                }
            });
            return Channel;
        }(Wreqr);
        Wreqr.radio = function(Wreqr) {
            "use strict";
            var Radio = function() {
                this._channels = {};
                this.vent = {};
                this.commands = {};
                this.reqres = {};
                this._proxyMethods();
            };
            _.extend(Radio.prototype, {
                channel: function(channelName) {
                    if (!channelName) {
                        throw new Error("Channel must receive a name");
                    }
                    return this._getChannel(channelName);
                },
                _getChannel: function(channelName) {
                    var channel = this._channels[channelName];
                    if (!channel) {
                        channel = new Wreqr.Channel(channelName);
                        this._channels[channelName] = channel;
                    }
                    return channel;
                },
                _proxyMethods: function() {
                    _.each([ "vent", "commands", "reqres" ], function(system) {
                        _.each(messageSystems[system], function(method) {
                            this[system][method] = proxyMethod(this, system, method);
                        }, this);
                    }, this);
                }
            });
            var messageSystems = {
                vent: [ "on", "off", "trigger", "once", "stopListening", "listenTo", "listenToOnce" ],
                commands: [ "execute", "setHandler", "setHandlers", "removeHandler", "removeAllHandlers" ],
                reqres: [ "request", "setHandler", "setHandlers", "removeHandler", "removeAllHandlers" ]
            };
            var proxyMethod = function(radio, system, method) {
                return function(channelName) {
                    var messageSystem = radio._getChannel(channelName)[system];
                    var args = Array.prototype.slice.call(arguments, 1);
                    return messageSystem[method].apply(messageSystem, args);
                };
            };
            return new Radio();
        }(Wreqr);
        return Backbone.Wreqr;
    })(Backbone, _);
    var previousMarionette = root.Marionette;
    var Marionette = Backbone.Marionette = {};
    Marionette.VERSION = "2.3.1";
    Marionette.noConflict = function() {
        root.Marionette = previousMarionette;
        return this;
    };
    Backbone.Marionette = Marionette;
    Marionette.Deferred = Backbone.$.Deferred;
    Marionette.extend = Backbone.Model.extend;
    Marionette.isNodeAttached = function(el) {
        return Backbone.$.contains(document.documentElement, el);
    };
    Marionette.getOption = function(target, optionName) {
        if (!target || !optionName) {
            return;
        }
        if (target.options && target.options[optionName] !== undefined) {
            return target.options[optionName];
        } else {
            return target[optionName];
        }
    };
    Marionette.proxyGetOption = function(optionName) {
        return Marionette.getOption(this, optionName);
    };
    Marionette._getValue = function(value, context, params) {
        if (_.isFunction(value)) {
            value = value.apply(context, params);
        }
        return value;
    };
    Marionette.normalizeMethods = function(hash) {
        return _.reduce(hash, function(normalizedHash, method, name) {
            if (!_.isFunction(method)) {
                method = this[method];
            }
            if (method) {
                normalizedHash[name] = method;
            }
            return normalizedHash;
        }, {}, this);
    };
    Marionette.normalizeUIString = function(uiString, ui) {
        return uiString.replace(/@ui\.[a-zA-Z_$0-9]*/g, function(r) {
            return ui[r.slice(4)];
        });
    };
    Marionette.normalizeUIKeys = function(hash, ui) {
        return _.reduce(hash, function(memo, val, key) {
            var normalizedKey = Marionette.normalizeUIString(key, ui);
            memo[normalizedKey] = val;
            return memo;
        }, {});
    };
    Marionette.normalizeUIValues = function(hash, ui) {
        _.each(hash, function(val, key) {
            if (_.isString(val)) {
                hash[key] = Marionette.normalizeUIString(val, ui);
            }
        });
        return hash;
    };
    Marionette.actAsCollection = function(object, listProperty) {
        var methods = [ "forEach", "each", "map", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "toArray", "first", "initial", "rest", "last", "without", "isEmpty", "pluck" ];
        _.each(methods, function(method) {
            object[method] = function() {
                var list = _.values(_.result(this, listProperty));
                var args = [ list ].concat(_.toArray(arguments));
                return _[method].apply(_, args);
            };
        });
    };
    var deprecate = Marionette.deprecate = function(message, test) {
        if (_.isObject(message)) {
            message = message.prev + " is going to be removed in the future. " + "Please use " + message.next + " instead." + (message.url ? " See: " + message.url : "");
        }
        if ((test === undefined || !test) && !deprecate._cache[message]) {
            deprecate._warn("Deprecation warning: " + message);
            deprecate._cache[message] = true;
        }
    };
    deprecate._warn = typeof console !== "undefined" && (console.warn || console.log) || function() {};
    deprecate._cache = {};
    Marionette._triggerMethod = function() {
        var splitter = /(^|:)(\w)/gi;
        function getEventName(match, prefix, eventName) {
            return eventName.toUpperCase();
        }
        return function(context, event, args) {
            var noEventArg = arguments.length < 3;
            if (noEventArg) {
                args = event;
                event = args[0];
            }
            var methodName = "on" + event.replace(splitter, getEventName);
            var method = context[methodName];
            var result;
            if (_.isFunction(method)) {
                result = method.apply(context, noEventArg ? _.rest(args) : args);
            }
            if (_.isFunction(context.trigger)) {
                if (noEventArg + args.length > 1) {
                    context.trigger.apply(context, noEventArg ? args : [ event ].concat(_.rest(args, 0)));
                } else {
                    context.trigger(event);
                }
            }
            return result;
        };
    }();
    Marionette.triggerMethod = function(event) {
        return Marionette._triggerMethod(this, arguments);
    };
    Marionette.triggerMethodOn = function(context) {
        var fnc = _.isFunction(context.triggerMethod) ? context.triggerMethod : Marionette.triggerMethod;
        return fnc.apply(context, _.rest(arguments));
    };
    Marionette.MonitorDOMRefresh = function(view) {
        function handleShow() {
            view._isShown = true;
            triggerDOMRefresh();
        }
        function handleRender() {
            view._isRendered = true;
            triggerDOMRefresh();
        }
        function triggerDOMRefresh() {
            if (view._isShown && view._isRendered && Marionette.isNodeAttached(view.el)) {
                if (_.isFunction(view.triggerMethod)) {
                    view.triggerMethod("dom:refresh");
                }
            }
        }
        view.on({
            show: handleShow,
            render: handleRender
        });
    };
    (function(Marionette) {
        "use strict";
        function bindFromStrings(target, entity, evt, methods) {
            var methodNames = methods.split(/\s+/);
            _.each(methodNames, function(methodName) {
                var method = target[methodName];
                if (!method) {
                    throw new Marionette.Error('Method "' + methodName + '" was configured as an event handler, but does not exist.');
                }
                target.listenTo(entity, evt, method);
            });
        }
        function bindToFunction(target, entity, evt, method) {
            target.listenTo(entity, evt, method);
        }
        function unbindFromStrings(target, entity, evt, methods) {
            var methodNames = methods.split(/\s+/);
            _.each(methodNames, function(methodName) {
                var method = target[methodName];
                target.stopListening(entity, evt, method);
            });
        }
        function unbindToFunction(target, entity, evt, method) {
            target.stopListening(entity, evt, method);
        }
        function iterateEvents(target, entity, bindings, functionCallback, stringCallback) {
            if (!entity || !bindings) {
                return;
            }
            if (!_.isObject(bindings)) {
                throw new Marionette.Error({
                    message: "Bindings must be an object or function.",
                    url: "marionette.functions.html#marionettebindentityevents"
                });
            }
            bindings = Marionette._getValue(bindings, target);
            _.each(bindings, function(methods, evt) {
                if (_.isFunction(methods)) {
                    functionCallback(target, entity, evt, methods);
                } else {
                    stringCallback(target, entity, evt, methods);
                }
            });
        }
        Marionette.bindEntityEvents = function(target, entity, bindings) {
            iterateEvents(target, entity, bindings, bindToFunction, bindFromStrings);
        };
        Marionette.unbindEntityEvents = function(target, entity, bindings) {
            iterateEvents(target, entity, bindings, unbindToFunction, unbindFromStrings);
        };
        Marionette.proxyBindEntityEvents = function(entity, bindings) {
            return Marionette.bindEntityEvents(this, entity, bindings);
        };
        Marionette.proxyUnbindEntityEvents = function(entity, bindings) {
            return Marionette.unbindEntityEvents(this, entity, bindings);
        };
    })(Marionette);
    var errorProps = [ "description", "fileName", "lineNumber", "name", "message", "number" ];
    Marionette.Error = Marionette.extend.call(Error, {
        urlRoot: "http://marionettejs.com/docs/v" + Marionette.VERSION + "/",
        constructor: function(message, options) {
            if (_.isObject(message)) {
                options = message;
                message = options.message;
            } else if (!options) {
                options = {};
            }
            var error = Error.call(this, message);
            _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));
            this.captureStackTrace();
            if (options.url) {
                this.url = this.urlRoot + options.url;
            }
        },
        captureStackTrace: function() {
            if (Error.captureStackTrace) {
                Error.captureStackTrace(this, Marionette.Error);
            }
        },
        toString: function() {
            return this.name + ": " + this.message + (this.url ? " See: " + this.url : "");
        }
    });
    Marionette.Error.extend = Marionette.extend;
    Marionette.Callbacks = function() {
        this._deferred = Marionette.Deferred();
        this._callbacks = [];
    };
    _.extend(Marionette.Callbacks.prototype, {
        add: function(callback, contextOverride) {
            var promise = _.result(this._deferred, "promise");
            this._callbacks.push({
                cb: callback,
                ctx: contextOverride
            });
            promise.then(function(args) {
                if (contextOverride) {
                    args.context = contextOverride;
                }
                callback.call(args.context, args.options);
            });
        },
        run: function(options, context) {
            this._deferred.resolve({
                options: options,
                context: context
            });
        },
        reset: function() {
            var callbacks = this._callbacks;
            this._deferred = Marionette.Deferred();
            this._callbacks = [];
            _.each(callbacks, function(cb) {
                this.add(cb.cb, cb.ctx);
            }, this);
        }
    });
    Marionette.Controller = function(options) {
        this.options = options || {};
        if (_.isFunction(this.initialize)) {
            this.initialize(this.options);
        }
    };
    Marionette.Controller.extend = Marionette.extend;
    _.extend(Marionette.Controller.prototype, Backbone.Events, {
        destroy: function() {
            Marionette._triggerMethod(this, "before:destroy", arguments);
            Marionette._triggerMethod(this, "destroy", arguments);
            this.stopListening();
            this.off();
            return this;
        },
        triggerMethod: Marionette.triggerMethod,
        getOption: Marionette.proxyGetOption
    });
    Marionette.Object = function(options) {
        this.options = _.extend({}, _.result(this, "options"), options);
        this.initialize.apply(this, arguments);
    };
    Marionette.Object.extend = Marionette.extend;
    _.extend(Marionette.Object.prototype, Backbone.Events, {
        initialize: function() {},
        destroy: function() {
            this.triggerMethod("before:destroy");
            this.triggerMethod("destroy");
            this.stopListening();
        },
        triggerMethod: Marionette.triggerMethod,
        getOption: Marionette.proxyGetOption,
        bindEntityEvents: Marionette.proxyBindEntityEvents,
        unbindEntityEvents: Marionette.proxyUnbindEntityEvents
    });
    Marionette.Region = Marionette.Object.extend({
        constructor: function(options) {
            this.options = options || {};
            this.el = this.getOption("el");
            this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;
            if (!this.el) {
                throw new Marionette.Error({
                    name: "NoElError",
                    message: 'An "el" must be specified for a region.'
                });
            }
            this.$el = this.getEl(this.el);
            Marionette.Object.call(this, options);
        },
        show: function(view, options) {
            if (!this._ensureElement()) {
                return;
            }
            this._ensureViewIsIntact(view);
            var showOptions = options || {};
            var isDifferentView = view !== this.currentView;
            var preventDestroy = !!showOptions.preventDestroy;
            var forceShow = !!showOptions.forceShow;
            var isChangingView = !!this.currentView;
            var _shouldDestroyView = isDifferentView && !preventDestroy;
            var _shouldShowView = isDifferentView || forceShow;
            if (isChangingView) {
                this.triggerMethod("before:swapOut", this.currentView, this, options);
            }
            if (this.currentView) {
                delete this.currentView._parent;
            }
            if (_shouldDestroyView) {
                this.empty();
            } else if (isChangingView && _shouldShowView) {
                this.currentView.off("destroy", this.empty, this);
            }
            if (_shouldShowView) {
                view.once("destroy", this.empty, this);
                view.render();
                view._parent = this;
                if (isChangingView) {
                    this.triggerMethod("before:swap", view, this, options);
                }
                this.triggerMethod("before:show", view, this, options);
                Marionette.triggerMethodOn(view, "before:show", view, this, options);
                if (isChangingView) {
                    this.triggerMethod("swapOut", this.currentView, this, options);
                }
                var attachedRegion = Marionette.isNodeAttached(this.el);
                var displayedViews = [];
                var triggerBeforeAttach = showOptions.triggerBeforeAttach || this.triggerBeforeAttach;
                var triggerAttach = showOptions.triggerAttach || this.triggerAttach;
                if (attachedRegion && triggerBeforeAttach) {
                    displayedViews = this._displayedViews(view);
                    this._triggerAttach(displayedViews, "before:");
                }
                this.attachHtml(view);
                this.currentView = view;
                if (attachedRegion && triggerAttach) {
                    displayedViews = this._displayedViews(view);
                    this._triggerAttach(displayedViews);
                }
                if (isChangingView) {
                    this.triggerMethod("swap", view, this, options);
                }
                this.triggerMethod("show", view, this, options);
                Marionette.triggerMethodOn(view, "show", view, this, options);
                return this;
            }
            return this;
        },
        triggerBeforeAttach: true,
        triggerAttach: true,
        _triggerAttach: function(views, prefix) {
            var eventName = (prefix || "") + "attach";
            _.each(views, function(view) {
                Marionette.triggerMethodOn(view, eventName, view, this);
            }, this);
        },
        _displayedViews: function(view) {
            return _.union([ view ], _.result(view, "_getNestedViews") || []);
        },
        _ensureElement: function() {
            if (!_.isObject(this.el)) {
                this.$el = this.getEl(this.el);
                this.el = this.$el[0];
            }
            if (!this.$el || this.$el.length === 0) {
                if (this.getOption("allowMissingEl")) {
                    return false;
                } else {
                    throw new Marionette.Error('An "el" ' + this.$el.selector + " must exist in DOM");
                }
            }
            return true;
        },
        _ensureViewIsIntact: function(view) {
            if (!view) {
                throw new Marionette.Error({
                    name: "ViewNotValid",
                    message: "The view passed is undefined and therefore invalid. You must pass a view instance to show."
                });
            }
            if (view.isDestroyed) {
                throw new Marionette.Error({
                    name: "ViewDestroyedError",
                    message: 'View (cid: "' + view.cid + '") has already been destroyed and cannot be used.'
                });
            }
        },
        getEl: function(el) {
            return Backbone.$(el, Marionette._getValue(this.options.parentEl, this));
        },
        attachHtml: function(view) {
            this.$el.contents().detach();
            this.el.appendChild(view.el);
        },
        empty: function() {
            var view = this.currentView;
            if (!view) {
                return;
            }
            view.off("destroy", this.empty, this);
            this.triggerMethod("before:empty", view);
            this._destroyView();
            this.triggerMethod("empty", view);
            delete this.currentView;
            return this;
        },
        _destroyView: function() {
            var view = this.currentView;
            if (view.destroy && !view.isDestroyed) {
                view.destroy();
            } else if (view.remove) {
                view.remove();
                view.isDestroyed = true;
            }
        },
        attachView: function(view) {
            this.currentView = view;
            return this;
        },
        hasView: function() {
            return !!this.currentView;
        },
        reset: function() {
            this.empty();
            if (this.$el) {
                this.el = this.$el.selector;
            }
            delete this.$el;
            return this;
        }
    }, {
        buildRegion: function(regionConfig, DefaultRegionClass) {
            if (_.isString(regionConfig)) {
                return this._buildRegionFromSelector(regionConfig, DefaultRegionClass);
            }
            if (regionConfig.selector || regionConfig.el || regionConfig.regionClass) {
                return this._buildRegionFromObject(regionConfig, DefaultRegionClass);
            }
            if (_.isFunction(regionConfig)) {
                return this._buildRegionFromRegionClass(regionConfig);
            }
            throw new Marionette.Error({
                message: "Improper region configuration type.",
                url: "marionette.region.html#region-configuration-types"
            });
        },
        _buildRegionFromSelector: function(selector, DefaultRegionClass) {
            return new DefaultRegionClass({
                el: selector
            });
        },
        _buildRegionFromObject: function(regionConfig, DefaultRegionClass) {
            var RegionClass = regionConfig.regionClass || DefaultRegionClass;
            var options = _.omit(regionConfig, "selector", "regionClass");
            if (regionConfig.selector && !options.el) {
                options.el = regionConfig.selector;
            }
            return new RegionClass(options);
        },
        _buildRegionFromRegionClass: function(RegionClass) {
            return new RegionClass();
        }
    });
    Marionette.RegionManager = Marionette.Controller.extend({
        constructor: function(options) {
            this._regions = {};
            Marionette.Controller.call(this, options);
            this.addRegions(this.getOption("regions"));
        },
        addRegions: function(regionDefinitions, defaults) {
            regionDefinitions = Marionette._getValue(regionDefinitions, this, arguments);
            return _.reduce(regionDefinitions, function(regions, definition, name) {
                if (_.isString(definition)) {
                    definition = {
                        selector: definition
                    };
                }
                if (definition.selector) {
                    definition = _.defaults({}, definition, defaults);
                }
                regions[name] = this.addRegion(name, definition);
                return regions;
            }, {}, this);
        },
        addRegion: function(name, definition) {
            var region;
            if (definition instanceof Marionette.Region) {
                region = definition;
            } else {
                region = Marionette.Region.buildRegion(definition, Marionette.Region);
            }
            this.triggerMethod("before:add:region", name, region);
            region._parent = this;
            this._store(name, region);
            this.triggerMethod("add:region", name, region);
            return region;
        },
        get: function(name) {
            return this._regions[name];
        },
        getRegions: function() {
            return _.clone(this._regions);
        },
        removeRegion: function(name) {
            var region = this._regions[name];
            this._remove(name, region);
            return region;
        },
        removeRegions: function() {
            var regions = this.getRegions();
            _.each(this._regions, function(region, name) {
                this._remove(name, region);
            }, this);
            return regions;
        },
        emptyRegions: function() {
            var regions = this.getRegions();
            _.invoke(regions, "empty");
            return regions;
        },
        destroy: function() {
            this.removeRegions();
            return Marionette.Controller.prototype.destroy.apply(this, arguments);
        },
        _store: function(name, region) {
            this._regions[name] = region;
            this._setLength();
        },
        _remove: function(name, region) {
            this.triggerMethod("before:remove:region", name, region);
            region.empty();
            region.stopListening();
            delete region._parent;
            delete this._regions[name];
            this._setLength();
            this.triggerMethod("remove:region", name, region);
        },
        _setLength: function() {
            this.length = _.size(this._regions);
        }
    });
    Marionette.actAsCollection(Marionette.RegionManager.prototype, "_regions");
    Marionette.TemplateCache = function(templateId) {
        this.templateId = templateId;
    };
    _.extend(Marionette.TemplateCache, {
        templateCaches: {},
        get: function(templateId) {
            var cachedTemplate = this.templateCaches[templateId];
            if (!cachedTemplate) {
                cachedTemplate = new Marionette.TemplateCache(templateId);
                this.templateCaches[templateId] = cachedTemplate;
            }
            return cachedTemplate.load();
        },
        clear: function() {
            var i;
            var args = _.toArray(arguments);
            var length = args.length;
            if (length > 0) {
                for (i = 0; i < length; i++) {
                    delete this.templateCaches[args[i]];
                }
            } else {
                this.templateCaches = {};
            }
        }
    });
    _.extend(Marionette.TemplateCache.prototype, {
        load: function() {
            if (this.compiledTemplate) {
                return this.compiledTemplate;
            }
            var template = this.loadTemplate(this.templateId);
            this.compiledTemplate = this.compileTemplate(template);
            return this.compiledTemplate;
        },
        loadTemplate: function(templateId) {
            var template = Backbone.$(templateId).html();
            if (!template || template.length === 0) {
                throw new Marionette.Error({
                    name: "NoTemplateError",
                    message: 'Could not find template: "' + templateId + '"'
                });
            }
            return template;
        },
        compileTemplate: function(rawTemplate) {
            return _.template(rawTemplate);
        }
    });
    Marionette.Renderer = {
        render: function(template, data) {
            if (!template) {
                throw new Marionette.Error({
                    name: "TemplateNotFoundError",
                    message: "Cannot render the template since its false, null or undefined."
                });
            }
            var templateFunc = _.isFunction(template) ? template : Marionette.TemplateCache.get(template);
            return templateFunc(data);
        }
    };
    Marionette.View = Backbone.View.extend({
        isDestroyed: false,
        constructor: function(options) {
            _.bindAll(this, "render");
            options = Marionette._getValue(options, this);
            this.options = _.extend({}, _.result(this, "options"), options);
            this._behaviors = Marionette.Behaviors(this);
            Backbone.View.apply(this, arguments);
            Marionette.MonitorDOMRefresh(this);
            this.on("show", this.onShowCalled);
        },
        getTemplate: function() {
            return this.getOption("template");
        },
        serializeModel: function(model) {
            return model.toJSON.apply(model, _.rest(arguments));
        },
        mixinTemplateHelpers: function(target) {
            target = target || {};
            var templateHelpers = this.getOption("templateHelpers");
            templateHelpers = Marionette._getValue(templateHelpers, this);
            return _.extend(target, templateHelpers);
        },
        normalizeUIKeys: function(hash) {
            var uiBindings = _.result(this, "_uiBindings");
            return Marionette.normalizeUIKeys(hash, uiBindings || _.result(this, "ui"));
        },
        normalizeUIValues: function(hash) {
            var ui = _.result(this, "ui");
            var uiBindings = _.result(this, "_uiBindings");
            return Marionette.normalizeUIValues(hash, uiBindings || ui);
        },
        configureTriggers: function() {
            if (!this.triggers) {
                return;
            }
            var triggers = this.normalizeUIKeys(_.result(this, "triggers"));
            return _.reduce(triggers, function(events, value, key) {
                events[key] = this._buildViewTrigger(value);
                return events;
            }, {}, this);
        },
        delegateEvents: function(events) {
            this._delegateDOMEvents(events);
            this.bindEntityEvents(this.model, this.getOption("modelEvents"));
            this.bindEntityEvents(this.collection, this.getOption("collectionEvents"));
            _.each(this._behaviors, function(behavior) {
                behavior.bindEntityEvents(this.model, behavior.getOption("modelEvents"));
                behavior.bindEntityEvents(this.collection, behavior.getOption("collectionEvents"));
            }, this);
            return this;
        },
        _delegateDOMEvents: function(eventsArg) {
            var events = Marionette._getValue(eventsArg || this.events, this);
            events = this.normalizeUIKeys(events);
            if (_.isUndefined(eventsArg)) {
                this.events = events;
            }
            var combinedEvents = {};
            var behaviorEvents = _.result(this, "behaviorEvents") || {};
            var triggers = this.configureTriggers();
            var behaviorTriggers = _.result(this, "behaviorTriggers") || {};
            _.extend(combinedEvents, behaviorEvents, events, triggers, behaviorTriggers);
            Backbone.View.prototype.delegateEvents.call(this, combinedEvents);
        },
        undelegateEvents: function() {
            Backbone.View.prototype.undelegateEvents.apply(this, arguments);
            this.unbindEntityEvents(this.model, this.getOption("modelEvents"));
            this.unbindEntityEvents(this.collection, this.getOption("collectionEvents"));
            _.each(this._behaviors, function(behavior) {
                behavior.unbindEntityEvents(this.model, behavior.getOption("modelEvents"));
                behavior.unbindEntityEvents(this.collection, behavior.getOption("collectionEvents"));
            }, this);
            return this;
        },
        onShowCalled: function() {},
        _ensureViewIsIntact: function() {
            if (this.isDestroyed) {
                throw new Marionette.Error({
                    name: "ViewDestroyedError",
                    message: 'View (cid: "' + this.cid + '") has already been destroyed and cannot be used.'
                });
            }
        },
        destroy: function() {
            if (this.isDestroyed) {
                return;
            }
            var args = _.toArray(arguments);
            this.triggerMethod.apply(this, [ "before:destroy" ].concat(args));
            this.isDestroyed = true;
            this.triggerMethod.apply(this, [ "destroy" ].concat(args));
            this.unbindUIElements();
            this.remove();
            _.invoke(this._behaviors, "destroy", args);
            return this;
        },
        bindUIElements: function() {
            this._bindUIElements();
            _.invoke(this._behaviors, this._bindUIElements);
        },
        _bindUIElements: function() {
            if (!this.ui) {
                return;
            }
            if (!this._uiBindings) {
                this._uiBindings = this.ui;
            }
            var bindings = _.result(this, "_uiBindings");
            this.ui = {};
            _.each(bindings, function(selector, key) {
                this.ui[key] = this.$(selector);
            }, this);
        },
        unbindUIElements: function() {
            this._unbindUIElements();
            _.invoke(this._behaviors, this._unbindUIElements);
        },
        _unbindUIElements: function() {
            if (!this.ui || !this._uiBindings) {
                return;
            }
            _.each(this.ui, function($el, name) {
                delete this.ui[name];
            }, this);
            this.ui = this._uiBindings;
            delete this._uiBindings;
        },
        _buildViewTrigger: function(triggerDef) {
            var hasOptions = _.isObject(triggerDef);
            var options = _.defaults({}, hasOptions ? triggerDef : {}, {
                preventDefault: true,
                stopPropagation: true
            });
            var eventName = hasOptions ? options.event : triggerDef;
            return function(e) {
                if (e) {
                    if (e.preventDefault && options.preventDefault) {
                        e.preventDefault();
                    }
                    if (e.stopPropagation && options.stopPropagation) {
                        e.stopPropagation();
                    }
                }
                var args = {
                    view: this,
                    model: this.model,
                    collection: this.collection
                };
                this.triggerMethod(eventName, args);
            };
        },
        setElement: function() {
            var ret = Backbone.View.prototype.setElement.apply(this, arguments);
            _.invoke(this._behaviors, "proxyViewProperties", this);
            return ret;
        },
        triggerMethod: function() {
            var triggerMethod = Marionette._triggerMethod;
            var ret = triggerMethod(this, arguments);
            var behaviors = this._behaviors;
            for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {
                triggerMethod(behaviors[i], arguments);
            }
            return ret;
        },
        _getImmediateChildren: function() {
            return [];
        },
        _getNestedViews: function() {
            var children = this._getImmediateChildren();
            if (!children.length) {
                return children;
            }
            return _.reduce(children, function(memo, view) {
                if (!view._getNestedViews) {
                    return memo;
                }
                return memo.concat(view._getNestedViews());
            }, children);
        },
        normalizeMethods: Marionette.normalizeMethods,
        getOption: Marionette.proxyGetOption,
        bindEntityEvents: Marionette.proxyBindEntityEvents,
        unbindEntityEvents: Marionette.proxyUnbindEntityEvents
    });
    Marionette.ItemView = Marionette.View.extend({
        constructor: function() {
            Marionette.View.apply(this, arguments);
        },
        serializeData: function() {
            if (!this.model && !this.collection) {
                return {};
            }
            var args = [ this.model || this.collection ];
            if (arguments.length) {
                args.push.apply(args, arguments);
            }
            if (this.model) {
                return this.serializeModel.apply(this, args);
            } else {
                return {
                    items: this.serializeCollection.apply(this, args)
                };
            }
        },
        serializeCollection: function(collection) {
            return collection.toJSON.apply(collection, _.rest(arguments));
        },
        render: function() {
            this._ensureViewIsIntact();
            this.triggerMethod("before:render", this);
            this._renderTemplate();
            this.bindUIElements();
            this.triggerMethod("render", this);
            return this;
        },
        _renderTemplate: function() {
            var template = this.getTemplate();
            if (template === false) {
                return;
            }
            if (!template) {
                throw new Marionette.Error({
                    name: "UndefinedTemplateError",
                    message: "Cannot render the template since it is null or undefined."
                });
            }
            var data = this.serializeData();
            data = this.mixinTemplateHelpers(data);
            var html = Marionette.Renderer.render(template, data, this);
            this.attachElContent(html);
            return this;
        },
        attachElContent: function(html) {
            this.$el.html(html);
            return this;
        }
    });
    Marionette.CollectionView = Marionette.View.extend({
        childViewEventPrefix: "childview",
        constructor: function(options) {
            var initOptions = options || {};
            if (_.isUndefined(this.sort)) {
                this.sort = _.isUndefined(initOptions.sort) ? true : initOptions.sort;
            }
            this.once("render", this._initialEvents);
            this._initChildViewStorage();
            Marionette.View.apply(this, arguments);
            this.initRenderBuffer();
        },
        initRenderBuffer: function() {
            this.elBuffer = document.createDocumentFragment();
            this._bufferedChildren = [];
        },
        startBuffering: function() {
            this.initRenderBuffer();
            this.isBuffering = true;
        },
        endBuffering: function() {
            this.isBuffering = false;
            this._triggerBeforeShowBufferedChildren();
            this.attachBuffer(this, this.elBuffer);
            this._triggerShowBufferedChildren();
            this.initRenderBuffer();
        },
        _triggerBeforeShowBufferedChildren: function() {
            if (this._isShown) {
                _.each(this._bufferedChildren, _.partial(this._triggerMethodOnChild, "before:show"));
            }
        },
        _triggerShowBufferedChildren: function() {
            if (this._isShown) {
                _.each(this._bufferedChildren, _.partial(this._triggerMethodOnChild, "show"));
                this._bufferedChildren = [];
            }
        },
        _triggerMethodOnChild: function(event, childView) {
            Marionette.triggerMethodOn(childView, event);
        },
        _initialEvents: function() {
            if (this.collection) {
                this.listenTo(this.collection, "add", this._onCollectionAdd);
                this.listenTo(this.collection, "remove", this._onCollectionRemove);
                this.listenTo(this.collection, "reset", this.render);
                if (this.sort) {
                    this.listenTo(this.collection, "sort", this._sortViews);
                }
            }
        },
        _onCollectionAdd: function(child) {
            this.destroyEmptyView();
            var ChildView = this.getChildView(child);
            var index = this.collection.indexOf(child);
            this.addChild(child, ChildView, index);
        },
        _onCollectionRemove: function(model) {
            var view = this.children.findByModel(model);
            this.removeChildView(view);
            this.checkEmpty();
        },
        onShowCalled: function() {
            this.children.each(_.partial(this._triggerMethodOnChild, "show"));
        },
        render: function() {
            this._ensureViewIsIntact();
            this.triggerMethod("before:render", this);
            this._renderChildren();
            this.triggerMethod("render", this);
            return this;
        },
        resortView: function() {
            this.render();
        },
        _sortViews: function() {
            var orderChanged = this.collection.find(function(item, index) {
                var view = this.children.findByModel(item);
                return !view || view._index !== index;
            }, this);
            if (orderChanged) {
                this.resortView();
            }
        },
        _emptyViewIndex: -1,
        _renderChildren: function() {
            this.destroyEmptyView();
            this.destroyChildren();
            if (this.isEmpty(this.collection)) {
                this.showEmptyView();
            } else {
                this.triggerMethod("before:render:collection", this);
                this.startBuffering();
                this.showCollection();
                this.endBuffering();
                this.triggerMethod("render:collection", this);
            }
        },
        showCollection: function() {
            var ChildView;
            this.collection.each(function(child, index) {
                ChildView = this.getChildView(child);
                this.addChild(child, ChildView, index);
            }, this);
        },
        showEmptyView: function() {
            var EmptyView = this.getEmptyView();
            if (EmptyView && !this._showingEmptyView) {
                this.triggerMethod("before:render:empty");
                this._showingEmptyView = true;
                var model = new Backbone.Model();
                this.addEmptyView(model, EmptyView);
                this.triggerMethod("render:empty");
            }
        },
        destroyEmptyView: function() {
            if (this._showingEmptyView) {
                this.triggerMethod("before:remove:empty");
                this.destroyChildren();
                delete this._showingEmptyView;
                this.triggerMethod("remove:empty");
            }
        },
        getEmptyView: function() {
            return this.getOption("emptyView");
        },
        addEmptyView: function(child, EmptyView) {
            var emptyViewOptions = this.getOption("emptyViewOptions") || this.getOption("childViewOptions");
            if (_.isFunction(emptyViewOptions)) {
                emptyViewOptions = emptyViewOptions.call(this, child, this._emptyViewIndex);
            }
            var view = this.buildChildView(child, EmptyView, emptyViewOptions);
            view._parent = this;
            this.proxyChildEvents(view);
            if (this._isShown) {
                Marionette.triggerMethodOn(view, "before:show");
            }
            this.children.add(view);
            this.renderChildView(view, this._emptyViewIndex);
            if (this._isShown) {
                Marionette.triggerMethodOn(view, "show");
            }
        },
        getChildView: function(child) {
            var childView = this.getOption("childView");
            if (!childView) {
                throw new Marionette.Error({
                    name: "NoChildViewError",
                    message: 'A "childView" must be specified'
                });
            }
            return childView;
        },
        addChild: function(child, ChildView, index) {
            var childViewOptions = this.getOption("childViewOptions");
            childViewOptions = Marionette._getValue(childViewOptions, this, [ child, index ]);
            var view = this.buildChildView(child, ChildView, childViewOptions);
            this._updateIndices(view, true, index);
            this._addChildView(view, index);
            view._parent = this;
            return view;
        },
        _updateIndices: function(view, increment, index) {
            if (!this.sort) {
                return;
            }
            if (increment) {
                view._index = index;
            }
            this.children.each(function(laterView) {
                if (laterView._index >= view._index) {
                    laterView._index += increment ? 1 : -1;
                }
            });
        },
        _addChildView: function(view, index) {
            this.proxyChildEvents(view);
            this.triggerMethod("before:add:child", view);
            this.children.add(view);
            this.renderChildView(view, index);
            if (this._isShown && !this.isBuffering) {
                Marionette.triggerMethodOn(view, "show");
            }
            this.triggerMethod("add:child", view);
        },
        renderChildView: function(view, index) {
            view.render();
            this.attachHtml(this, view, index);
            return view;
        },
        buildChildView: function(child, ChildViewClass, childViewOptions) {
            var options = _.extend({
                model: child
            }, childViewOptions);
            return new ChildViewClass(options);
        },
        removeChildView: function(view) {
            if (view) {
                this.triggerMethod("before:remove:child", view);
                if (view.destroy) {
                    view.destroy();
                } else if (view.remove) {
                    view.remove();
                }
                delete view._parent;
                this.stopListening(view);
                this.children.remove(view);
                this.triggerMethod("remove:child", view);
                this._updateIndices(view, false);
            }
            return view;
        },
        isEmpty: function() {
            return !this.collection || this.collection.length === 0;
        },
        checkEmpty: function() {
            if (this.isEmpty(this.collection)) {
                this.showEmptyView();
            }
        },
        attachBuffer: function(collectionView, buffer) {
            collectionView.$el.append(buffer);
        },
        attachHtml: function(collectionView, childView, index) {
            if (collectionView.isBuffering) {
                collectionView.elBuffer.appendChild(childView.el);
                collectionView._bufferedChildren.push(childView);
            } else {
                if (!collectionView._insertBefore(childView, index)) {
                    collectionView._insertAfter(childView);
                }
            }
        },
        _insertBefore: function(childView, index) {
            var currentView;
            var findPosition = this.sort && index < this.children.length - 1;
            if (findPosition) {
                currentView = this.children.find(function(view) {
                    return view._index === index + 1;
                });
            }
            if (currentView) {
                currentView.$el.before(childView.el);
                return true;
            }
            return false;
        },
        _insertAfter: function(childView) {
            this.$el.append(childView.el);
        },
        _initChildViewStorage: function() {
            this.children = new Backbone.ChildViewContainer();
        },
        destroy: function() {
            if (this.isDestroyed) {
                return;
            }
            this.triggerMethod("before:destroy:collection");
            this.destroyChildren();
            this.triggerMethod("destroy:collection");
            return Marionette.View.prototype.destroy.apply(this, arguments);
        },
        destroyChildren: function() {
            var childViews = this.children.map(_.identity);
            this.children.each(this.removeChildView, this);
            this.checkEmpty();
            return childViews;
        },
        proxyChildEvents: function(view) {
            var prefix = this.getOption("childViewEventPrefix");
            this.listenTo(view, "all", function() {
                var args = _.toArray(arguments);
                var rootEvent = args[0];
                var childEvents = this.normalizeMethods(_.result(this, "childEvents"));
                args[0] = prefix + ":" + rootEvent;
                args.splice(1, 0, view);
                if (typeof childEvents !== "undefined" && _.isFunction(childEvents[rootEvent])) {
                    childEvents[rootEvent].apply(this, args.slice(1));
                }
                this.triggerMethod.apply(this, args);
            }, this);
        },
        _getImmediateChildren: function() {
            return _.values(this.children._views);
        }
    });
    Marionette.CompositeView = Marionette.CollectionView.extend({
        constructor: function() {
            Marionette.CollectionView.apply(this, arguments);
        },
        _initialEvents: function() {
            if (this.collection) {
                this.listenTo(this.collection, "add", this._onCollectionAdd);
                this.listenTo(this.collection, "remove", this._onCollectionRemove);
                this.listenTo(this.collection, "reset", this._renderChildren);
                if (this.sort) {
                    this.listenTo(this.collection, "sort", this._sortViews);
                }
            }
        },
        getChildView: function(child) {
            var childView = this.getOption("childView") || this.constructor;
            return childView;
        },
        serializeData: function() {
            var data = {};
            if (this.model) {
                data = _.partial(this.serializeModel, this.model).apply(this, arguments);
            }
            return data;
        },
        render: function() {
            this._ensureViewIsIntact();
            this.isRendered = true;
            this.resetChildViewContainer();
            this.triggerMethod("before:render", this);
            this._renderTemplate();
            this._renderChildren();
            this.triggerMethod("render", this);
            return this;
        },
        _renderChildren: function() {
            if (this.isRendered) {
                Marionette.CollectionView.prototype._renderChildren.call(this);
            }
        },
        _renderTemplate: function() {
            var data = {};
            data = this.serializeData();
            data = this.mixinTemplateHelpers(data);
            this.triggerMethod("before:render:template");
            var template = this.getTemplate();
            var html = Marionette.Renderer.render(template, data, this);
            this.attachElContent(html);
            this.bindUIElements();
            this.triggerMethod("render:template");
        },
        attachElContent: function(html) {
            this.$el.html(html);
            return this;
        },
        attachBuffer: function(compositeView, buffer) {
            var $container = this.getChildViewContainer(compositeView);
            $container.append(buffer);
        },
        _insertAfter: function(childView) {
            var $container = this.getChildViewContainer(this, childView);
            $container.append(childView.el);
        },
        getChildViewContainer: function(containerView, childView) {
            if ("$childViewContainer" in containerView) {
                return containerView.$childViewContainer;
            }
            var container;
            var childViewContainer = Marionette.getOption(containerView, "childViewContainer");
            if (childViewContainer) {
                var selector = Marionette._getValue(childViewContainer, containerView);
                if (selector.charAt(0) === "@" && containerView.ui) {
                    container = containerView.ui[selector.substr(4)];
                } else {
                    container = containerView.$(selector);
                }
                if (container.length <= 0) {
                    throw new Marionette.Error({
                        name: "ChildViewContainerMissingError",
                        message: 'The specified "childViewContainer" was not found: ' + containerView.childViewContainer
                    });
                }
            } else {
                container = containerView.$el;
            }
            containerView.$childViewContainer = container;
            return container;
        },
        resetChildViewContainer: function() {
            if (this.$childViewContainer) {
                delete this.$childViewContainer;
            }
        }
    });
    Marionette.LayoutView = Marionette.ItemView.extend({
        regionClass: Marionette.Region,
        constructor: function(options) {
            options = options || {};
            this._firstRender = true;
            this._initializeRegions(options);
            Marionette.ItemView.call(this, options);
        },
        render: function() {
            this._ensureViewIsIntact();
            if (this._firstRender) {
                this._firstRender = false;
            } else {
                this._reInitializeRegions();
            }
            return Marionette.ItemView.prototype.render.apply(this, arguments);
        },
        destroy: function() {
            if (this.isDestroyed) {
                return this;
            }
            this.regionManager.destroy();
            return Marionette.ItemView.prototype.destroy.apply(this, arguments);
        },
        addRegion: function(name, definition) {
            var regions = {};
            regions[name] = definition;
            return this._buildRegions(regions)[name];
        },
        addRegions: function(regions) {
            this.regions = _.extend({}, this.regions, regions);
            return this._buildRegions(regions);
        },
        removeRegion: function(name) {
            delete this.regions[name];
            return this.regionManager.removeRegion(name);
        },
        getRegion: function(region) {
            return this.regionManager.get(region);
        },
        getRegions: function() {
            return this.regionManager.getRegions();
        },
        _buildRegions: function(regions) {
            var defaults = {
                regionClass: this.getOption("regionClass"),
                parentEl: _.partial(_.result, this, "el")
            };
            return this.regionManager.addRegions(regions, defaults);
        },
        _initializeRegions: function(options) {
            var regions;
            this._initRegionManager();
            regions = Marionette._getValue(this.regions, this, [ options ]) || {};
            var regionOptions = this.getOption.call(options, "regions");
            regionOptions = Marionette._getValue(regionOptions, this, [ options ]);
            _.extend(regions, regionOptions);
            regions = this.normalizeUIValues(regions);
            this.addRegions(regions);
        },
        _reInitializeRegions: function() {
            this.regionManager.invoke("reset");
        },
        getRegionManager: function() {
            return new Marionette.RegionManager();
        },
        _initRegionManager: function() {
            this.regionManager = this.getRegionManager();
            this.regionManager._parent = this;
            this.listenTo(this.regionManager, "before:add:region", function(name) {
                this.triggerMethod("before:add:region", name);
            });
            this.listenTo(this.regionManager, "add:region", function(name, region) {
                this[name] = region;
                this.triggerMethod("add:region", name, region);
            });
            this.listenTo(this.regionManager, "before:remove:region", function(name) {
                this.triggerMethod("before:remove:region", name);
            });
            this.listenTo(this.regionManager, "remove:region", function(name, region) {
                delete this[name];
                this.triggerMethod("remove:region", name, region);
            });
        },
        _getImmediateChildren: function() {
            return _.chain(this.regionManager.getRegions()).pluck("currentView").compact().value();
        }
    });
    Marionette.Behavior = Marionette.Object.extend({
        constructor: function(options, view) {
            this.view = view;
            this.defaults = _.result(this, "defaults") || {};
            this.options = _.extend({}, this.defaults, options);
            Marionette.Object.apply(this, arguments);
        },
        $: function() {
            return this.view.$.apply(this.view, arguments);
        },
        destroy: function() {
            this.stopListening();
        },
        proxyViewProperties: function(view) {
            this.$el = view.$el;
            this.el = view.el;
        }
    });
    Marionette.Behaviors = function(Marionette, _) {
        var delegateEventSplitter = /^(\S+)\s*(.*)$/;
        function Behaviors(view, behaviors) {
            if (!_.isObject(view.behaviors)) {
                return {};
            }
            behaviors = Behaviors.parseBehaviors(view, behaviors || _.result(view, "behaviors"));
            Behaviors.wrap(view, behaviors, _.keys(methods));
            return behaviors;
        }
        var methods = {
            behaviorTriggers: function(behaviorTriggers, behaviors) {
                var triggerBuilder = new BehaviorTriggersBuilder(this, behaviors);
                return triggerBuilder.buildBehaviorTriggers();
            },
            behaviorEvents: function(behaviorEvents, behaviors) {
                var _behaviorsEvents = {};
                var viewUI = this._uiBindings || _.result(this, "ui");
                _.each(behaviors, function(b, i) {
                    var _events = {};
                    var behaviorEvents = _.clone(_.result(b, "events")) || {};
                    var behaviorUI = b._uiBindings || _.result(b, "ui");
                    var ui = _.extend({}, viewUI, behaviorUI);
                    behaviorEvents = Marionette.normalizeUIKeys(behaviorEvents, ui);
                    var j = 0;
                    _.each(behaviorEvents, function(behaviour, key) {
                        var match = key.match(delegateEventSplitter);
                        var eventName = match[1] + "." + [ this.cid, i, j++, " " ].join(""), selector = match[2];
                        var eventKey = eventName + selector;
                        var handler = _.isFunction(behaviour) ? behaviour : b[behaviour];
                        _events[eventKey] = _.bind(handler, b);
                    }, this);
                    _behaviorsEvents = _.extend(_behaviorsEvents, _events);
                }, this);
                return _behaviorsEvents;
            }
        };
        _.extend(Behaviors, {
            behaviorsLookup: function() {
                throw new Marionette.Error({
                    message: "You must define where your behaviors are stored.",
                    url: "marionette.behaviors.html#behaviorslookup"
                });
            },
            getBehaviorClass: function(options, key) {
                if (options.behaviorClass) {
                    return options.behaviorClass;
                }
                return Marionette._getValue(Behaviors.behaviorsLookup, this, [ options, key ])[key];
            },
            parseBehaviors: function(view, behaviors) {
                return _.chain(behaviors).map(function(options, key) {
                    var BehaviorClass = Behaviors.getBehaviorClass(options, key);
                    var behavior = new BehaviorClass(options, view);
                    var nestedBehaviors = Behaviors.parseBehaviors(view, _.result(behavior, "behaviors"));
                    return [ behavior ].concat(nestedBehaviors);
                }).flatten().value();
            },
            wrap: function(view, behaviors, methodNames) {
                _.each(methodNames, function(methodName) {
                    view[methodName] = _.partial(methods[methodName], view[methodName], behaviors);
                });
            }
        });
        function BehaviorTriggersBuilder(view, behaviors) {
            this._view = view;
            this._viewUI = _.result(view, "ui");
            this._behaviors = behaviors;
            this._triggers = {};
        }
        _.extend(BehaviorTriggersBuilder.prototype, {
            buildBehaviorTriggers: function() {
                _.each(this._behaviors, this._buildTriggerHandlersForBehavior, this);
                return this._triggers;
            },
            _buildTriggerHandlersForBehavior: function(behavior, i) {
                var ui = _.extend({}, this._viewUI, _.result(behavior, "ui"));
                var triggersHash = _.clone(_.result(behavior, "triggers")) || {};
                triggersHash = Marionette.normalizeUIKeys(triggersHash, ui);
                _.each(triggersHash, _.bind(this._setHandlerForBehavior, this, behavior, i));
            },
            _setHandlerForBehavior: function(behavior, i, eventName, trigger) {
                var triggerKey = trigger.replace(/^\S+/, function(triggerName) {
                    return triggerName + "." + "behaviortriggers" + i;
                });
                this._triggers[triggerKey] = this._view._buildViewTrigger(eventName);
            }
        });
        return Behaviors;
    }(Marionette, _);
    Marionette.AppRouter = Backbone.Router.extend({
        constructor: function(options) {
            this.options = options || {};
            Backbone.Router.apply(this, arguments);
            var appRoutes = this.getOption("appRoutes");
            var controller = this._getController();
            this.processAppRoutes(controller, appRoutes);
            this.on("route", this._processOnRoute, this);
        },
        appRoute: function(route, methodName) {
            var controller = this._getController();
            this._addAppRoute(controller, route, methodName);
        },
        _processOnRoute: function(routeName, routeArgs) {
            if (_.isFunction(this.onRoute)) {
                var routePath = _.invert(this.getOption("appRoutes"))[routeName];
                this.onRoute(routeName, routePath, routeArgs);
            }
        },
        processAppRoutes: function(controller, appRoutes) {
            if (!appRoutes) {
                return;
            }
            var routeNames = _.keys(appRoutes).reverse();
            _.each(routeNames, function(route) {
                this._addAppRoute(controller, route, appRoutes[route]);
            }, this);
        },
        _getController: function() {
            return this.getOption("controller");
        },
        _addAppRoute: function(controller, route, methodName) {
            var method = controller[methodName];
            if (!method) {
                throw new Marionette.Error('Method "' + methodName + '" was not found on the controller');
            }
            this.route(route, methodName, _.bind(method, controller));
        },
        getOption: Marionette.proxyGetOption,
        triggerMethod: Marionette.triggerMethod,
        bindEntityEvents: Marionette.proxyBindEntityEvents,
        unbindEntityEvents: Marionette.proxyUnbindEntityEvents
    });
    Marionette.Application = Marionette.Object.extend({
        constructor: function(options) {
            this._initializeRegions(options);
            this._initCallbacks = new Marionette.Callbacks();
            this.submodules = {};
            _.extend(this, options);
            this._initChannel();
            Marionette.Object.call(this, options);
        },
        execute: function() {
            this.commands.execute.apply(this.commands, arguments);
        },
        request: function() {
            return this.reqres.request.apply(this.reqres, arguments);
        },
        addInitializer: function(initializer) {
            this._initCallbacks.add(initializer);
        },
        start: function(options) {
            this.triggerMethod("before:start", options);
            this._initCallbacks.run(options, this);
            this.triggerMethod("start", options);
        },
        addRegions: function(regions) {
            return this._regionManager.addRegions(regions);
        },
        emptyRegions: function() {
            return this._regionManager.emptyRegions();
        },
        removeRegion: function(region) {
            return this._regionManager.removeRegion(region);
        },
        getRegion: function(region) {
            return this._regionManager.get(region);
        },
        getRegions: function() {
            return this._regionManager.getRegions();
        },
        module: function(moduleNames, moduleDefinition) {
            var ModuleClass = Marionette.Module.getClass(moduleDefinition);
            var args = _.toArray(arguments);
            args.unshift(this);
            return ModuleClass.create.apply(ModuleClass, args);
        },
        getRegionManager: function() {
            return new Marionette.RegionManager();
        },
        _initializeRegions: function(options) {
            var regions = _.isFunction(this.regions) ? this.regions(options) : this.regions || {};
            this._initRegionManager();
            var optionRegions = Marionette.getOption(options, "regions");
            if (_.isFunction(optionRegions)) {
                optionRegions = optionRegions.call(this, options);
            }
            _.extend(regions, optionRegions);
            this.addRegions(regions);
            return this;
        },
        _initRegionManager: function() {
            this._regionManager = this.getRegionManager();
            this._regionManager._parent = this;
            this.listenTo(this._regionManager, "before:add:region", function() {
                Marionette._triggerMethod(this, "before:add:region", arguments);
            });
            this.listenTo(this._regionManager, "add:region", function(name, region) {
                this[name] = region;
                Marionette._triggerMethod(this, "add:region", arguments);
            });
            this.listenTo(this._regionManager, "before:remove:region", function() {
                Marionette._triggerMethod(this, "before:remove:region", arguments);
            });
            this.listenTo(this._regionManager, "remove:region", function(name) {
                delete this[name];
                Marionette._triggerMethod(this, "remove:region", arguments);
            });
        },
        _initChannel: function() {
            this.channelName = _.result(this, "channelName") || "global";
            this.channel = _.result(this, "channel") || Backbone.Wreqr.radio.channel(this.channelName);
            this.vent = _.result(this, "vent") || this.channel.vent;
            this.commands = _.result(this, "commands") || this.channel.commands;
            this.reqres = _.result(this, "reqres") || this.channel.reqres;
        }
    });
    Marionette.Module = function(moduleName, app, options) {
        this.moduleName = moduleName;
        this.options = _.extend({}, this.options, options);
        this.initialize = options.initialize || this.initialize;
        this.submodules = {};
        this._setupInitializersAndFinalizers();
        this.app = app;
        if (_.isFunction(this.initialize)) {
            this.initialize(moduleName, app, this.options);
        }
    };
    Marionette.Module.extend = Marionette.extend;
    _.extend(Marionette.Module.prototype, Backbone.Events, {
        startWithParent: true,
        initialize: function() {},
        addInitializer: function(callback) {
            this._initializerCallbacks.add(callback);
        },
        addFinalizer: function(callback) {
            this._finalizerCallbacks.add(callback);
        },
        start: function(options) {
            if (this._isInitialized) {
                return;
            }
            _.each(this.submodules, function(mod) {
                if (mod.startWithParent) {
                    mod.start(options);
                }
            });
            this.triggerMethod("before:start", options);
            this._initializerCallbacks.run(options, this);
            this._isInitialized = true;
            this.triggerMethod("start", options);
        },
        stop: function() {
            if (!this._isInitialized) {
                return;
            }
            this._isInitialized = false;
            this.triggerMethod("before:stop");
            _.invoke(this.submodules, "stop");
            this._finalizerCallbacks.run(undefined, this);
            this._initializerCallbacks.reset();
            this._finalizerCallbacks.reset();
            this.triggerMethod("stop");
        },
        addDefinition: function(moduleDefinition, customArgs) {
            this._runModuleDefinition(moduleDefinition, customArgs);
        },
        _runModuleDefinition: function(definition, customArgs) {
            if (!definition) {
                return;
            }
            var args = _.flatten([ this, this.app, Backbone, Marionette, Backbone.$, _, customArgs ]);
            definition.apply(this, args);
        },
        _setupInitializersAndFinalizers: function() {
            this._initializerCallbacks = new Marionette.Callbacks();
            this._finalizerCallbacks = new Marionette.Callbacks();
        },
        triggerMethod: Marionette.triggerMethod
    });
    _.extend(Marionette.Module, {
        create: function(app, moduleNames, moduleDefinition) {
            var module = app;
            var customArgs = _.rest(arguments, 3);
            moduleNames = moduleNames.split(".");
            var length = moduleNames.length;
            var moduleDefinitions = [];
            moduleDefinitions[length - 1] = moduleDefinition;
            _.each(moduleNames, function(moduleName, i) {
                var parentModule = module;
                module = this._getModule(parentModule, moduleName, app, moduleDefinition);
                this._addModuleDefinition(parentModule, module, moduleDefinitions[i], customArgs);
            }, this);
            return module;
        },
        _getModule: function(parentModule, moduleName, app, def, args) {
            var options = _.extend({}, def);
            var ModuleClass = this.getClass(def);
            var module = parentModule[moduleName];
            if (!module) {
                module = new ModuleClass(moduleName, app, options);
                parentModule[moduleName] = module;
                parentModule.submodules[moduleName] = module;
            }
            return module;
        },
        getClass: function(moduleDefinition) {
            var ModuleClass = Marionette.Module;
            if (!moduleDefinition) {
                return ModuleClass;
            }
            if (moduleDefinition.prototype instanceof ModuleClass) {
                return moduleDefinition;
            }
            return moduleDefinition.moduleClass || ModuleClass;
        },
        _addModuleDefinition: function(parentModule, module, def, args) {
            var fn = this._getDefine(def);
            var startWithParent = this._getStartWithParent(def, module);
            if (fn) {
                module.addDefinition(fn, args);
            }
            this._addStartWithParent(parentModule, module, startWithParent);
        },
        _getStartWithParent: function(def, module) {
            var swp;
            if (_.isFunction(def) && def.prototype instanceof Marionette.Module) {
                swp = module.constructor.prototype.startWithParent;
                return _.isUndefined(swp) ? true : swp;
            }
            if (_.isObject(def)) {
                swp = def.startWithParent;
                return _.isUndefined(swp) ? true : swp;
            }
            return true;
        },
        _getDefine: function(def) {
            if (_.isFunction(def) && !(def.prototype instanceof Marionette.Module)) {
                return def;
            }
            if (_.isObject(def)) {
                return def.define;
            }
            return null;
        },
        _addStartWithParent: function(parentModule, module, startWithParent) {
            module.startWithParent = module.startWithParent && startWithParent;
            if (!module.startWithParent || !!module.startWithParentIsConfigured) {
                return;
            }
            module.startWithParentIsConfigured = true;
            parentModule.addInitializer(function(options) {
                if (module.startWithParent) {
                    module.start(options);
                }
            });
        }
    });
    return Marionette;
});

(function(root, define, require, exports, module, factory, undef) {
    "use strict";
    if (typeof exports === "object") {
        module.exports = factory(require("underscore"), require("backbone"), require("jquery"));
    } else if (typeof define === "function" && define.amd) {
        define([ "underscore", "backbone", "jquery" ], function(_, Backbone, $) {
            _ = _ === undef ? root._ : _;
            Backbone = Backbone === undef ? root.Backbone : Backbone;
            $ = $ === undef ? root.$ : $;
            return root.Backbone = factory(_, Backbone, $);
        });
    } else {
        root.returnExportsGlobal = factory(root._, root.Backbone, root.$);
    }
})(this, this.define, this.require, this.exports, this.module, function(_, Backbone, $, undef) {
    "use strict";
    var Rpc = function(options) {
        this.options = options !== undef ? options : {};
        this.namespaceDelimiter = options !== undef && options.namespaceDelimiter !== undef ? options.namespaceDelimiter : this.namespaceDelimiter;
        this.contentType = options !== undef && options.contentType !== undef ? options.contentType : this.contentType;
        _.bindAll(this);
    }, oldConst = Backbone.Model.prototype.constructor, oldSync = Backbone.sync, storage = {};
    Rpc.prototype = {
        options: {},
        charset: "iso-8859-1",
        namespace: "",
        namespaceDelimiter: "/",
        contentType: "application/json",
        url: null,
        responseID: null,
        exceptions: {
            404: {
                code: -1,
                message: "404"
            },
            500: {
                code: -2,
                message: "500"
            },
            typeMissmatch: {
                code: -3,
                message: "Type missmatch"
            },
            badResponseId: {
                code: -4,
                message: "Bad response ID"
            },
            noResponse: {
                code: -5,
                message: "No response"
            },
            noDefError: {
                code: -6,
                message: "No error defined"
            },
            renderError: function(message, code) {
                return {
                    code: code !== undef ? -7 : code,
                    message: message ? "No error defined" : message
                };
            }
        },
        onSuccess: function(callback, id, data) {
            if (_.isFunction(callback) === true) {
                if (data === null || data === undef) {
                    this.handleExceptions(this.exceptions.noResponse);
                    return this;
                }
                if (data !== null && id !== String(data.id)) {
                    this.handleExceptions(this.exceptions.badResponseId);
                }
                callback.apply(this, [ data.result, data.error ]);
            } else {
                this.onError(data);
            }
        },
        onError: function(callback, data) {
            if (data === null || data === undef) {
                this.handleExceptions(this.exceptions.noResponse);
                return this;
            }
            if (null !== data.error && undef !== data.error) {
                this.handleExceptions(data.error);
            } else {
                this.handleExceptions(this.exceptions.noDefError);
            }
        },
        query: function(fn, params, callback) {
            var id = String(new Date().getTime()), ret = null;
            this.responseID = id;
            if (_.isArray(params) && _.isString(fn)) {
                ret = $.ajax({
                    contentType: this.contentType + "; charset=" + this.charset,
                    type: "POST",
                    dataType: "json",
                    url: this.url,
                    data: JSON.stringify({
                        jsonrpc: "2.0",
                        method: this.namespace + this.namespaceDelimiter + fn,
                        id: id,
                        params: params
                    }),
                    statusCode: {
                        404: _.bind(function() {
                            this.handleExceptions(this.exceptions["404"]);
                        }, this),
                        500: _.bind(function() {
                            this.handleExceptions(this.exceptions["500"]);
                        }, this)
                    },
                    success: _.bind(function(data, status, response) {
                        if (data !== null && data.error !== undef) {
                            this.onError(callback, data, status, response);
                        } else {
                            this.onSuccess(callback, id, data, status, response);
                        }
                    }, this),
                    error: _.bind(function(jXhr, status, response) {
                        if (jXhr.status !== 404 && jXhr.status !== 500) {
                            this.onError(callback, jXhr, status, response);
                        }
                    }, this)
                });
            } else {
                ret = this.handleExceptions(this.exceptions.typeMissmatch);
            }
            return ret;
        },
        checkMethods: function(cb, params, model, method, options, scb, ecb) {
            var definition = null, deeperNested = false, exec = null, valuableDefinition = [], changedAttributes = {}, def = null;
            method = method === "delete" ? "remove" : method;
            if (!_.isArray(model.methods[method]) && !_.isFunction(model.methods[method])) {
                return this.handleExceptions(this.exceptions.typeMissmatch);
            }
            if (_.isFunction(model.methods[method])) {
                if (!_.isString(storage[model.get("_rpcId")])) {
                    _.each(storage[model.get("_rpcId")], function(value, key) {
                        if (model.get(key) !== value) {
                            changedAttributes[key] = true;
                        }
                    });
                }
                storage[model.get("_rpcId")] = model.toJSON();
                definition = _.bind(model.methods[method], model)(changedAttributes, options);
            } else {
                definition = model.methods[method];
            }
            if (_.isArray(definition[0])) {
                deeperNested = true;
            }
            if (deeperNested !== true) {
                def = _.clone(definition);
                exec = def.shift();
                if (def.length > 0) {
                    _.each(def, function(param) {
                        if (param === "") {
                            valuableDefinition.push("");
                        } else {
                            if (model instanceof Backbone.Collection) {
                                if (model[param] !== undef) {
                                    if (_.isFunction(model[param])) {
                                        valuableDefinition.push(model[param]());
                                    } else {
                                        valuableDefinition.push(model[param]);
                                    }
                                } else {
                                    if (options[param] !== undef) {
                                        valuableDefinition.push(options[param]);
                                    }
                                }
                            } else {
                                if (model.get(param) !== undef) {
                                    valuableDefinition.push(model.get(param));
                                } else {
                                    if (options[param] !== undef) {
                                        valuableDefinition.push(options[param]);
                                    }
                                }
                            }
                        }
                    });
                } else {
                    valuableDefinition = [];
                }
                return cb(exec, valuableDefinition, scb, ecb);
            }
            _.each(definition, function(localdef) {
                var def = _.clone(localdef);
                exec = null;
                valuableDefinition = [];
                exec = def.shift();
                _.each(def, function(param) {
                    valuableDefinition.push(model.get(param));
                });
                return cb(exec, valuableDefinition, scb, ecb);
            });
            return null;
        },
        invoke: function(method, model, options) {
            var defOpts = {
                success: function(result) {
                    model.trigger("called:" + method, model, result);
                    if (options !== undef && _.isFunction(options.success)) {
                        options.success(model, result);
                    }
                },
                error: function(model, error) {
                    model.trigger("error", model, error);
                    model.trigger("error:" + method, model, error);
                    if (options !== undef && _.isFunction(options.error)) {
                        options.error(model, error);
                    }
                }
            };
            Backbone.sync(method, model, defOpts);
            return this;
        },
        defaultExceptionHandler: function(exception) {
            throw "Error code: " + exception.code + " - message: " + exception.message;
        },
        handleExceptions: function(exception) {
            var exceptionHandler = _.isFunction(this.options.exceptionHandler) ? this.options.exceptionHandler : this.defaultExceptionHandler;
            exceptionHandler.call(this, exception);
            return this;
        }
    };
    Backbone.Rpc = Rpc;
    Backbone.Model = Backbone.Model.extend({
        constructor: function(model) {
            if (this.rpc !== undef && _.isFunction(this.rpc.invoke) === true && this.methods !== undef) {
                _.each(this.methods, _.bind(function(method, signature) {
                    if ({
                        read: 1,
                        create: 1,
                        remove: 1,
                        update: 1
                    }[signature] !== 1) {
                        this[signature] = _.bind(function(options) {
                            this.rpc.invoke(signature, this, options);
                            return this;
                        }, this);
                    }
                }, this));
            }
            oldConst.apply(this, arguments);
        }
    });
    Backbone.sync = function(Rpc) {
        var rpc = null, sync = function(method, model, options) {
            var successCb = function(data, error) {
                if (error !== null && error !== undef) {
                    options.error(model, error);
                    return this;
                }
                if (model instanceof Backbone.Collection) {
                    if (data !== undef && data !== null) {
                        if (typeof data[0] === "object") {
                            _.each(data, function(item, key) {
                                item._rpcId = _.uniqueId("rpc_");
                                data[key] = item;
                                storage[item._rpcId] = item;
                            });
                        } else {
                            _.each(data, function(item, key) {
                                storage[key] = item;
                            });
                        }
                    }
                }
                if (model instanceof Backbone.Model && data !== undef && data !== null) {
                    data._rpcId = _.uniqueId("rpc_");
                    storage[data._rpcId] = data;
                }
                if (data === undef || data === null) {
                    data = [];
                }
                if (model.parsers !== undef && model.parsers[method] !== undef && _.isFunction(model.parsers[method])) {
                    model.parsers[method].apply(model, [ data ]);
                }
                options.success(data);
            }, errorCb = function(data) {
                options.error(model, data);
            };
            if (model.rpc instanceof Rpc) {
                rpc = model.rpc;
                rpc.url = _.isFunction(model.url) ? model.url() : model.url;
                if (_.isString(model.namespace) === true) {
                    rpc.namespace = model.namespace;
                }
                if (model.methods === undef) {
                    throw "Backbone.Rpc Error: No Method(s) given!";
                } else {
                    if (typeof model.params !== "object") {
                        model.params = {};
                    }
                }
                return rpc.checkMethods(rpc.query, model.params, model, method, options, successCb, errorCb);
            } else {
                return sync.previous.apply(model, arguments);
            }
            return null;
        };
        sync.previous = oldSync;
        return sync;
    }(Rpc);
    return Backbone;
});

(function(root, factory) {
    if (typeof define === "function" && define.amd) {
        define([ "backbone", "underscore" ], function(Backbone, _) {
            return factory(Backbone, _);
        });
    } else if (typeof exports !== "undefined") {
        var Backbone = require("backbone");
        var _ = require("underscore");
        module.exports = factory(Backbone, _);
    } else {
        factory(root.Backbone, root._);
    }
})(this, function(Backbone, _) {
    "use strict";
    var previousWreqr = Backbone.Wreqr;
    var Wreqr = Backbone.Wreqr = {};
    Backbone.Wreqr.VERSION = "1.3.2";
    Backbone.Wreqr.noConflict = function() {
        Backbone.Wreqr = previousWreqr;
        return this;
    };
    Wreqr.Handlers = function(Backbone, _) {
        "use strict";
        var Handlers = function(options) {
            this.options = options;
            this._wreqrHandlers = {};
            if (_.isFunction(this.initialize)) {
                this.initialize(options);
            }
        };
        Handlers.extend = Backbone.Model.extend;
        _.extend(Handlers.prototype, Backbone.Events, {
            setHandlers: function(handlers) {
                _.each(handlers, function(handler, name) {
                    var context = null;
                    if (_.isObject(handler) && !_.isFunction(handler)) {
                        context = handler.context;
                        handler = handler.callback;
                    }
                    this.setHandler(name, handler, context);
                }, this);
            },
            setHandler: function(name, handler, context) {
                var config = {
                    callback: handler,
                    context: context
                };
                this._wreqrHandlers[name] = config;
                this.trigger("handler:add", name, handler, context);
            },
            hasHandler: function(name) {
                return !!this._wreqrHandlers[name];
            },
            getHandler: function(name) {
                var config = this._wreqrHandlers[name];
                if (!config) {
                    return;
                }
                return function() {
                    return config.callback.apply(config.context, arguments);
                };
            },
            removeHandler: function(name) {
                delete this._wreqrHandlers[name];
            },
            removeAllHandlers: function() {
                this._wreqrHandlers = {};
            }
        });
        return Handlers;
    }(Backbone, _);
    Wreqr.CommandStorage = function() {
        "use strict";
        var CommandStorage = function(options) {
            this.options = options;
            this._commands = {};
            if (_.isFunction(this.initialize)) {
                this.initialize(options);
            }
        };
        _.extend(CommandStorage.prototype, Backbone.Events, {
            getCommands: function(commandName) {
                var commands = this._commands[commandName];
                if (!commands) {
                    commands = {
                        command: commandName,
                        instances: []
                    };
                    this._commands[commandName] = commands;
                }
                return commands;
            },
            addCommand: function(commandName, args) {
                var command = this.getCommands(commandName);
                command.instances.push(args);
            },
            clearCommands: function(commandName) {
                var command = this.getCommands(commandName);
                command.instances = [];
            }
        });
        return CommandStorage;
    }();
    Wreqr.Commands = function(Wreqr, _) {
        "use strict";
        return Wreqr.Handlers.extend({
            storageType: Wreqr.CommandStorage,
            constructor: function(options) {
                this.options = options || {};
                this._initializeStorage(this.options);
                this.on("handler:add", this._executeCommands, this);
                Wreqr.Handlers.prototype.constructor.apply(this, arguments);
            },
            execute: function(name) {
                name = arguments[0];
                var args = _.rest(arguments);
                if (this.hasHandler(name)) {
                    this.getHandler(name).apply(this, args);
                } else {
                    this.storage.addCommand(name, args);
                }
            },
            _executeCommands: function(name, handler, context) {
                var command = this.storage.getCommands(name);
                _.each(command.instances, function(args) {
                    handler.apply(context, args);
                });
                this.storage.clearCommands(name);
            },
            _initializeStorage: function(options) {
                var storage;
                var StorageType = options.storageType || this.storageType;
                if (_.isFunction(StorageType)) {
                    storage = new StorageType();
                } else {
                    storage = StorageType;
                }
                this.storage = storage;
            }
        });
    }(Wreqr, _);
    Wreqr.RequestResponse = function(Wreqr, _) {
        "use strict";
        return Wreqr.Handlers.extend({
            request: function(name) {
                if (this.hasHandler(name)) {
                    return this.getHandler(name).apply(this, _.rest(arguments));
                }
            }
        });
    }(Wreqr, _);
    Wreqr.EventAggregator = function(Backbone, _) {
        "use strict";
        var EA = function() {};
        EA.extend = Backbone.Model.extend;
        _.extend(EA.prototype, Backbone.Events);
        return EA;
    }(Backbone, _);
    Wreqr.Channel = function(Wreqr) {
        "use strict";
        var Channel = function(channelName) {
            this.vent = new Backbone.Wreqr.EventAggregator();
            this.reqres = new Backbone.Wreqr.RequestResponse();
            this.commands = new Backbone.Wreqr.Commands();
            this.channelName = channelName;
        };
        _.extend(Channel.prototype, {
            reset: function() {
                this.vent.off();
                this.vent.stopListening();
                this.reqres.removeAllHandlers();
                this.commands.removeAllHandlers();
                return this;
            },
            connectEvents: function(hash, context) {
                this._connect("vent", hash, context);
                return this;
            },
            connectCommands: function(hash, context) {
                this._connect("commands", hash, context);
                return this;
            },
            connectRequests: function(hash, context) {
                this._connect("reqres", hash, context);
                return this;
            },
            _connect: function(type, hash, context) {
                if (!hash) {
                    return;
                }
                context = context || this;
                var method = type === "vent" ? "on" : "setHandler";
                _.each(hash, function(fn, eventName) {
                    this[type][method](eventName, _.bind(fn, context));
                }, this);
            }
        });
        return Channel;
    }(Wreqr);
    Wreqr.radio = function(Wreqr, _) {
        "use strict";
        var Radio = function() {
            this._channels = {};
            this.vent = {};
            this.commands = {};
            this.reqres = {};
            this._proxyMethods();
        };
        _.extend(Radio.prototype, {
            channel: function(channelName) {
                if (!channelName) {
                    throw new Error("Channel must receive a name");
                }
                return this._getChannel(channelName);
            },
            _getChannel: function(channelName) {
                var channel = this._channels[channelName];
                if (!channel) {
                    channel = new Wreqr.Channel(channelName);
                    this._channels[channelName] = channel;
                }
                return channel;
            },
            _proxyMethods: function() {
                _.each([ "vent", "commands", "reqres" ], function(system) {
                    _.each(messageSystems[system], function(method) {
                        this[system][method] = proxyMethod(this, system, method);
                    }, this);
                }, this);
            }
        });
        var messageSystems = {
            vent: [ "on", "off", "trigger", "once", "stopListening", "listenTo", "listenToOnce" ],
            commands: [ "execute", "setHandler", "setHandlers", "removeHandler", "removeAllHandlers" ],
            reqres: [ "request", "setHandler", "setHandlers", "removeHandler", "removeAllHandlers" ]
        };
        var proxyMethod = function(radio, system, method) {
            return function(channelName) {
                var messageSystem = radio._getChannel(channelName)[system];
                return messageSystem[method].apply(messageSystem, _.rest(arguments));
            };
        };
        return new Radio();
    }(Wreqr, _);
    return Backbone.Wreqr;
});

(function(global) {
    var SortedMixin = {
        onBeforeRender: function() {
            this._isRendering = true;
        },
        onRender: function() {
            if (this.footer) {
                this.footerElement = this.$el.find(this.footer)[0];
            } else {
                this.footerElement = null;
            }
            delete this._isRendering;
        },
        appendHtml: function(collectionView, itemView, index) {
            var footerElement = this.footerElement;
            var el = collectionView.itemViewContainer || collectionView.el;
            var $el = collectionView.itemViewContainer ? $(collectionView.itemViewContainer) : collectionView.$el;
            if (this._isRendering) {
                if (footerElement) {
                    itemView.$el.insertBefore(footerElement);
                } else {
                    $el.append(itemView.el);
                }
                return;
            }
            var adjView;
            if (index === 0) {
                adjView = findViewAfter(0);
                if (adjView) {
                    itemView.$el.insertBefore(adjView.el);
                } else {
                    if (footerElement) {
                        itemView.$el.insertBefore(footerElement);
                    } else {
                        itemView.$el.appendTo(el);
                    }
                }
                return;
            }
            if (index == collectionView.collection.length - 1) {
                if (footerElement) {
                    itemView.$el.insertBefore(footerElement);
                } else {
                    itemView.$el.appendTo(el);
                }
                return;
            }
            adjView = findViewAtPos(index - 1);
            if (adjView) {
                itemView.$el.insertAfter(adjView.$el);
            } else {
                adjView = findViewAfter(index);
                if (adjView) {
                    itemView.$el.insertBefore(adjView.el);
                } else {
                    if (footerElement) {
                        itemView.$el.insertBefore(footerElement);
                    } else {
                        itemView.$el.appendTo(el);
                    }
                }
            }
            function findViewAfter(i) {
                var nearestI = 1;
                var adjView = findViewAtPos(i + 1);
                while (!adjView && i + nearestI + 1 < collectionView.collection.length - 1) {
                    nearestI += 1;
                    adjView = findViewAtPos(i + nearestI);
                }
                return adjView;
            }
            function findViewAtPos(i) {
                if (i >= collectionView.collection.length) return;
                var view = collectionView.children.findByModel(collectionView.collection.at(i));
                return view;
            }
        }
    };
    global.SortedMixin = SortedMixin;
    if (typeof define === "function" && define.amd) {
        define([], function() {
            return SortedMixin;
        });
    }
    return SortedMixin;
})(window);

(function($) {
    var rpcId = 1;
    var emptyFn = function() {};
    function makePostPayload(rpcParam) {
        return {
            jsonrpc: "2.0",
            method: rpcParam.method || "",
            params: rpcParam.params || {},
            id: rpcId++
        };
    }
    function makePostBody(rpcParam) {
        var payload = $.isArray(rpcParam) ? rpcParam.map(makePostPayload) : makePostPayload(rpcParam);
        return JSON.stringify(payload);
    }
    function sortBatchResults(results) {
        return results.sort(rpcIdComparator);
    }
    function rpcIdComparator(a, b) {
        return a.id < b.id ? -1 : 1;
    }
    function jsonrpc(rpcParam, ajaxOpts) {
        var deferred = new $.Deferred();
        ajaxOpts = ajaxOpts || {};
        var successCallback = ajaxOpts.success || emptyFn;
        var errorCallback = ajaxOpts.error || emptyFn;
        delete ajaxOpts.success;
        delete ajaxOpts.error;
        var isBatch = $.isArray(rpcParam);
        var ajaxParams = $.extend({
            url: (isBatch ? rpcParam[0].url : rpcParam.url) || $.jsonrpc.defaultUrl,
            contentType: "application/json",
            dataType: "text",
            dataFilter: function(data, type) {
                return JSON.parse(data);
            },
            type: "POST",
            processData: false,
            data: makePostBody(rpcParam),
            success: function(resp) {
                if (isBatch) {
                    var orderedResults = sortBatchResults(resp);
                    successCallback(orderedResults);
                    deferred.resolve(orderedResults);
                    return;
                } else {
                    if (resp.hasOwnProperty("error")) {
                        errorCallback(resp.error);
                        deferred.reject(resp.error);
                        return;
                    }
                    if (resp.hasOwnProperty("result")) {
                        successCallback(resp.result);
                        deferred.resolve(resp.result);
                        return;
                    }
                }
                throw "Invalid response returned";
            },
            error: function(xhr, status, error) {
                var result = null;
                if (error === "timeout") {
                    result = {
                        status: status,
                        code: -32e3,
                        message: "Request Timeout",
                        data: null
                    };
                } else {
                    try {
                        var res = JSON.parse(xhr.responseText);
                        result = res.error;
                    } catch (e) {
                        result = {
                            status: status,
                            code: -32603,
                            message: error,
                            data: xhr.responseText
                        };
                    }
                }
                errorCallback(result);
                deferred.reject(result);
            }
        }, ajaxOpts);
        $.ajax(ajaxParams);
        return deferred.promise();
    }
    $.extend({
        jsonrpc: jsonrpc
    });
    $.jsonrpc.defaultUrl = "/jsonrpc";
})(jQuery);

if (!window.JST) {
    window.JST = {};
}

+function($) {
    "use strict";
    var Affix = function(element, options) {
        this.options = $.extend({}, Affix.DEFAULTS, options);
        this.$target = $(this.options.target).on("scroll.bs.affix.data-api", $.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", $.proxy(this.checkPositionWithEventLoop, this));
        this.$element = $(element);
        this.affixed = this.unpin = this.pinnedOffset = null;
        this.checkPosition();
    };
    Affix.VERSION = "3.3.1";
    Affix.RESET = "affix affix-top affix-bottom";
    Affix.DEFAULTS = {
        offset: 0,
        target: window
    };
    Affix.prototype.getState = function(scrollHeight, height, offsetTop, offsetBottom) {
        var scrollTop = this.$target.scrollTop();
        var position = this.$element.offset();
        var targetHeight = this.$target.height();
        if (offsetTop != null && this.affixed == "top") return scrollTop < offsetTop ? "top" : false;
        if (this.affixed == "bottom") {
            if (offsetTop != null) return scrollTop + this.unpin <= position.top ? false : "bottom";
            return scrollTop + targetHeight <= scrollHeight - offsetBottom ? false : "bottom";
        }
        var initializing = this.affixed == null;
        var colliderTop = initializing ? scrollTop : position.top;
        var colliderHeight = initializing ? targetHeight : height;
        if (offsetTop != null && colliderTop <= offsetTop) return "top";
        if (offsetBottom != null && colliderTop + colliderHeight >= scrollHeight - offsetBottom) return "bottom";
        return false;
    };
    Affix.prototype.getPinnedOffset = function() {
        if (this.pinnedOffset) return this.pinnedOffset;
        this.$element.removeClass(Affix.RESET).addClass("affix");
        var scrollTop = this.$target.scrollTop();
        var position = this.$element.offset();
        return this.pinnedOffset = position.top - scrollTop;
    };
    Affix.prototype.checkPositionWithEventLoop = function() {
        setTimeout($.proxy(this.checkPosition, this), 1);
    };
    Affix.prototype.checkPosition = function() {
        if (!this.$element.is(":visible")) return;
        var height = this.$element.height();
        var offset = this.options.offset;
        var offsetTop = offset.top;
        var offsetBottom = offset.bottom;
        var scrollHeight = $("body").height();
        if (typeof offset != "object") offsetBottom = offsetTop = offset;
        if (typeof offsetTop == "function") offsetTop = offset.top(this.$element);
        if (typeof offsetBottom == "function") offsetBottom = offset.bottom(this.$element);
        var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom);
        if (this.affixed != affix) {
            if (this.unpin != null) this.$element.css("top", "");
            var affixType = "affix" + (affix ? "-" + affix : "");
            var e = $.Event(affixType + ".bs.affix");
            this.$element.trigger(e);
            if (e.isDefaultPrevented()) return;
            this.affixed = affix;
            this.unpin = affix == "bottom" ? this.getPinnedOffset() : null;
            this.$element.removeClass(Affix.RESET).addClass(affixType).trigger(affixType.replace("affix", "affixed") + ".bs.affix");
        }
        if (affix == "bottom") {
            this.$element.offset({
                top: scrollHeight - height - offsetBottom
            });
        }
    };
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.affix");
            var options = typeof option == "object" && option;
            if (!data) $this.data("bs.affix", data = new Affix(this, options));
            if (typeof option == "string") data[option]();
        });
    }
    var old = $.fn.affix;
    $.fn.affix = Plugin;
    $.fn.affix.Constructor = Affix;
    $.fn.affix.noConflict = function() {
        $.fn.affix = old;
        return this;
    };
    $(window).on("load", function() {
        $('[data-spy="affix"]').each(function() {
            var $spy = $(this);
            var data = $spy.data();
            data.offset = data.offset || {};
            if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom;
            if (data.offsetTop != null) data.offset.top = data.offsetTop;
            Plugin.call($spy, data);
        });
    });
}(jQuery);

+function($) {
    "use strict";
    var dismiss = '[data-dismiss="alert"]';
    var Alert = function(el) {
        $(el).on("click", dismiss, this.close);
    };
    Alert.VERSION = "3.3.1";
    Alert.TRANSITION_DURATION = 150;
    Alert.prototype.close = function(e) {
        var $this = $(this);
        var selector = $this.attr("data-target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        var $parent = $(selector);
        if (e) e.preventDefault();
        if (!$parent.length) {
            $parent = $this.closest(".alert");
        }
        $parent.trigger(e = $.Event("close.bs.alert"));
        if (e.isDefaultPrevented()) return;
        $parent.removeClass("in");
        function removeElement() {
            $parent.detach().trigger("closed.bs.alert").remove();
        }
        $.support.transition && $parent.hasClass("fade") ? $parent.one("bsTransitionEnd", removeElement).emulateTransitionEnd(Alert.TRANSITION_DURATION) : removeElement();
    };
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.alert");
            if (!data) $this.data("bs.alert", data = new Alert(this));
            if (typeof option == "string") data[option].call($this);
        });
    }
    var old = $.fn.alert;
    $.fn.alert = Plugin;
    $.fn.alert.Constructor = Alert;
    $.fn.alert.noConflict = function() {
        $.fn.alert = old;
        return this;
    };
    $(document).on("click.bs.alert.data-api", dismiss, Alert.prototype.close);
}(jQuery);

+function($) {
    "use strict";
    var Button = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Button.DEFAULTS, options);
        this.isLoading = false;
    };
    Button.VERSION = "3.3.1";
    Button.DEFAULTS = {
        loadingText: "loading..."
    };
    Button.prototype.setState = function(state) {
        var d = "disabled";
        var $el = this.$element;
        var val = $el.is("input") ? "val" : "html";
        var data = $el.data();
        state = state + "Text";
        if (data.resetText == null) $el.data("resetText", $el[val]());
        setTimeout($.proxy(function() {
            $el[val](data[state] == null ? this.options[state] : data[state]);
            if (state == "loadingText") {
                this.isLoading = true;
                $el.addClass(d).attr(d, d);
            } else if (this.isLoading) {
                this.isLoading = false;
                $el.removeClass(d).removeAttr(d);
            }
        }, this), 0);
    };
    Button.prototype.toggle = function() {
        var changed = true;
        var $parent = this.$element.closest('[data-toggle="buttons"]');
        if ($parent.length) {
            var $input = this.$element.find("input");
            if ($input.prop("type") == "radio") {
                if ($input.prop("checked") && this.$element.hasClass("active")) changed = false; else $parent.find(".active").removeClass("active");
            }
            if (changed) $input.prop("checked", !this.$element.hasClass("active")).trigger("change");
        } else {
            this.$element.attr("aria-pressed", !this.$element.hasClass("active"));
        }
        if (changed) this.$element.toggleClass("active");
    };
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.button");
            var options = typeof option == "object" && option;
            if (!data) $this.data("bs.button", data = new Button(this, options));
            if (option == "toggle") data.toggle(); else if (option) data.setState(option);
        });
    }
    var old = $.fn.button;
    $.fn.button = Plugin;
    $.fn.button.Constructor = Button;
    $.fn.button.noConflict = function() {
        $.fn.button = old;
        return this;
    };
    $(document).on("click.bs.button.data-api", '[data-toggle^="button"]', function(e) {
        var $btn = $(e.target);
        if (!$btn.hasClass("btn")) $btn = $btn.closest(".btn");
        Plugin.call($btn, "toggle");
        e.preventDefault();
    }).on("focus.bs.button.data-api blur.bs.button.data-api", '[data-toggle^="button"]', function(e) {
        $(e.target).closest(".btn").toggleClass("focus", /^focus(in)?$/.test(e.type));
    });
}(jQuery);

+function($) {
    "use strict";
    var Carousel = function(element, options) {
        this.$element = $(element);
        this.$indicators = this.$element.find(".carousel-indicators");
        this.options = options;
        this.paused = this.sliding = this.interval = this.$active = this.$items = null;
        this.options.keyboard && this.$element.on("keydown.bs.carousel", $.proxy(this.keydown, this));
        this.options.pause == "hover" && !("ontouchstart" in document.documentElement) && this.$element.on("mouseenter.bs.carousel", $.proxy(this.pause, this)).on("mouseleave.bs.carousel", $.proxy(this.cycle, this));
    };
    Carousel.VERSION = "3.3.1";
    Carousel.TRANSITION_DURATION = 600;
    Carousel.DEFAULTS = {
        interval: 5e3,
        pause: "hover",
        wrap: true,
        keyboard: true
    };
    Carousel.prototype.keydown = function(e) {
        if (/input|textarea/i.test(e.target.tagName)) return;
        switch (e.which) {
          case 37:
            this.prev();
            break;

          case 39:
            this.next();
            break;

          default:
            return;
        }
        e.preventDefault();
    };
    Carousel.prototype.cycle = function(e) {
        e || (this.paused = false);
        this.interval && clearInterval(this.interval);
        this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));
        return this;
    };
    Carousel.prototype.getItemIndex = function(item) {
        this.$items = item.parent().children(".item");
        return this.$items.index(item || this.$active);
    };
    Carousel.prototype.getItemForDirection = function(direction, active) {
        var delta = direction == "prev" ? -1 : 1;
        var activeIndex = this.getItemIndex(active);
        var itemIndex = (activeIndex + delta) % this.$items.length;
        return this.$items.eq(itemIndex);
    };
    Carousel.prototype.to = function(pos) {
        var that = this;
        var activeIndex = this.getItemIndex(this.$active = this.$element.find(".item.active"));
        if (pos > this.$items.length - 1 || pos < 0) return;
        if (this.sliding) return this.$element.one("slid.bs.carousel", function() {
            that.to(pos);
        });
        if (activeIndex == pos) return this.pause().cycle();
        return this.slide(pos > activeIndex ? "next" : "prev", this.$items.eq(pos));
    };
    Carousel.prototype.pause = function(e) {
        e || (this.paused = true);
        if (this.$element.find(".next, .prev").length && $.support.transition) {
            this.$element.trigger($.support.transition.end);
            this.cycle(true);
        }
        this.interval = clearInterval(this.interval);
        return this;
    };
    Carousel.prototype.next = function() {
        if (this.sliding) return;
        return this.slide("next");
    };
    Carousel.prototype.prev = function() {
        if (this.sliding) return;
        return this.slide("prev");
    };
    Carousel.prototype.slide = function(type, next) {
        var $active = this.$element.find(".item.active");
        var $next = next || this.getItemForDirection(type, $active);
        var isCycling = this.interval;
        var direction = type == "next" ? "left" : "right";
        var fallback = type == "next" ? "first" : "last";
        var that = this;
        if (!$next.length) {
            if (!this.options.wrap) return;
            $next = this.$element.find(".item")[fallback]();
        }
        if ($next.hasClass("active")) return this.sliding = false;
        var relatedTarget = $next[0];
        var slideEvent = $.Event("slide.bs.carousel", {
            relatedTarget: relatedTarget,
            direction: direction
        });
        this.$element.trigger(slideEvent);
        if (slideEvent.isDefaultPrevented()) return;
        this.sliding = true;
        isCycling && this.pause();
        if (this.$indicators.length) {
            this.$indicators.find(".active").removeClass("active");
            var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)]);
            $nextIndicator && $nextIndicator.addClass("active");
        }
        var slidEvent = $.Event("slid.bs.carousel", {
            relatedTarget: relatedTarget,
            direction: direction
        });
        if ($.support.transition && this.$element.hasClass("slide")) {
            $next.addClass(type);
            $next[0].offsetWidth;
            $active.addClass(direction);
            $next.addClass(direction);
            $active.one("bsTransitionEnd", function() {
                $next.removeClass([ type, direction ].join(" ")).addClass("active");
                $active.removeClass([ "active", direction ].join(" "));
                that.sliding = false;
                setTimeout(function() {
                    that.$element.trigger(slidEvent);
                }, 0);
            }).emulateTransitionEnd(Carousel.TRANSITION_DURATION);
        } else {
            $active.removeClass("active");
            $next.addClass("active");
            this.sliding = false;
            this.$element.trigger(slidEvent);
        }
        isCycling && this.cycle();
        return this;
    };
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.carousel");
            var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == "object" && option);
            var action = typeof option == "string" ? option : options.slide;
            if (!data) $this.data("bs.carousel", data = new Carousel(this, options));
            if (typeof option == "number") data.to(option); else if (action) data[action](); else if (options.interval) data.pause().cycle();
        });
    }
    var old = $.fn.carousel;
    $.fn.carousel = Plugin;
    $.fn.carousel.Constructor = Carousel;
    $.fn.carousel.noConflict = function() {
        $.fn.carousel = old;
        return this;
    };
    var clickHandler = function(e) {
        var href;
        var $this = $(this);
        var $target = $($this.attr("data-target") || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, ""));
        if (!$target.hasClass("carousel")) return;
        var options = $.extend({}, $target.data(), $this.data());
        var slideIndex = $this.attr("data-slide-to");
        if (slideIndex) options.interval = false;
        Plugin.call($target, options);
        if (slideIndex) {
            $target.data("bs.carousel").to(slideIndex);
        }
        e.preventDefault();
    };
    $(document).on("click.bs.carousel.data-api", "[data-slide]", clickHandler).on("click.bs.carousel.data-api", "[data-slide-to]", clickHandler);
    $(window).on("load", function() {
        $('[data-ride="carousel"]').each(function() {
            var $carousel = $(this);
            Plugin.call($carousel, $carousel.data());
        });
    });
}(jQuery);

+function($) {
    "use strict";
    var Collapse = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Collapse.DEFAULTS, options);
        this.$trigger = $(this.options.trigger).filter('[href="#' + element.id + '"], [data-target="#' + element.id + '"]');
        this.transitioning = null;
        if (this.options.parent) {
            this.$parent = this.getParent();
        } else {
            this.addAriaAndCollapsedClass(this.$element, this.$trigger);
        }
        if (this.options.toggle) this.toggle();
    };
    Collapse.VERSION = "3.3.1";
    Collapse.TRANSITION_DURATION = 350;
    Collapse.DEFAULTS = {
        toggle: true,
        trigger: '[data-toggle="collapse"]'
    };
    Collapse.prototype.dimension = function() {
        var hasWidth = this.$element.hasClass("width");
        return hasWidth ? "width" : "height";
    };
    Collapse.prototype.show = function() {
        if (this.transitioning || this.$element.hasClass("in")) return;
        var activesData;
        var actives = this.$parent && this.$parent.find("> .panel").children(".in, .collapsing");
        if (actives && actives.length) {
            activesData = actives.data("bs.collapse");
            if (activesData && activesData.transitioning) return;
        }
        var startEvent = $.Event("show.bs.collapse");
        this.$element.trigger(startEvent);
        if (startEvent.isDefaultPrevented()) return;
        if (actives && actives.length) {
            Plugin.call(actives, "hide");
            activesData || actives.data("bs.collapse", null);
        }
        var dimension = this.dimension();
        this.$element.removeClass("collapse").addClass("collapsing")[dimension](0).attr("aria-expanded", true);
        this.$trigger.removeClass("collapsed").attr("aria-expanded", true);
        this.transitioning = 1;
        var complete = function() {
            this.$element.removeClass("collapsing").addClass("collapse in")[dimension]("");
            this.transitioning = 0;
            this.$element.trigger("shown.bs.collapse");
        };
        if (!$.support.transition) return complete.call(this);
        var scrollSize = $.camelCase([ "scroll", dimension ].join("-"));
        this.$element.one("bsTransitionEnd", $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize]);
    };
    Collapse.prototype.hide = function() {
        if (this.transitioning || !this.$element.hasClass("in")) return;
        var startEvent = $.Event("hide.bs.collapse");
        this.$element.trigger(startEvent);
        if (startEvent.isDefaultPrevented()) return;
        var dimension = this.dimension();
        this.$element[dimension](this.$element[dimension]())[0].offsetHeight;
        this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded", false);
        this.$trigger.addClass("collapsed").attr("aria-expanded", false);
        this.transitioning = 1;
        var complete = function() {
            this.transitioning = 0;
            this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse");
        };
        if (!$.support.transition) return complete.call(this);
        this.$element[dimension](0).one("bsTransitionEnd", $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION);
    };
    Collapse.prototype.toggle = function() {
        this[this.$element.hasClass("in") ? "hide" : "show"]();
    };
    Collapse.prototype.getParent = function() {
        return $(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each($.proxy(function(i, element) {
            var $element = $(element);
            this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element);
        }, this)).end();
    };
    Collapse.prototype.addAriaAndCollapsedClass = function($element, $trigger) {
        var isOpen = $element.hasClass("in");
        $element.attr("aria-expanded", isOpen);
        $trigger.toggleClass("collapsed", !isOpen).attr("aria-expanded", isOpen);
    };
    function getTargetFromTrigger($trigger) {
        var href;
        var target = $trigger.attr("data-target") || (href = $trigger.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "");
        return $(target);
    }
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.collapse");
            var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == "object" && option);
            if (!data && options.toggle && option == "show") options.toggle = false;
            if (!data) $this.data("bs.collapse", data = new Collapse(this, options));
            if (typeof option == "string") data[option]();
        });
    }
    var old = $.fn.collapse;
    $.fn.collapse = Plugin;
    $.fn.collapse.Constructor = Collapse;
    $.fn.collapse.noConflict = function() {
        $.fn.collapse = old;
        return this;
    };
    $(document).on("click.bs.collapse.data-api", '[data-toggle="collapse"]', function(e) {
        var $this = $(this);
        if (!$this.attr("data-target")) e.preventDefault();
        var $target = getTargetFromTrigger($this);
        var data = $target.data("bs.collapse");
        var option = data ? "toggle" : $.extend({}, $this.data(), {
            trigger: this
        });
        Plugin.call($target, option);
    });
}(jQuery);

+function($) {
    "use strict";
    var backdrop = ".dropdown-backdrop";
    var toggle = '[data-toggle="dropdown"]';
    var Dropdown = function(element) {
        $(element).on("click.bs.dropdown", this.toggle);
    };
    Dropdown.VERSION = "3.3.1";
    Dropdown.prototype.toggle = function(e) {
        var $this = $(this);
        if ($this.is(".disabled, :disabled")) return;
        var $parent = getParent($this);
        var isActive = $parent.hasClass("open");
        clearMenus();
        if (!isActive) {
            if ("ontouchstart" in document.documentElement && !$parent.closest(".navbar-nav").length) {
                $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on("click", clearMenus);
            }
            var relatedTarget = {
                relatedTarget: this
            };
            $parent.trigger(e = $.Event("show.bs.dropdown", relatedTarget));
            if (e.isDefaultPrevented()) return;
            $this.trigger("focus").attr("aria-expanded", "true");
            $parent.toggleClass("open").trigger("shown.bs.dropdown", relatedTarget);
        }
        return false;
    };
    Dropdown.prototype.keydown = function(e) {
        if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return;
        var $this = $(this);
        e.preventDefault();
        e.stopPropagation();
        if ($this.is(".disabled, :disabled")) return;
        var $parent = getParent($this);
        var isActive = $parent.hasClass("open");
        if (!isActive && e.which != 27 || isActive && e.which == 27) {
            if (e.which == 27) $parent.find(toggle).trigger("focus");
            return $this.trigger("click");
        }
        var desc = " li:not(.divider):visible a";
        var $items = $parent.find('[role="menu"]' + desc + ', [role="listbox"]' + desc);
        if (!$items.length) return;
        var index = $items.index(e.target);
        if (e.which == 38 && index > 0) index--;
        if (e.which == 40 && index < $items.length - 1) index++;
        if (!~index) index = 0;
        $items.eq(index).trigger("focus");
    };
    function clearMenus(e) {
        if (e && e.which === 3) return;
        $(backdrop).remove();
        $(toggle).each(function() {
            var $this = $(this);
            var $parent = getParent($this);
            var relatedTarget = {
                relatedTarget: this
            };
            if (!$parent.hasClass("open")) return;
            $parent.trigger(e = $.Event("hide.bs.dropdown", relatedTarget));
            if (e.isDefaultPrevented()) return;
            $this.attr("aria-expanded", "false");
            $parent.removeClass("open").trigger("hidden.bs.dropdown", relatedTarget);
        });
    }
    function getParent($this) {
        var selector = $this.attr("data-target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        var $parent = selector && $(selector);
        return $parent && $parent.length ? $parent : $this.parent();
    }
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.dropdown");
            if (!data) $this.data("bs.dropdown", data = new Dropdown(this));
            if (typeof option == "string") data[option].call($this);
        });
    }
    var old = $.fn.dropdown;
    $.fn.dropdown = Plugin;
    $.fn.dropdown.Constructor = Dropdown;
    $.fn.dropdown.noConflict = function() {
        $.fn.dropdown = old;
        return this;
    };
    $(document).on("click.bs.dropdown.data-api", clearMenus).on("click.bs.dropdown.data-api", ".dropdown form", function(e) {
        e.stopPropagation();
    }).on("click.bs.dropdown.data-api", toggle, Dropdown.prototype.toggle).on("keydown.bs.dropdown.data-api", toggle, Dropdown.prototype.keydown).on("keydown.bs.dropdown.data-api", '[role="menu"]', Dropdown.prototype.keydown).on("keydown.bs.dropdown.data-api", '[role="listbox"]', Dropdown.prototype.keydown);
}(jQuery);

+function($) {
    "use strict";
    var Tab = function(element) {
        this.element = $(element);
    };
    Tab.VERSION = "3.3.1";
    Tab.TRANSITION_DURATION = 150;
    Tab.prototype.show = function() {
        var $this = this.element;
        var $ul = $this.closest("ul:not(.dropdown-menu)");
        var selector = $this.data("target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        if ($this.parent("li").hasClass("active")) return;
        var $previous = $ul.find(".active:last a");
        var hideEvent = $.Event("hide.bs.tab", {
            relatedTarget: $this[0]
        });
        var showEvent = $.Event("show.bs.tab", {
            relatedTarget: $previous[0]
        });
        $previous.trigger(hideEvent);
        $this.trigger(showEvent);
        if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return;
        var $target = $(selector);
        this.activate($this.closest("li"), $ul);
        this.activate($target, $target.parent(), function() {
            $previous.trigger({
                type: "hidden.bs.tab",
                relatedTarget: $this[0]
            });
            $this.trigger({
                type: "shown.bs.tab",
                relatedTarget: $previous[0]
            });
        });
    };
    Tab.prototype.activate = function(element, container, callback) {
        var $active = container.find("> .active");
        var transition = callback && $.support.transition && ($active.length && $active.hasClass("fade") || !!container.find("> .fade").length);
        function next() {
            $active.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", false);
            element.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded", true);
            if (transition) {
                element[0].offsetWidth;
                element.addClass("in");
            } else {
                element.removeClass("fade");
            }
            if (element.parent(".dropdown-menu")) {
                element.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", true);
            }
            callback && callback();
        }
        $active.length && transition ? $active.one("bsTransitionEnd", next).emulateTransitionEnd(Tab.TRANSITION_DURATION) : next();
        $active.removeClass("in");
    };
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.tab");
            if (!data) $this.data("bs.tab", data = new Tab(this));
            if (typeof option == "string") data[option]();
        });
    }
    var old = $.fn.tab;
    $.fn.tab = Plugin;
    $.fn.tab.Constructor = Tab;
    $.fn.tab.noConflict = function() {
        $.fn.tab = old;
        return this;
    };
    var clickHandler = function(e) {
        e.preventDefault();
        Plugin.call($(this), "show");
    };
    $(document).on("click.bs.tab.data-api", '[data-toggle="tab"]', clickHandler).on("click.bs.tab.data-api", '[data-toggle="pill"]', clickHandler);
}(jQuery);

+function($) {
    "use strict";
    function transitionEnd() {
        var el = document.createElement("bootstrap");
        var transEndEventNames = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "oTransitionEnd otransitionend",
            transition: "transitionend"
        };
        for (var name in transEndEventNames) {
            if (el.style[name] !== undefined) {
                return {
                    end: transEndEventNames[name]
                };
            }
        }
        return false;
    }
    $.fn.emulateTransitionEnd = function(duration) {
        var called = false;
        var $el = this;
        $(this).one("bsTransitionEnd", function() {
            called = true;
        });
        var callback = function() {
            if (!called) $($el).trigger($.support.transition.end);
        };
        setTimeout(callback, duration);
        return this;
    };
    $(function() {
        $.support.transition = transitionEnd();
        if (!$.support.transition) return;
        $.event.special.bsTransitionEnd = {
            bindType: $.support.transition.end,
            delegateType: $.support.transition.end,
            handle: function(e) {
                if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);
            }
        };
    });
}(jQuery);

+function($) {
    "use strict";
    function ScrollSpy(element, options) {
        var process = $.proxy(this.process, this);
        this.$body = $("body");
        this.$scrollElement = $(element).is("body") ? $(window) : $(element);
        this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
        this.selector = (this.options.target || "") + " .nav li > a";
        this.offsets = [];
        this.targets = [];
        this.activeTarget = null;
        this.scrollHeight = 0;
        this.$scrollElement.on("scroll.bs.scrollspy", process);
        this.refresh();
        this.process();
    }
    ScrollSpy.VERSION = "3.3.1";
    ScrollSpy.DEFAULTS = {
        offset: 10
    };
    ScrollSpy.prototype.getScrollHeight = function() {
        return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
    };
    ScrollSpy.prototype.refresh = function() {
        var offsetMethod = "offset";
        var offsetBase = 0;
        if (!$.isWindow(this.$scrollElement[0])) {
            offsetMethod = "position";
            offsetBase = this.$scrollElement.scrollTop();
        }
        this.offsets = [];
        this.targets = [];
        this.scrollHeight = this.getScrollHeight();
        var self = this;
        this.$body.find(this.selector).map(function() {
            var $el = $(this);
            var href = $el.data("target") || $el.attr("href");
            var $href = /^#./.test(href) && $(href);
            return $href && $href.length && $href.is(":visible") && [ [ $href[offsetMethod]().top + offsetBase, href ] ] || null;
        }).sort(function(a, b) {
            return a[0] - b[0];
        }).each(function() {
            self.offsets.push(this[0]);
            self.targets.push(this[1]);
        });
    };
    ScrollSpy.prototype.process = function() {
        var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
        var scrollHeight = this.getScrollHeight();
        var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height();
        var offsets = this.offsets;
        var targets = this.targets;
        var activeTarget = this.activeTarget;
        var i;
        if (this.scrollHeight != scrollHeight) {
            this.refresh();
        }
        if (scrollTop >= maxScroll) {
            return activeTarget != (i = targets[targets.length - 1]) && this.activate(i);
        }
        if (activeTarget && scrollTop < offsets[0]) {
            this.activeTarget = null;
            return this.clear();
        }
        for (i = offsets.length; i--; ) {
            activeTarget != targets[i] && scrollTop >= offsets[i] && (!offsets[i + 1] || scrollTop <= offsets[i + 1]) && this.activate(targets[i]);
        }
    };
    ScrollSpy.prototype.activate = function(target) {
        this.activeTarget = target;
        this.clear();
        var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';
        var active = $(selector).parents("li").addClass("active");
        if (active.parent(".dropdown-menu").length) {
            active = active.closest("li.dropdown").addClass("active");
        }
        active.trigger("activate.bs.scrollspy");
    };
    ScrollSpy.prototype.clear = function() {
        $(this.selector).parentsUntil(this.options.target, ".active").removeClass("active");
    };
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.scrollspy");
            var options = typeof option == "object" && option;
            if (!data) $this.data("bs.scrollspy", data = new ScrollSpy(this, options));
            if (typeof option == "string") data[option]();
        });
    }
    var old = $.fn.scrollspy;
    $.fn.scrollspy = Plugin;
    $.fn.scrollspy.Constructor = ScrollSpy;
    $.fn.scrollspy.noConflict = function() {
        $.fn.scrollspy = old;
        return this;
    };
    $(window).on("load.bs.scrollspy.data-api", function() {
        $('[data-spy="scroll"]').each(function() {
            var $spy = $(this);
            Plugin.call($spy, $spy.data());
        });
    });
}(jQuery);

+function($) {
    "use strict";
    var Modal = function(element, options) {
        this.options = options;
        this.$body = $(document.body);
        this.$element = $(element);
        this.$backdrop = this.isShown = null;
        this.scrollbarWidth = 0;
        if (this.options.remote) {
            this.$element.find(".modal-content").load(this.options.remote, $.proxy(function() {
                this.$element.trigger("loaded.bs.modal");
            }, this));
        }
    };
    Modal.VERSION = "3.3.1";
    Modal.TRANSITION_DURATION = 300;
    Modal.BACKDROP_TRANSITION_DURATION = 150;
    Modal.DEFAULTS = {
        backdrop: true,
        keyboard: true,
        show: true
    };
    Modal.prototype.toggle = function(_relatedTarget) {
        return this.isShown ? this.hide() : this.show(_relatedTarget);
    };
    Modal.prototype.show = function(_relatedTarget) {
        var that = this;
        var e = $.Event("show.bs.modal", {
            relatedTarget: _relatedTarget
        });
        this.$element.trigger(e);
        if (this.isShown || e.isDefaultPrevented()) return;
        this.isShown = true;
        this.checkScrollbar();
        this.setScrollbar();
        this.$body.addClass("modal-open");
        this.escape();
        this.resize();
        this.$element.on("click.dismiss.bs.modal", '[data-dismiss="modal"]', $.proxy(this.hide, this));
        this.backdrop(function() {
            var transition = $.support.transition && that.$element.hasClass("fade");
            if (!that.$element.parent().length) {
                that.$element.appendTo(that.$body);
            }
            that.$element.show().scrollTop(0);
            if (that.options.backdrop) that.adjustBackdrop();
            that.adjustDialog();
            if (transition) {
                that.$element[0].offsetWidth;
            }
            that.$element.addClass("in").attr("aria-hidden", false);
            that.enforceFocus();
            var e = $.Event("shown.bs.modal", {
                relatedTarget: _relatedTarget
            });
            transition ? that.$element.find(".modal-dialog").one("bsTransitionEnd", function() {
                that.$element.trigger("focus").trigger(e);
            }).emulateTransitionEnd(Modal.TRANSITION_DURATION) : that.$element.trigger("focus").trigger(e);
        });
    };
    Modal.prototype.hide = function(e) {
        if (e) e.preventDefault();
        e = $.Event("hide.bs.modal");
        this.$element.trigger(e);
        if (!this.isShown || e.isDefaultPrevented()) return;
        this.isShown = false;
        this.escape();
        this.resize();
        $(document).off("focusin.bs.modal");
        this.$element.removeClass("in").attr("aria-hidden", true).off("click.dismiss.bs.modal");
        $.support.transition && this.$element.hasClass("fade") ? this.$element.one("bsTransitionEnd", $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION) : this.hideModal();
    };
    Modal.prototype.enforceFocus = function() {
        $(document).off("focusin.bs.modal").on("focusin.bs.modal", $.proxy(function(e) {
            if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
                this.$element.trigger("focus");
            }
        }, this));
    };
    Modal.prototype.escape = function() {
        if (this.isShown && this.options.keyboard) {
            this.$element.on("keydown.dismiss.bs.modal", $.proxy(function(e) {
                e.which == 27 && this.hide();
            }, this));
        } else if (!this.isShown) {
            this.$element.off("keydown.dismiss.bs.modal");
        }
    };
    Modal.prototype.resize = function() {
        if (this.isShown) {
            $(window).on("resize.bs.modal", $.proxy(this.handleUpdate, this));
        } else {
            $(window).off("resize.bs.modal");
        }
    };
    Modal.prototype.hideModal = function() {
        var that = this;
        this.$element.hide();
        this.backdrop(function() {
            that.$body.removeClass("modal-open");
            that.resetAdjustments();
            that.resetScrollbar();
            that.$element.trigger("hidden.bs.modal");
        });
    };
    Modal.prototype.removeBackdrop = function() {
        this.$backdrop && this.$backdrop.remove();
        this.$backdrop = null;
    };
    Modal.prototype.backdrop = function(callback) {
        var that = this;
        var animate = this.$element.hasClass("fade") ? "fade" : "";
        if (this.isShown && this.options.backdrop) {
            var doAnimate = $.support.transition && animate;
            this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />').prependTo(this.$element).on("click.dismiss.bs.modal", $.proxy(function(e) {
                if (e.target !== e.currentTarget) return;
                this.options.backdrop == "static" ? this.$element[0].focus.call(this.$element[0]) : this.hide.call(this);
            }, this));
            if (doAnimate) this.$backdrop[0].offsetWidth;
            this.$backdrop.addClass("in");
            if (!callback) return;
            doAnimate ? this.$backdrop.one("bsTransitionEnd", callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callback();
        } else if (!this.isShown && this.$backdrop) {
            this.$backdrop.removeClass("in");
            var callbackRemove = function() {
                that.removeBackdrop();
                callback && callback();
            };
            $.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one("bsTransitionEnd", callbackRemove).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callbackRemove();
        } else if (callback) {
            callback();
        }
    };
    Modal.prototype.handleUpdate = function() {
        if (this.options.backdrop) this.adjustBackdrop();
        this.adjustDialog();
    };
    Modal.prototype.adjustBackdrop = function() {
        this.$backdrop.css("height", 0).css("height", this.$element[0].scrollHeight);
    };
    Modal.prototype.adjustDialog = function() {
        var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight;
        this.$element.css({
            paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : "",
            paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ""
        });
    };
    Modal.prototype.resetAdjustments = function() {
        this.$element.css({
            paddingLeft: "",
            paddingRight: ""
        });
    };
    Modal.prototype.checkScrollbar = function() {
        this.bodyIsOverflowing = document.body.scrollHeight > document.documentElement.clientHeight;
        this.scrollbarWidth = this.measureScrollbar();
    };
    Modal.prototype.setScrollbar = function() {
        var bodyPad = parseInt(this.$body.css("padding-right") || 0, 10);
        if (this.bodyIsOverflowing) this.$body.css("padding-right", bodyPad + this.scrollbarWidth);
    };
    Modal.prototype.resetScrollbar = function() {
        this.$body.css("padding-right", "");
    };
    Modal.prototype.measureScrollbar = function() {
        var scrollDiv = document.createElement("div");
        scrollDiv.className = "modal-scrollbar-measure";
        this.$body.append(scrollDiv);
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        this.$body[0].removeChild(scrollDiv);
        return scrollbarWidth;
    };
    function Plugin(option, _relatedTarget) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.modal");
            var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == "object" && option);
            if (!data) $this.data("bs.modal", data = new Modal(this, options));
            if (typeof option == "string") data[option](_relatedTarget); else if (options.show) data.show(_relatedTarget);
        });
    }
    var old = $.fn.modal;
    $.fn.modal = Plugin;
    $.fn.modal.Constructor = Modal;
    $.fn.modal.noConflict = function() {
        $.fn.modal = old;
        return this;
    };
    $(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function(e) {
        var $this = $(this);
        var href = $this.attr("href");
        var $target = $($this.attr("data-target") || href && href.replace(/.*(?=#[^\s]+$)/, ""));
        var option = $target.data("bs.modal") ? "toggle" : $.extend({
            remote: !/#/.test(href) && href
        }, $target.data(), $this.data());
        if ($this.is("a")) e.preventDefault();
        $target.one("show.bs.modal", function(showEvent) {
            if (showEvent.isDefaultPrevented()) return;
            $target.one("hidden.bs.modal", function() {
                $this.is(":visible") && $this.trigger("focus");
            });
        });
        Plugin.call($target, option, this);
    });
}(jQuery);

+function($) {
    "use strict";
    var Tooltip = function(element, options) {
        this.type = this.options = this.enabled = this.timeout = this.hoverState = this.$element = null;
        this.init("tooltip", element, options);
    };
    Tooltip.VERSION = "3.3.1";
    Tooltip.TRANSITION_DURATION = 150;
    Tooltip.DEFAULTS = {
        animation: true,
        placement: "top",
        selector: false,
        template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover focus",
        title: "",
        delay: 0,
        html: false,
        container: false,
        viewport: {
            selector: "body",
            padding: 0
        }
    };
    Tooltip.prototype.init = function(type, element, options) {
        this.enabled = true;
        this.type = type;
        this.$element = $(element);
        this.options = this.getOptions(options);
        this.$viewport = this.options.viewport && $(this.options.viewport.selector || this.options.viewport);
        var triggers = this.options.trigger.split(" ");
        for (var i = triggers.length; i--; ) {
            var trigger = triggers[i];
            if (trigger == "click") {
                this.$element.on("click." + this.type, this.options.selector, $.proxy(this.toggle, this));
            } else if (trigger != "manual") {
                var eventIn = trigger == "hover" ? "mouseenter" : "focusin";
                var eventOut = trigger == "hover" ? "mouseleave" : "focusout";
                this.$element.on(eventIn + "." + this.type, this.options.selector, $.proxy(this.enter, this));
                this.$element.on(eventOut + "." + this.type, this.options.selector, $.proxy(this.leave, this));
            }
        }
        this.options.selector ? this._options = $.extend({}, this.options, {
            trigger: "manual",
            selector: ""
        }) : this.fixTitle();
    };
    Tooltip.prototype.getDefaults = function() {
        return Tooltip.DEFAULTS;
    };
    Tooltip.prototype.getOptions = function(options) {
        options = $.extend({}, this.getDefaults(), this.$element.data(), options);
        if (options.delay && typeof options.delay == "number") {
            options.delay = {
                show: options.delay,
                hide: options.delay
            };
        }
        return options;
    };
    Tooltip.prototype.getDelegateOptions = function() {
        var options = {};
        var defaults = this.getDefaults();
        this._options && $.each(this._options, function(key, value) {
            if (defaults[key] != value) options[key] = value;
        });
        return options;
    };
    Tooltip.prototype.enter = function(obj) {
        var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data("bs." + this.type);
        if (self && self.$tip && self.$tip.is(":visible")) {
            self.hoverState = "in";
            return;
        }
        if (!self) {
            self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
            $(obj.currentTarget).data("bs." + this.type, self);
        }
        clearTimeout(self.timeout);
        self.hoverState = "in";
        if (!self.options.delay || !self.options.delay.show) return self.show();
        self.timeout = setTimeout(function() {
            if (self.hoverState == "in") self.show();
        }, self.options.delay.show);
    };
    Tooltip.prototype.leave = function(obj) {
        var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data("bs." + this.type);
        if (!self) {
            self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
            $(obj.currentTarget).data("bs." + this.type, self);
        }
        clearTimeout(self.timeout);
        self.hoverState = "out";
        if (!self.options.delay || !self.options.delay.hide) return self.hide();
        self.timeout = setTimeout(function() {
            if (self.hoverState == "out") self.hide();
        }, self.options.delay.hide);
    };
    Tooltip.prototype.show = function() {
        var e = $.Event("show.bs." + this.type);
        if (this.hasContent() && this.enabled) {
            this.$element.trigger(e);
            var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);
            if (e.isDefaultPrevented() || !inDom) return;
            var that = this;
            var $tip = this.tip();
            var tipId = this.getUID(this.type);
            this.setContent();
            $tip.attr("id", tipId);
            this.$element.attr("aria-describedby", tipId);
            if (this.options.animation) $tip.addClass("fade");
            var placement = typeof this.options.placement == "function" ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
            var autoToken = /\s?auto?\s?/i;
            var autoPlace = autoToken.test(placement);
            if (autoPlace) placement = placement.replace(autoToken, "") || "top";
            $tip.detach().css({
                top: 0,
                left: 0,
                display: "block"
            }).addClass(placement).data("bs." + this.type, this);
            this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
            var pos = this.getPosition();
            var actualWidth = $tip[0].offsetWidth;
            var actualHeight = $tip[0].offsetHeight;
            if (autoPlace) {
                var orgPlacement = placement;
                var $container = this.options.container ? $(this.options.container) : this.$element.parent();
                var containerDim = this.getPosition($container);
                placement = placement == "bottom" && pos.bottom + actualHeight > containerDim.bottom ? "top" : placement == "top" && pos.top - actualHeight < containerDim.top ? "bottom" : placement == "right" && pos.right + actualWidth > containerDim.width ? "left" : placement == "left" && pos.left - actualWidth < containerDim.left ? "right" : placement;
                $tip.removeClass(orgPlacement).addClass(placement);
            }
            var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);
            this.applyPlacement(calculatedOffset, placement);
            var complete = function() {
                var prevHoverState = that.hoverState;
                that.$element.trigger("shown.bs." + that.type);
                that.hoverState = null;
                if (prevHoverState == "out") that.leave(that);
            };
            $.support.transition && this.$tip.hasClass("fade") ? $tip.one("bsTransitionEnd", complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();
        }
    };
    Tooltip.prototype.applyPlacement = function(offset, placement) {
        var $tip = this.tip();
        var width = $tip[0].offsetWidth;
        var height = $tip[0].offsetHeight;
        var marginTop = parseInt($tip.css("margin-top"), 10);
        var marginLeft = parseInt($tip.css("margin-left"), 10);
        if (isNaN(marginTop)) marginTop = 0;
        if (isNaN(marginLeft)) marginLeft = 0;
        offset.top = offset.top + marginTop;
        offset.left = offset.left + marginLeft;
        $.offset.setOffset($tip[0], $.extend({
            using: function(props) {
                $tip.css({
                    top: Math.round(props.top),
                    left: Math.round(props.left)
                });
            }
        }, offset), 0);
        $tip.addClass("in");
        var actualWidth = $tip[0].offsetWidth;
        var actualHeight = $tip[0].offsetHeight;
        if (placement == "top" && actualHeight != height) {
            offset.top = offset.top + height - actualHeight;
        }
        var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);
        if (delta.left) offset.left += delta.left; else offset.top += delta.top;
        var isVertical = /top|bottom/.test(placement);
        var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;
        var arrowOffsetPosition = isVertical ? "offsetWidth" : "offsetHeight";
        $tip.offset(offset);
        this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical);
    };
    Tooltip.prototype.replaceArrow = function(delta, dimension, isHorizontal) {
        this.arrow().css(isHorizontal ? "left" : "top", 50 * (1 - delta / dimension) + "%").css(isHorizontal ? "top" : "left", "");
    };
    Tooltip.prototype.setContent = function() {
        var $tip = this.tip();
        var title = this.getTitle();
        $tip.find(".tooltip-inner")[this.options.html ? "html" : "text"](title);
        $tip.removeClass("fade in top bottom left right");
    };
    Tooltip.prototype.hide = function(callback) {
        var that = this;
        var $tip = this.tip();
        var e = $.Event("hide.bs." + this.type);
        function complete() {
            if (that.hoverState != "in") $tip.detach();
            that.$element.removeAttr("aria-describedby").trigger("hidden.bs." + that.type);
            callback && callback();
        }
        this.$element.trigger(e);
        if (e.isDefaultPrevented()) return;
        $tip.removeClass("in");
        $.support.transition && this.$tip.hasClass("fade") ? $tip.one("bsTransitionEnd", complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();
        this.hoverState = null;
        return this;
    };
    Tooltip.prototype.fixTitle = function() {
        var $e = this.$element;
        if ($e.attr("title") || typeof $e.attr("data-original-title") != "string") {
            $e.attr("data-original-title", $e.attr("title") || "").attr("title", "");
        }
    };
    Tooltip.prototype.hasContent = function() {
        return this.getTitle();
    };
    Tooltip.prototype.getPosition = function($element) {
        $element = $element || this.$element;
        var el = $element[0];
        var isBody = el.tagName == "BODY";
        var elRect = el.getBoundingClientRect();
        if (elRect.width == null) {
            elRect = $.extend({}, elRect, {
                width: elRect.right - elRect.left,
                height: elRect.bottom - elRect.top
            });
        }
        var elOffset = isBody ? {
            top: 0,
            left: 0
        } : $element.offset();
        var scroll = {
            scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop()
        };
        var outerDims = isBody ? {
            width: $(window).width(),
            height: $(window).height()
        } : null;
        return $.extend({}, elRect, scroll, outerDims, elOffset);
    };
    Tooltip.prototype.getCalculatedOffset = function(placement, pos, actualWidth, actualHeight) {
        return placement == "bottom" ? {
            top: pos.top + pos.height,
            left: pos.left + pos.width / 2 - actualWidth / 2
        } : placement == "top" ? {
            top: pos.top - actualHeight,
            left: pos.left + pos.width / 2 - actualWidth / 2
        } : placement == "left" ? {
            top: pos.top + pos.height / 2 - actualHeight / 2,
            left: pos.left - actualWidth
        } : {
            top: pos.top + pos.height / 2 - actualHeight / 2,
            left: pos.left + pos.width
        };
    };
    Tooltip.prototype.getViewportAdjustedDelta = function(placement, pos, actualWidth, actualHeight) {
        var delta = {
            top: 0,
            left: 0
        };
        if (!this.$viewport) return delta;
        var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;
        var viewportDimensions = this.getPosition(this.$viewport);
        if (/right|left/.test(placement)) {
            var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;
            var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;
            if (topEdgeOffset < viewportDimensions.top) {
                delta.top = viewportDimensions.top - topEdgeOffset;
            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {
                delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;
            }
        } else {
            var leftEdgeOffset = pos.left - viewportPadding;
            var rightEdgeOffset = pos.left + viewportPadding + actualWidth;
            if (leftEdgeOffset < viewportDimensions.left) {
                delta.left = viewportDimensions.left - leftEdgeOffset;
            } else if (rightEdgeOffset > viewportDimensions.width) {
                delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;
            }
        }
        return delta;
    };
    Tooltip.prototype.getTitle = function() {
        var title;
        var $e = this.$element;
        var o = this.options;
        title = $e.attr("data-original-title") || (typeof o.title == "function" ? o.title.call($e[0]) : o.title);
        return title;
    };
    Tooltip.prototype.getUID = function(prefix) {
        do prefix += ~~(Math.random() * 1e6); while (document.getElementById(prefix));
        return prefix;
    };
    Tooltip.prototype.tip = function() {
        return this.$tip = this.$tip || $(this.options.template);
    };
    Tooltip.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow");
    };
    Tooltip.prototype.enable = function() {
        this.enabled = true;
    };
    Tooltip.prototype.disable = function() {
        this.enabled = false;
    };
    Tooltip.prototype.toggleEnabled = function() {
        this.enabled = !this.enabled;
    };
    Tooltip.prototype.toggle = function(e) {
        var self = this;
        if (e) {
            self = $(e.currentTarget).data("bs." + this.type);
            if (!self) {
                self = new this.constructor(e.currentTarget, this.getDelegateOptions());
                $(e.currentTarget).data("bs." + this.type, self);
            }
        }
        self.tip().hasClass("in") ? self.leave(self) : self.enter(self);
    };
    Tooltip.prototype.destroy = function() {
        var that = this;
        clearTimeout(this.timeout);
        this.hide(function() {
            that.$element.off("." + that.type).removeData("bs." + that.type);
        });
    };
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.tooltip");
            var options = typeof option == "object" && option;
            var selector = options && options.selector;
            if (!data && option == "destroy") return;
            if (selector) {
                if (!data) $this.data("bs.tooltip", data = {});
                if (!data[selector]) data[selector] = new Tooltip(this, options);
            } else {
                if (!data) $this.data("bs.tooltip", data = new Tooltip(this, options));
            }
            if (typeof option == "string") data[option]();
        });
    }
    var old = $.fn.tooltip;
    $.fn.tooltip = Plugin;
    $.fn.tooltip.Constructor = Tooltip;
    $.fn.tooltip.noConflict = function() {
        $.fn.tooltip = old;
        return this;
    };
}(jQuery);

+function($) {
    "use strict";
    var Popover = function(element, options) {
        this.init("popover", element, options);
    };
    if (!$.fn.tooltip) throw new Error("Popover requires tooltip.js");
    Popover.VERSION = "3.3.1";
    Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
        placement: "right",
        trigger: "click",
        content: "",
        template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
    });
    Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);
    Popover.prototype.constructor = Popover;
    Popover.prototype.getDefaults = function() {
        return Popover.DEFAULTS;
    };
    Popover.prototype.setContent = function() {
        var $tip = this.tip();
        var title = this.getTitle();
        var content = this.getContent();
        $tip.find(".popover-title")[this.options.html ? "html" : "text"](title);
        $tip.find(".popover-content").children().detach().end()[this.options.html ? typeof content == "string" ? "html" : "append" : "text"](content);
        $tip.removeClass("fade top bottom left right in");
        if (!$tip.find(".popover-title").html()) $tip.find(".popover-title").hide();
    };
    Popover.prototype.hasContent = function() {
        return this.getTitle() || this.getContent();
    };
    Popover.prototype.getContent = function() {
        var $e = this.$element;
        var o = this.options;
        return $e.attr("data-content") || (typeof o.content == "function" ? o.content.call($e[0]) : o.content);
    };
    Popover.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".arrow");
    };
    Popover.prototype.tip = function() {
        if (!this.$tip) this.$tip = $(this.options.template);
        return this.$tip;
    };
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.popover");
            var options = typeof option == "object" && option;
            var selector = options && options.selector;
            if (!data && option == "destroy") return;
            if (selector) {
                if (!data) $this.data("bs.popover", data = {});
                if (!data[selector]) data[selector] = new Popover(this, options);
            } else {
                if (!data) $this.data("bs.popover", data = new Popover(this, options));
            }
            if (typeof option == "string") data[option]();
        });
    }
    var old = $.fn.popover;
    $.fn.popover = Plugin;
    $.fn.popover.Constructor = Popover;
    $.fn.popover.noConflict = function() {
        $.fn.popover = old;
        return this;
    };
}(jQuery);

(function($) {
    $.expr[":"].notmdproc = function(obj) {
        if ($(obj).data("mdproc")) {
            return false;
        } else {
            return true;
        }
    };
    function _isChar(evt) {
        if (typeof evt.which == "undefined") {
            return true;
        } else if (typeof evt.which == "number" && evt.which > 0) {
            return !evt.ctrlKey && !evt.metaKey && !evt.altKey && evt.which != 8;
        }
        return false;
    }
    $.material = {
        options: {
            input: true,
            ripples: true,
            checkbox: true,
            togglebutton: true,
            radio: true,
            arrive: true,
            autofill: true,
            withRipples: [ ".btn:not(.btn-link)", ".card-image", ".navbar a:not(.withoutripple)", ".dropdown-menu a", ".nav-tabs a:not(.withoutripple)", ".withripple" ].join(","),
            inputElements: "input.form-control, textarea.form-control, select.form-control",
            checkboxElements: ".checkbox > label > input[type=checkbox]",
            togglebuttonElements: ".togglebutton > label > input[type=checkbox]",
            radioElements: ".radio > label > input[type=radio]"
        },
        checkbox: function(selector) {
            $(selector ? selector : this.options.checkboxElements).filter(":notmdproc").data("mdproc", true).after("<span class=ripple></span><span class=check></span>");
        },
        togglebutton: function(selector) {
            $(selector ? selector : this.options.togglebuttonElements).filter(":notmdproc").data("mdproc", true).after("<span class=toggle></span>");
        },
        radio: function(selector) {
            $(selector ? selector : this.options.radioElements).filter(":notmdproc").data("mdproc", true).after("<span class=circle></span><span class=check></span>");
        },
        input: function(selector) {
            $(selector ? selector : this.options.inputElements).filter(":notmdproc").data("mdproc", true).each(function() {
                var $this = $(this);
                $this.wrap("<div class=form-control-wrapper></div>");
                $this.after("<span class=material-input></span>");
                if ($this.hasClass("floating-label")) {
                    var placeholder = $this.attr("placeholder");
                    $this.attr("placeholder", null).removeClass("floating-label");
                    $this.after("<div class=floating-label>" + placeholder + "</div>");
                }
                if ($this.attr("data-hint")) {
                    $this.after("<div class=hint>" + $this.attr("data-hint") + "</div>");
                }
                if ($this.val() === null || $this.val() == "undefined" || $this.val() === "") {
                    $this.addClass("empty");
                }
                if ($this.parent().next().is("[type=file]")) {
                    $this.parent().addClass("fileinput");
                    var $input = $this.parent().next().detach();
                    $this.after($input);
                }
            });
            $(document).on("change", ".checkbox input[type=checkbox]", function() {
                $(this).blur();
            }).on("keydown paste", ".form-control", function(e) {
                if (_isChar(e)) {
                    $(this).removeClass("empty");
                }
            }).on("keyup change", ".form-control", function() {
                var $this = $(this);
                if ($this.val() === "" && $this[0].checkValidity()) {
                    $this.addClass("empty");
                } else {
                    $this.removeClass("empty");
                }
            }).on("focus", ".form-control-wrapper.fileinput", function() {
                $(this).find("input").addClass("focus");
            }).on("blur", ".form-control-wrapper.fileinput", function() {
                $(this).find("input").removeClass("focus");
            }).on("change", ".form-control-wrapper.fileinput [type=file]", function() {
                var value = "";
                $.each($(this)[0].files, function(i, file) {
                    console.log(file);
                    value += file.name + ", ";
                });
                value = value.substring(0, value.length - 2);
                if (value) {
                    $(this).prev().removeClass("empty");
                } else {
                    $(this).prev().addClass("empty");
                }
                $(this).prev().val(value);
            });
        },
        ripples: function(selector) {
            $(selector ? selector : this.options.withRipples).ripples();
        },
        autofill: function() {
            var loading = setInterval(function() {
                $("input[type!=checkbox]").each(function() {
                    if ($(this).val() && $(this).val() !== $(this).attr("value")) {
                        $(this).trigger("change");
                    }
                });
            }, 100);
            setTimeout(function() {
                clearInterval(loading);
            }, 1e4);
            var focused;
            $(document).on("focus", "input", function() {
                var $inputs = $(this).parents("form").find("input").not("[type=file]");
                focused = setInterval(function() {
                    $inputs.each(function() {
                        if ($(this).val() !== $(this).attr("value")) {
                            $(this).trigger("change");
                        }
                    });
                }, 100);
            }).on("blur", "input", function() {
                clearInterval(focused);
            });
        },
        init: function() {
            if ($.ripples && this.options.ripples) {
                this.ripples();
            }
            if (this.options.input) {
                this.input();
            }
            if (this.options.checkbox) {
                this.checkbox();
            }
            if (this.options.togglebutton) {
                this.togglebutton();
            }
            if (this.options.radio) {
                this.radio();
            }
            if (this.options.autofill) {
                this.autofill();
            }
            if (document.arrive && this.options.arrive) {
                $(document).arrive(this.options.inputElements, function() {
                    $.material.input($(this));
                });
                $(document).arrive(this.options.checkboxElements, function() {
                    $.material.checkbox($(this));
                });
                $(document).arrive(this.options.radioElements, function() {
                    $.material.radio($(this));
                });
                $(document).arrive(this.options.togglebuttonElements, function() {
                    $.material.togglebutton($(this));
                });
            }
        }
    };
})(jQuery);

(function($, window, document, undefined) {
    "use strict";
    var ripples = "ripples";
    var self = null;
    var defaults = {};
    function Ripples(element, options) {
        self = this;
        this.element = $(element);
        this.options = $.extend({}, defaults, options);
        this._defaults = defaults;
        this._name = ripples;
        this.init();
    }
    Ripples.prototype.init = function() {
        var $element = this.element;
        $element.on("mousedown touchstart", function(event) {
            if (self.isTouch() && event.type === "mousedown") {
                return false;
            }
            if (!$element.find(".ripple-wrapper").length) {
                $element.append('<div class="ripple-wrapper"></div>');
            }
            var $wrapper = $element.children(".ripple-wrapper");
            var relY = self.getRelY($wrapper, event);
            var relX = self.getRelX($wrapper, event);
            if (!relY && !relX) {
                return;
            }
            var rippleColor = self.getRipplesColor();
            var $ripple = $("<div></div>");
            $ripple.addClass("ripple").css({
                left: relX,
                top: relY,
                "background-color": rippleColor
            });
            $wrapper.append($ripple);
            (function() {
                return window.getComputedStyle($ripple[0]).opacity;
            })();
            self.rippleOn($ripple);
            setTimeout(function() {
                self.rippleEnd($ripple);
            }, 500);
            $element.on("mouseup mouseleave touchend", function() {
                $ripple.data("mousedown", "off");
                if ($ripple.data("animating") === "off") {
                    self.rippleOut($ripple);
                }
            });
        });
    };
    Ripples.prototype.getNewSize = function($ripple) {
        var $element = this.element;
        return Math.max($element.outerWidth(), $element.outerHeight()) / $ripple.outerWidth() * 2.5;
    };
    Ripples.prototype.getRelX = function($wrapper, event) {
        var wrapperOffset = $wrapper.offset();
        if (!self.isTouch()) {
            return event.pageX - wrapperOffset.left;
        } else {
            event = event.originalEvent;
            if (event.touches.length !== 1) {
                return event.touches[0].pageX - wrapperOffset.left;
            }
            return false;
        }
    };
    Ripples.prototype.getRelY = function($wrapper, event) {
        var wrapperOffset = $wrapper.offset();
        if (!self.isTouch()) {
            return event.pageY - wrapperOffset.top;
        } else {
            event = event.originalEvent;
            if (event.touches.length !== 1) {
                return event.touches[0].pageY - wrapperOffset.top;
            }
            return false;
        }
    };
    Ripples.prototype.getRipplesColor = function() {
        var $element = this.element;
        console.log($element);
        var color = $element.data("ripple-color") ? $element.data("ripple-color") : window.getComputedStyle($element[0]).color;
        console.log(color);
        return color;
    };
    Ripples.prototype.hasTransitionSupport = function() {
        var thisBody = document.body || document.documentElement;
        var thisStyle = thisBody.style;
        var support = thisStyle.transition !== undefined || thisStyle.WebkitTransition !== undefined || thisStyle.MozTransition !== undefined || thisStyle.MsTransition !== undefined || thisStyle.OTransition !== undefined;
        return support;
    };
    Ripples.prototype.isTouch = function() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    };
    Ripples.prototype.rippleEnd = function($ripple) {
        $ripple.data("animating", "off");
        if ($ripple.data("mousedown") === "off") {
            self.rippleOut($ripple);
        }
    };
    Ripples.prototype.rippleOut = function($ripple) {
        $ripple.off();
        if (self.hasTransitionSupport()) {
            $ripple.addClass("ripple-out");
        } else {
            $ripple.animate({
                opacity: 0
            }, 100, function() {
                $ripple.trigger("transitionend");
            });
        }
        $ripple.on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd", function() {
            $ripple.remove();
        });
    };
    Ripples.prototype.rippleOn = function($ripple) {
        var size = self.getNewSize($ripple);
        var $element = this.element;
        if (self.hasTransitionSupport()) {
            $ripple.css({
                "-ms-transform": "scale(" + size + ")",
                "-moz-transform": "scale(" + size + ")",
                "-webkit-transform": "scale(" + size + ")",
                transform: "scale(" + size + ")"
            }).addClass("ripple-on").data("animating", "on").data("mousedown", "on");
        } else {
            $ripple.animate({
                width: Math.max($element.outerWidth(), $element.outerHeight()) * 2,
                height: Math.max($element.outerWidth(), $element.outerHeight()) * 2,
                "margin-left": Math.max($element.outerWidth(), $element.outerHeight()) * -1,
                "margin-top": Math.max($element.outerWidth(), $element.outerHeight()) * -1,
                opacity: .2
            }, 500, function() {
                $ripple.trigger("transitionend");
            });
        }
    };
    $.fn.ripples = function(options) {
        return this.each(function() {
            if (!$.data(this, "plugin_" + ripples)) {
                $.data(this, "plugin_" + ripples, new Ripples(this, options));
            }
        });
    };
})(jQuery, window, document);

window.JST["apps/album/show/tpl/album_with_songs.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div class="album album--with-songs">\n    <div class="region-album-side">\n        <div class="region-album-meta"></div>\n    </div>\n    <div class="region-album-content">\n        <div class="region-album-songs"></div>\n    </div>\n</div>'));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["apps/album/show/tpl/details_meta.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div class="region-details-title">\n    <h2>'));
            _print(this.label);
            _print(_safe('</h2>\n</div>\n\n<div class="region-details-meta-side-first">\n    <div class="artist"><a href="#music/artist/'));
            _print(this.artistid);
            _print(_safe('">'));
            _print(this.artist);
            _print(_safe('</a></div>\n</div>\n\n<div class="region-details-meta-side-second">\n    '));
            if (this.genre.length > 0) {
                _print(_safe('\n    <div class="genres">\n        '));
                _print(this.genre.join(", "));
                _print(_safe("\n    </div>\n    "));
            }
            _print(_safe('\n</div>\n\n<div class="region-details-meta-below">\n    <div class="description">'));
            _print(this.description);
            _print(_safe("</div>\n</div>\n"));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["apps/artist/show/tpl/details_meta.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div class="region-details-title">\n    <h2>'));
            _print(this.label);
            _print(_safe('</h2>\n</div>\n\n<div class="region-details-meta-side-first">\n    <div class="formed">'));
            _print(this.formed);
            _print(_safe('</div>\n</div>\n\n<div class="region-details-meta-side-second">\n    '));
            if (this.genre.length > 0) {
                _print(_safe('\n    <div class="genres">\n        '));
                _print(this.genre.join(", "));
                _print(_safe("\n    </div>\n    "));
            }
            _print(_safe('\n</div>\n\n<div class="region-details-meta-below">\n    <div class="description">'));
            _print(this.description);
            _print(_safe("</div>\n</div>\n"));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["apps/navMain/show/tpl/navMain.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            var child, item, _i, _j, _len, _len1, _ref, _ref1;
            _print(_safe('<div id="nav-header"></div>\n<nav>\n    <ul>\n        '));
            _ref = this.items;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                item = _ref[_i];
                if (!(item.path !== "undefined" && item.parent === 0)) {
                    continue;
                }
                _print(_safe('\n            <li class="'));
                _print(item["class"]);
                _print(_safe('">\n                <a href="'));
                _print(item.path);
                _print(_safe('">\n                    <i class="'));
                _print(item.icon);
                _print(_safe('"></i>\n                    <span>'));
                _print(item.title);
                _print(_safe("</span>\n                </a>\n\n                "));
                if (item.children.length !== 0) {
                    _print(_safe("\n                <ul>\n                    "));
                    _ref1 = item.children;
                    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                        child = _ref1[_j];
                        if (!(child.path !== "undefined")) {
                            continue;
                        }
                        _print(_safe('\n                      <li><a href="'));
                        _print(child.path);
                        _print(_safe('">'));
                        _print(child.title);
                        _print(_safe("</a></li>\n                    "));
                    }
                    _print(_safe("\n                </ul>\n                "));
                }
                _print(_safe("\n            </li>\n        "));
            }
            _print(_safe("\n    </ul>\n</nav>"));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["apps/shell/show/tpl/shell.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div id="shell">\n\n    <a id="logo" href="#"></a>\n\n    <div id="nav-bar"></div>\n\n    <div id="header">\n\n        <h1 id="page-title">\n            <span class="context"></span>\n            <span class="title"></span>\n        </h1>\n\n        <div id="search-region">\n            <input id="search" title="Search">\n            <span id="do-search"></span>\n        </div>\n\n    </div>\n\n    <div id="main">\n\n        <div id="sidebar-one"></div>\n\n        <div id="content">Loading things...</div>\n\n    </div>\n\n    <div id="sidebar-two">\n        <div class="playlist-toggle-open"></div>\n        <div id="playlist-summary"></div>\n        <div id="playlist-bar"></div>\n    </div>\n\n    <footer id="player"></footer>\n\n</div>\n\n<div id="fanart"></div>\n<div id="fanart-overlay"></div>\n<div id="fanart-overlay-decal"></div>'));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["apps/song/list/tpl/song.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<td class="cell-first">'));
            _print(this.track);
            _print(_safe('</td>\n<td class="cell-label">'));
            _print(this.label);
            _print(_safe('</td>\n<td class="cell-last">'));
            _print(this.duration);
            _print(_safe("</td>"));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["views/card/tpl/card.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div class="card-inner card-'));
            _print(this.type);
            _print(_safe('">\n    <div class="artwork">\n        <a href="#'));
            _print(this.url);
            _print(_safe('" class="thumb" title="'));
            _print(this.label);
            _print(_safe('">\n            <img src="'));
            _print(this.thumbnail);
            _print(_safe('" />\n        </a>\n    </div>\n    <div class="meta">\n        <div class="title"><a href="#'));
            _print(this.url);
            _print(_safe('" title="'));
            _print(this.label);
            _print(_safe('">'));
            _print(this.label);
            _print(_safe("</a></div>\n        "));
            if (this.subtitle != null) {
                _print(_safe('\n            <div class="subtitle">'));
                _print(this.subtitle);
                _print(_safe("</div>\n        "));
            }
            _print(_safe("\n    </div>\n</div>"));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["views/empty/tpl/empty.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div class="empty-result">\n    <h2>No results found</h2>\n    <p>Have you done a library scan?</p>\n</div>'));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["views/layouts/tpl/layout_details_header.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div class="layout-container details-header">\n\n    <div class="region-details-side"></div>\n\n    <div class="region-details-meta">\n\n        <div class="region-details-title"></div>\n\n        <div class="region-details-meta-side-first"></div>\n\n        <div class="region-details-meta-side-second"></div>\n\n        <div class="region-details-meta-below"></div>\n\n    </div>\n\n</div>'));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["views/layouts/tpl/layout_with_header.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div class="layout-container with-header">\n\n    <header class="region-header"></header>\n\n    <section class="region-content"></section>\n\n</div>'));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["views/layouts/tpl/layout_with_sidebar_first.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div class="layout-container with-sidebar-first">\n\n    <section class="region-first"></section>\n\n    <section class="region-content"></section>\n\n</div>'));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
}, __bind = function(fn, me) {
    return function() {
        return fn.apply(me, arguments);
    };
}, __slice = [].slice;

this.helpers = {};

this.config = {
    "static": {
        jsonRpcEndpoint: "jsonrpc"
    }
};

this.Kodi = function(Backbone, Marionette) {
    var App;
    App = new Backbone.Marionette.Application();
    App.addRegions({
        root: "body"
    });
    App.vent.on("shell:ready", function(_this) {
        return function(options) {
            return Backbone.history.start();
        };
    }(this));
    return App;
}(Backbone, Marionette);

this.Kodi.start();

helpers.cache = {
    store: {},
    defaultExpiry: 406800
};

helpers.cache.set = function(key, data, expires) {
    if (expires == null) {
        expires = helpers.cache.defaultExpiry;
    }
    helpers.cache.store[key] = {
        data: data,
        expires: expires + helpers.global.time(),
        key: key
    };
    return data;
};

helpers.cache.get = function(key, fallback) {
    if (fallback == null) {
        fallback = false;
    }
    if (helpers.cache.store[key] != null && helpers.cache.store[key].expires <= helpers.global.time()) {
        return helpers.cache.store[key].data;
    } else {
        return fallback;
    }
};

helpers.cache.del = function(key) {
    if (helpers.cache.store[key] != null) {
        return delete helpers.cache.store[key];
    }
};

helpers.cache.clear = function() {
    return helpers.cache.store = {};
};

config.get = function(type, id, defaultData, callback) {
    var data;
    if (defaultData == null) {
        defaultData = "";
    }
    data = Kodi.request("config:" + type + ":get", id, defaultData);
    if (callback != null) {
        callback(data);
    }
    return data;
};

config.set = function(type, id, data, callback) {
    var resp;
    resp = Kodi.request("config:" + type + ":set", id, data);
    if (callback != null) {
        callback(resp);
    }
    return resp;
};

helpers.debug = {};

helpers.debug.consoleStyle = function(severity) {
    var defaults, mods, prop, styles;
    defaults = {
        background: "#ccc",
        padding: "0 5px",
        color: "#444",
        "font-weight": "bold",
        "font-size": "110%"
    };
    styles = [];
    mods = {
        info: "#D8FEFE",
        success: "#CCFECD",
        warning: "#FFFDD9",
        error: "#FFCECD"
    };
    if (typeof style !== "undefined" && style !== null) {
        defaults.background = mods[severity];
    }
    for (prop in defaults) {
        styles.push(prop + ": " + defaults[prop]);
    }
    return styles.join("; ");
};

helpers.debug.log = function(msg, data, severity, caller) {
    if (data == null) {
        data = "No data provided";
    }
    if (severity == null) {
        severity = "error";
    }
    if (caller == null) {
        caller = arguments.callee.caller.toString();
    }
    if (data[0] != null && data[0].error === "Internal server error") {
        return msg;
    } else {
        return console.log("%c Bam! Error occurred in: " + caller, helpers.debug.consoleStyle(severity), data);
    }
};

helpers.debug.rpcError = function(obj) {
    var caller;
    caller = arguments.callee.caller.toString();
    return helpers.debug.log("jsonRPC Rquequest", obj, "error", caller);
};

helpers.global = {};

helpers.global.shuffle = function(array) {
    var i, j, temp;
    i = array.length - 1;
    while (i > 0) {
        j = Math.floor(Math.random() * (i + 1));
        temp = array[i];
        array[i] = array[j];
        array[j] = temp;
        i--;
    }
    return array;
};

helpers.global.getRandomInt = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
};

helpers.global.time = function() {
    var timestamp;
    timestamp = new Date().getTime();
    return timestamp / 1e3;
};

helpers.global.loading = function(_this) {
    return function(state) {
        var op;
        if (state == null) {
            state = "start";
        }
        op = state === "start" ? "add" : "remove";
        if (_this.Kodi != null) {
            return _this.Kodi.execute("body:state", op, "loading");
        }
    };
}(this);

helpers.global.numPad = function(num, size) {
    var s;
    s = "000000000" + num;
    return s.substr(s.length - size);
};

helpers.global.secToTime = function(totalSec) {
    var hours, minutes, seconds;
    if (totalSec == null) {
        totalSec = 0;
    }
    hours = parseInt(totalSec / 3600) % 24;
    minutes = parseInt(totalSec / 60) % 60;
    seconds = totalSec % 60;
    return {
        hours: hours,
        minutes: minutes,
        seconds: seconds
    };
};

helpers.global.timeToSec = function(time) {
    var hours, minutes;
    hours = parseInt(time.hours) * (60 * 60);
    minutes = parseInt(time.minutes) * 60;
    return parseInt(hours) + parseInt(minutes) + parseInt(time.seconds);
};

helpers.global.formatTime = function(time) {
    var timeStr;
    if (time == null) {
        return 0;
    } else {
        timeStr = (time.hours > 0 ? time.hours + ":" : "") + (time.hours > 0 && time.minutes < 10 ? "0" : "") + (time.minutes > 0 ? time.minutes + ":" : "") + ((time.minutes > 0 || time.hours > 0) && time.seconds < 10 ? "0" : "") + time.seconds;
        return timeStr;
    }
};

helpers.url = {};

helpers.url.map = {
    artist: "music/artist/:id",
    album: "music/album/:id",
    song: "music/song/:id",
    movie: "movie/:id",
    tvshow: "tvshow/:id",
    tvseason: "tvshow/:tvshowid/:id",
    tvepisode: "tvshow/:tvshowid/:tvseason/:id",
    file: "browser/file/:id"
};

helpers.url.get = function(type, id, replacements) {
    var path, token;
    if (id == null) {
        id = "";
    }
    if (replacements == null) {
        replacements = {};
    }
    path = "";
    if (helpers.url.map[type] != null) {
        path = helpers.url.map[type];
    }
    replacements[":id"] = id;
    for (token in replacements) {
        id = replacements[token];
        path = path.replace(token, id);
    }
    return path;
};

Cocktail.patch(Backbone);

(function(Backbone) {
    var methods, _sync;
    _sync = Backbone.sync;
    Backbone.sync = function(method, entity, options) {
        var sync;
        if (options == null) {
            options = {};
        }
        _.defaults(options, {
            beforeSend: _.bind(methods.beforeSend, entity),
            complete: _.bind(methods.complete, entity)
        });
        sync = _sync(method, entity, options);
        if (!entity._fetch && method === "read") {
            return entity._fetch = sync;
        }
    };
    return methods = {
        beforeSend: function() {
            return this.trigger("sync:start", this);
        },
        complete: function() {
            return this.trigger("sync:stop", this);
        }
    };
})(Backbone);

(function(Backbone) {
    return _.extend(Backbone.Marionette.Application.prototype, {
        navigate: function(route, options) {
            if (options == null) {
                options = {};
            }
            return Backbone.history.navigate(route, options);
        },
        getCurrentRoute: function() {
            var frag;
            frag = Backbone.history.fragment;
            if (_.isEmpty(frag)) {
                return null;
            } else {
                return frag;
            }
        },
        startHistory: function() {
            if (Backbone.history) {
                return Backbone.history.start();
            }
        },
        register: function(instance, id) {
            if (this._registry == null) {
                this._registry = {};
            }
            return this._registry[id] = instance;
        },
        unregister: function(instance, id) {
            return delete this._registry[id];
        },
        resetRegistry: function() {
            var controller, key, msg, oldCount, _ref;
            oldCount = this.getRegistrySize();
            _ref = this._registry;
            for (key in _ref) {
                controller = _ref[key];
                controller.region.close();
            }
            msg = "There were " + oldCount + " controllers in the registry, there are now " + this.getRegistrySize();
            if (this.getRegistrySize() > 0) {
                return console.warn(msg, this._registry);
            } else {
                return console.log(msg);
            }
        },
        getRegistrySize: function() {
            return _.size(this._registry);
        }
    });
})(Backbone);

(function(Marionette) {
    return _.extend(Marionette.Renderer, {
        extension: [ ".jst" ],
        render: function(template, data) {
            var path;
            path = this.getTemplate(template);
            if (!path) {
                throw "Template " + template + " not found!";
            }
            return path(data);
        },
        getTemplate: function(template) {
            var path;
            path = this.insertAt(template.split("/"), -1, "tpl").join("/");
            path = path + this.extension;
            if (JST[path]) {
                return JST[path];
            }
        },
        insertAt: function(array, index, item) {
            array.splice(index, 0, item);
            return array;
        }
    });
})(Marionette);

this.Kodi.module("Entities", function(Entities, App, Backbone, Marionette, $, _) {
    return Entities.Collection = function(_super) {
        __extends(Collection, _super);
        function Collection() {
            return Collection.__super__.constructor.apply(this, arguments);
        }
        Collection.prototype.getRawCollection = function() {
            var model, objs, _i, _len, _ref;
            objs = [];
            if (this.models.length > 0) {
                _ref = this.models;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    model = _ref[_i];
                    objs.push(model.attributes);
                }
            }
            return objs;
        };
        return Collection;
    }(Backbone.Collection);
});

this.Kodi.module("Entities", function(Entities, App, Backbone, Marionette, $, _) {
    return Entities.Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            this.saveError = __bind(this.saveError, this);
            this.saveSuccess = __bind(this.saveSuccess, this);
            return Model.__super__.constructor.apply(this, arguments);
        }
        Model.prototype.destroy = function(options) {
            if (options == null) {
                options = {};
            }
            _.defaults(options, {
                wait: true
            });
            this.set({
                _destroy: true
            });
            return Model.__super__.destroy.call(this, options);
        };
        Model.prototype.isDestroyed = function() {
            return this.get("_destroy");
        };
        Model.prototype.save = function(data, options) {
            var isNew;
            if (options == null) {
                options = {};
            }
            isNew = this.isNew();
            _.defaults(options, {
                wait: true,
                success: _.bind(this.saveSuccess, this, isNew, options.collection),
                error: _.bind(this.saveError, this)
            });
            this.unset("_errors");
            return Model.__super__.save.call(this, data, options);
        };
        Model.prototype.saveSuccess = function(isNew, collection) {
            if (isNew) {
                if (collection) {
                    collection.add(this);
                }
                if (collection) {
                    collection.trigger("model:created", this);
                }
                return this.trigger("created", this);
            } else {
                if (collection == null) {
                    collection = this.collection;
                }
                if (collection) {
                    collection.trigger("model:updated", this);
                }
                return this.trigger("updated", this);
            }
        };
        Model.prototype.saveError = function(model, xhr, options) {
            var _ref;
            if (!(xhr.status === 500 || xhr.status === 404)) {
                return this.set({
                    _errors: (_ref = $.parseJSON(xhr.responseText)) != null ? _ref.errors : void 0
                });
            }
        };
        return Model;
    }(Backbone.Model);
});

this.Kodi.module("Entities", function(Entities, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        storageKey: "config:app",
        getCollection: function() {
            var collection;
            collection = new Entities.ConfigAppCollection();
            collection.fetch();
            return collection;
        },
        getConfig: function(id, collection) {
            if (collection == null) {
                collection = API.getCollection();
            }
            return collection.find({
                id: id
            });
        }
    };
    Entities.ConfigApp = function(_super) {
        __extends(ConfigApp, _super);
        function ConfigApp() {
            return ConfigApp.__super__.constructor.apply(this, arguments);
        }
        ConfigApp.prototype.defaults = {
            id: 0,
            data: {}
        };
        return ConfigApp;
    }(Entities.Model);
    Entities.ConfigAppCollection = function(_super) {
        __extends(ConfigAppCollection, _super);
        function ConfigAppCollection() {
            return ConfigAppCollection.__super__.constructor.apply(this, arguments);
        }
        ConfigAppCollection.prototype.model = Entities.ConfigApp;
        ConfigAppCollection.prototype.localStorage = new Backbone.LocalStorage(API.storageKey);
        return ConfigAppCollection;
    }(Entities.Collection);
    App.reqres.setHandler("config:app:get", function(configId, defaultData) {
        var model;
        model = API.getConfig(configId);
        if (model != null) {
            return model.get("data");
        } else {
            return defaultData;
        }
    });
    App.reqres.setHandler("config:app:set", function(configId, configData) {
        var collection, model;
        collection = API.getCollection();
        model = API.getConfig(configId, collection);
        if (model != null) {
            return model.save({
                data: configData
            });
        } else {
            collection.create({
                id: configId,
                data: configData
            });
            return configData;
        }
    });
    App.reqres.setHandler("config:static:get", function(configId, defaultData) {
        var data;
        data = config["static"][configId] != null ? config["static"][configId] : defaultData;
        return data;
    });
    return App.reqres.setHandler("config:static:set", function(configId, data) {
        config["static"][configId] = data;
        return data;
    });
});

this.Kodi.module("KodiEntities", function(KodiEntities, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        initialize: function() {
            return $.jsonrpc.defaultUrl = config.get("static", "jsonRpcEndpoint");
        },
        multipleCommands: function(commands, callback) {
            var obj;
            obj = $.jsonrpc(commands);
            obj.fail(function(error) {
                return helpers.debug.rpcError(error);
            });
            return obj;
        },
        singleCommand: function(command, params) {
            var obj;
            command = {
                method: command
            };
            if (params != null && params.length > 0) {
                command.params = params;
            }
            obj = API.multipleCommands([ command ]);
            return obj;
        },
        parseResponse: function(response) {
            var result, results, _i, _len;
            results = [];
            console.log(response);
            for (_i = 0, _len = response.length; _i < _len; _i++) {
                result = response[_i];
                if (result.result) {
                    results.push(result.result);
                } else {
                    helpers.debug.rpcError(result.error);
                }
            }
            return results;
        }
    };
    App.commands.setHandler("when:commands:fetched", function(commands, callback) {
        var request;
        request = API.multipleCommands(commands);
        return request.done(function(response) {
            var result;
            result = API.parseResponse(response);
            return callback(result);
        });
    });
    App.commands.setHandler("when:command:fetched", function(command, params, callback) {
        var request;
        request = API.singleCommand(command, params);
        return request.done(function(response) {
            var result, results;
            results = API.parseResponse(response);
            result = results.length === 1 ? results[0] : {};
            return callback(result);
        });
    });
    return App.commands.setHandler("when:entity:fetched", function(entities, callback) {
        var xhrs;
        helpers.global.loading("start");
        xhrs = _.chain([ entities ]).flatten().pluck("_fetch").value();
        return $.when.apply($, xhrs).done(function() {
            helpers.global.loading("end");
            return callback();
        });
    });
});

this.Kodi.module("KodiEntities", function(KodiEntities, App, Backbone, Marionette, $, _) {
    return KodiEntities.Collection = function(_super) {
        __extends(Collection, _super);
        function Collection() {
            return Collection.__super__.constructor.apply(this, arguments);
        }
        Collection.prototype.url = config.get("static", "jsonRpcEndpoint");
        Collection.prototype.rpc = new Backbone.Rpc({
            useNamedParameters: true,
            namespaceDelimiter: ""
        });
        Collection.prototype.sync = function(method, model, options) {
            if (method === "read") {
                this.options = options;
            }
            return Backbone.sync(method, model, options);
        };
        Collection.prototype.argCheckOption = function(option, fallback) {
            if (this.options != null && this.options[option] != null) {
                return this.options[option];
            } else {
                return fallback;
            }
        };
        Collection.prototype.argSort = function(method, order) {
            var arg;
            if (order == null) {
                order = "ascending";
            }
            arg = {
                method: method,
                order: order,
                ignorearticle: true
            };
            return this.argCheckOption("sort", arg);
        };
        Collection.prototype.argLimit = function(start, end) {
            var arg;
            if (start == null) {
                start = 0;
            }
            if (end == null) {
                end = "all";
            }
            arg = {
                start: start
            };
            if (end !== "all") {
                arg.end = end;
            }
            return this.argCheckOption("limit", arg);
        };
        Collection.prototype.argFilter = function(name, value) {
            var arg;
            arg = {};
            if (name != null) {
                arg[name] = value;
            }
            return this.argCheckOption("filter", arg);
        };
        return Collection;
    }(App.Entities.Collection);
});

this.Kodi.module("KodiEntities", function(KodiEntities, App, Backbone, Marionette, $, _) {
    return KodiEntities.Model = function(_super) {
        __extends(Model, _super);
        function Model() {
            return Model.__super__.constructor.apply(this, arguments);
        }
        Model.prototype.url = config.get("static", "jsonRpcEndpoint");
        Model.prototype.rpc = new Backbone.Rpc({
            useNamedParameters: true,
            namespaceDelimiter: ""
        });
        Model.prototype.modelDefaults = {
            fullyloaded: false,
            thumbnail: "",
            thumbsUp: false
        };
        Model.prototype.parseModel = function(type, model, id) {
            model.id = id;
            model = App.request("images:path:entity", model);
            model.url = helpers.url.get(type, id);
            model.type = type;
            return model;
        };
        Model.prototype.parseFieldsToDefaults = function(fields, defaults) {
            var field, _i, _len;
            if (defaults == null) {
                defaults = {};
            }
            for (_i = 0, _len = fields.length; _i < _len; _i++) {
                field = fields[_i];
                defaults[field] = "";
            }
            return defaults;
        };
        return Model;
    }(App.Entities.Model);
});

this.Kodi.module("KodiEntities", function(KodiEntities, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        getAlbumFields: function(type) {
            var baseFields, extraFields, fields;
            if (type == null) {
                type = "small";
            }
            baseFields = [ "thumbnail", "playcount", "artistid", "artist", "genre", "albumlabel", "year" ];
            extraFields = [ "fanart", "style", "mood", "description", "genreid", "rating" ];
            if (type === "full") {
                fields = baseFields.concat(extraFields);
                return fields;
            } else {
                return baseFields;
            }
        },
        getAlbum: function(id, options) {
            var album;
            album = new App.KodiEntities.Album();
            album.set({
                albumid: parseInt(id),
                properties: API.getAlbumFields("full")
            });
            album.fetch(options);
            return album;
        },
        getAlbums: function(options) {
            var albums, defaultOptions;
            defaultOptions = {
                reset: false
            };
            options = _.extend(defaultOptions, options);
            albums = helpers.cache.get("album:entities");
            if (albums === false || options.reset === true) {
                albums = new KodiEntities.AlbumCollection();
                albums.fetch(options);
            }
            helpers.cache.set("album:entities", albums);
            return albums;
        }
    };
    KodiEntities.Album = function(_super) {
        __extends(Album, _super);
        function Album() {
            return Album.__super__.constructor.apply(this, arguments);
        }
        Album.prototype.defaults = function() {
            var fields;
            fields = _.extend(this.modelDefaults, {
                albumid: 1,
                album: ""
            });
            return this.parseFieldsToDefaults(API.getAlbumFields("full"), fields);
        };
        Album.prototype.methods = {
            read: [ "AudioLibrary.GetAlbumDetails", "albumid", "properties" ]
        };
        Album.prototype.arg2 = API.getAlbumFields("full");
        Album.prototype.parse = function(resp, xhr) {
            var obj;
            obj = resp.albumdetails != null ? resp.albumdetails : resp;
            if (resp.albumdetails != null) {
                obj.fullyloaded = true;
            }
            return this.parseModel("album", obj, obj.albumid);
        };
        return Album;
    }(App.KodiEntities.Model);
    KodiEntities.AlbumCollection = function(_super) {
        __extends(AlbumCollection, _super);
        function AlbumCollection() {
            return AlbumCollection.__super__.constructor.apply(this, arguments);
        }
        AlbumCollection.prototype.model = KodiEntities.Album;
        AlbumCollection.prototype.methods = {
            read: [ "AudioLibrary.GetAlbums", "arg1", "arg2", "arg3", "arg4" ]
        };
        AlbumCollection.prototype.arg1 = function() {
            return API.getAlbumFields("small");
        };
        AlbumCollection.prototype.arg2 = function() {
            return this.argLimit();
        };
        AlbumCollection.prototype.arg3 = function() {
            return this.argSort("album", "ascending");
        };
        AlbumCollection.prototype.arg3 = function() {
            return this.argFilter();
        };
        AlbumCollection.prototype.parse = function(resp, xhr) {
            return resp.albums;
        };
        return AlbumCollection;
    }(App.KodiEntities.Collection);
    App.reqres.setHandler("album:entity", function(id, options) {
        if (options == null) {
            options = {};
        }
        return API.getAlbum(id, options);
    });
    return App.reqres.setHandler("album:entities", function(options) {
        if (options == null) {
            options = {};
        }
        return API.getAlbums(options);
    });
});

this.Kodi.module("KodiEntities", function(KodiEntities, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        getArtistFields: function(type) {
            var baseFields, extraFields, fields;
            if (type == null) {
                type = "small";
            }
            baseFields = [ "thumbnail" ];
            extraFields = [ "fanart", "genre", "style", "mood", "born", "formed", "description" ];
            if (type === "full") {
                fields = baseFields.concat(extraFields);
                return fields;
            } else {
                return baseFields;
            }
        },
        getArtist: function(id, options) {
            var artist;
            artist = new App.KodiEntities.Artist();
            artist.set({
                artistid: parseInt(id),
                properties: API.getArtistFields("full")
            });
            artist.fetch(options);
            return artist;
        },
        getArtists: function(options) {
            var artists, defaultOptions;
            defaultOptions = {
                reset: false
            };
            options = _.extend(defaultOptions, options);
            artists = helpers.cache.get("artist:entities");
            if (artists === false || options.reset === true) {
                artists = new KodiEntities.ArtistCollection();
                artists.fetch(options);
            }
            helpers.cache.set("artist:entities", artists);
            return artists;
        }
    };
    KodiEntities.Artist = function(_super) {
        __extends(Artist, _super);
        function Artist() {
            return Artist.__super__.constructor.apply(this, arguments);
        }
        Artist.prototype.defaults = function() {
            var fields;
            fields = _.extend(this.modelDefaults, {
                artistid: 1,
                artist: ""
            });
            return this.parseFieldsToDefaults(API.getArtistFields("full"), fields);
        };
        Artist.prototype.methods = {
            read: [ "AudioLibrary.GetArtistDetails", "artistid", "properties" ]
        };
        Artist.prototype.arg2 = API.getArtistFields("full");
        Artist.prototype.parse = function(resp, xhr) {
            var obj;
            obj = resp.artistdetails != null ? resp.artistdetails : resp;
            if (resp.artistdetails != null) {
                obj.fullyloaded = true;
            }
            return this.parseModel("artist", obj, obj.artistid);
        };
        return Artist;
    }(App.KodiEntities.Model);
    KodiEntities.ArtistCollection = function(_super) {
        __extends(ArtistCollection, _super);
        function ArtistCollection() {
            return ArtistCollection.__super__.constructor.apply(this, arguments);
        }
        ArtistCollection.prototype.model = KodiEntities.Artist;
        ArtistCollection.prototype.methods = {
            read: [ "AudioLibrary.GetArtists", "arg1", "arg2", "arg3", "arg4" ]
        };
        ArtistCollection.prototype.arg1 = function() {
            return true;
        };
        ArtistCollection.prototype.arg2 = function() {
            return API.getArtistFields("small");
        };
        ArtistCollection.prototype.arg3 = function() {
            return this.argLimit();
        };
        ArtistCollection.prototype.arg4 = function() {
            return this.argSort("artist", "ascending");
        };
        ArtistCollection.prototype.parse = function(resp, xhr) {
            return resp.artists;
        };
        return ArtistCollection;
    }(App.KodiEntities.Collection);
    App.reqres.setHandler("artist:entity", function(id, options) {
        if (options == null) {
            options = {};
        }
        return API.getArtist(id, options);
    });
    return App.reqres.setHandler("artist:entities", function(options) {
        if (options == null) {
            options = {};
        }
        console.log("fetching");
        return API.getArtists(options);
    });
});

this.Kodi.module("KodiEntities", function(KodiEntities, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        getSongFields: function(type) {
            var baseFields, extraFields, fields, minimalFields;
            if (type == null) {
                type = "small";
            }
            minimalFields = [ "title", "file" ];
            baseFields = [ "thumbnail", "artist", "artistid", "album", "albumid", "lastplayed", "track", "year", "duration" ];
            extraFields = [ "fanart", "genre", "style", "mood", "born", "formed", "description", "lyrics" ];
            if (type === "full") {
                fields = minimalFields.concat(baseFields).concat(extraFields);
                return fields;
            } else if (type === "minimal") {
                return minimalFields;
            } else {
                return baseFields;
            }
        },
        getSong: function(id, options) {
            var artist;
            artist = new App.KodiEntities.Song();
            artist.set({
                songid: parseInt(id),
                properties: API.getSongFields("full")
            });
            artist.fetch(options);
            return artist;
        },
        getFilteredSongs: function(options) {
            var defaultOptions, songs;
            defaultOptions = {
                reset: false
            };
            options = _.extend(defaultOptions, options);
            songs = new KodiEntities.SongFilteredCollection();
            songs.fetch(options);
            return songs;
        },
        parseSongsToAlbumSongs: function(songs) {
            var albumid, collections, parsedRaw, song, songSet, songsRaw, _i, _len;
            songsRaw = songs.getRawCollection();
            parsedRaw = {};
            collections = {};
            for (_i = 0, _len = songsRaw.length; _i < _len; _i++) {
                song = songsRaw[_i];
                if (!parsedRaw[song.albumid]) {
                    parsedRaw[song.albumid] = [];
                }
                parsedRaw[song.albumid].push(song);
            }
            for (albumid in parsedRaw) {
                songSet = parsedRaw[albumid];
                collections[albumid] = new KodiEntities.SongCustomCollection(songSet);
            }
            return collections;
        }
    };
    KodiEntities.Song = function(_super) {
        __extends(Song, _super);
        function Song() {
            return Song.__super__.constructor.apply(this, arguments);
        }
        Song.prototype.defaults = function() {
            var fields;
            fields = _.extend(this.modelDefaults, {
                songid: 1,
                artist: ""
            });
            return this.parseFieldsToDefaults(API.getSongFields("full"), fields);
        };
        Song.prototype.methods = {
            read: [ "AudioLibrary.GetSongDetails", "songidid", "properties" ]
        };
        Song.prototype.arg2 = API.getSongFields("full");
        Song.prototype.parse = function(resp, xhr) {
            var obj;
            obj = resp.songdetails != null ? resp.songdetails : resp;
            if (resp.songdetails != null) {
                obj.fullyloaded = true;
            }
            return this.parseModel("song", obj, obj.songid);
        };
        return Song;
    }(App.KodiEntities.Model);
    KodiEntities.SongFilteredCollection = function(_super) {
        __extends(SongFilteredCollection, _super);
        function SongFilteredCollection() {
            return SongFilteredCollection.__super__.constructor.apply(this, arguments);
        }
        SongFilteredCollection.prototype.model = KodiEntities.Song;
        SongFilteredCollection.prototype.methods = {
            read: [ "AudioLibrary.GetSongs", "arg1", "arg2", "arg3", "arg4" ]
        };
        SongFilteredCollection.prototype.arg1 = function() {
            return API.getSongFields("small");
        };
        SongFilteredCollection.prototype.arg2 = function() {
            return this.argLimit();
        };
        SongFilteredCollection.prototype.arg3 = function() {
            return this.argSort("track", "ascending");
        };
        SongFilteredCollection.prototype.arg4 = function() {
            return this.argFilter();
        };
        SongFilteredCollection.prototype.parse = function(resp, xhr) {
            return resp.songs;
        };
        return SongFilteredCollection;
    }(App.KodiEntities.Collection);
    KodiEntities.SongCustomCollection = function(_super) {
        __extends(SongCustomCollection, _super);
        function SongCustomCollection() {
            return SongCustomCollection.__super__.constructor.apply(this, arguments);
        }
        SongCustomCollection.prototype.model = KodiEntities.Song;
        return SongCustomCollection;
    }(App.KodiEntities.Collection);
    App.reqres.setHandler("song:entity", function(id, options) {
        if (options == null) {
            options = {};
        }
        return API.getSong(id, options);
    });
    App.reqres.setHandler("song:filtered:entities", function(options) {
        if (options == null) {
            options = {};
        }
        return API.getFilteredSongs(options);
    });
    return App.reqres.setHandler("song:albumparse:entities", function(songs) {
        return API.parseSongsToAlbumSongs(songs);
    });
});

this.Kodi.module("Entities", function(Entities, App, Backbone, Marionette, $, _) {
    var API;
    Entities.NavMain = function(_super) {
        __extends(NavMain, _super);
        function NavMain() {
            return NavMain.__super__.constructor.apply(this, arguments);
        }
        NavMain.prototype.defaults = {
            id: 0,
            title: "Untitled",
            path: "#",
            icon: "",
            classes: "",
            parent: 0,
            children: []
        };
        return NavMain;
    }(Entities.Model);
    Entities.NavMainCollection = function(_super) {
        __extends(NavMainCollection, _super);
        function NavMainCollection() {
            return NavMainCollection.__super__.constructor.apply(this, arguments);
        }
        NavMainCollection.prototype.model = Entities.NavMain;
        return NavMainCollection;
    }(Entities.Collection);
    API = {
        getDefaultStructure: function(items, model) {
            var nav, navCollection, navParsed;
            nav = [];
            nav.push({
                id: 1,
                title: "Music",
                path: "#music",
                icon: "mdi-av-my-library-music",
                classes: "nav-music",
                parent: 0
            });
            nav.push({
                id: 2,
                title: "Artists",
                path: "#music/artists",
                icon: "",
                classes: "",
                parent: 1
            });
            nav.push({
                id: 2,
                title: "Albums",
                path: "#music/albums",
                icon: "",
                classes: "",
                parent: 1
            });
            nav.push({
                id: 3,
                title: "Recently Added",
                path: "#music/added",
                icon: "",
                classes: "",
                parent: 1
            });
            nav.push({
                id: 4,
                title: "Recently Played",
                path: "#music/played",
                icon: "",
                classes: "",
                parent: 1
            });
            nav.push({
                id: 5,
                title: "Genres",
                path: "#music/genres",
                icon: "",
                classes: "",
                parent: 1
            });
            nav.push({
                id: 6,
                title: "Years",
                path: "#music/years",
                icon: "",
                classes: "",
                parent: 1
            });
            nav.push({
                id: 11,
                title: "Movies",
                path: "#movies",
                icon: "mdi-av-movie",
                classes: "nav-movies",
                parent: 0
            });
            nav.push({
                id: 12,
                title: "Recently Added",
                path: "#movies/added",
                icon: "",
                classes: "",
                parent: 11
            });
            nav.push({
                id: 13,
                title: "All",
                path: "#movies/all",
                icon: "",
                classes: "",
                parent: 11
            });
            nav.push({
                id: 14,
                title: "Genres",
                path: "#movies/genres",
                icon: "",
                classes: "",
                parent: 11
            });
            nav.push({
                id: 15,
                title: "Years",
                path: "#movies/years",
                icon: "",
                classes: "",
                parent: 11
            });
            nav.push({
                id: 21,
                title: "TV Shows",
                path: "#tv",
                icon: "mdi-hardware-tv",
                classes: "nav-tv",
                parent: 0
            });
            nav.push({
                id: 22,
                title: "Recently Added",
                path: "#tv/added",
                icon: "",
                classes: "",
                parent: 21
            });
            nav.push({
                id: 23,
                title: "All",
                path: "#tv/all",
                icon: "",
                classes: "",
                parent: 21
            });
            nav.push({
                id: 24,
                title: "Genres",
                path: "#tv/genres",
                icon: "",
                classes: "",
                parent: 21
            });
            nav.push({
                id: 25,
                title: "Years",
                path: "#tv/years",
                icon: "",
                classes: "",
                parent: 21
            });
            nav.push({
                id: 31,
                title: "Browser",
                path: "#browser",
                icon: "mdi-action-view-list",
                classes: "nav-browser",
                parent: 0
            });
            nav.push({
                id: 32,
                title: "Files",
                path: "#browser/files",
                icon: "",
                classes: "",
                parent: 31
            });
            nav.push({
                id: 33,
                title: "AddOns",
                path: "#browser/addons",
                icon: "",
                classes: "",
                parent: 31
            });
            nav.push({
                id: 41,
                title: "Thumbs Up",
                path: "#thumbsup",
                icon: "mdi-action-thumb-up",
                classes: "nav-thumbs-up",
                parent: 0
            });
            navParsed = this.sortStructure(nav);
            navCollection = new Entities.NavMainCollection(navParsed);
            return navCollection;
        },
        sortStructure: function(structure) {
            var children, i, model, newParents, _i, _len, _name;
            children = {};
            for (_i = 0, _len = structure.length; _i < _len; _i++) {
                model = structure[_i];
                if (!(model.path != null && model.parent !== 0)) {
                    continue;
                }
                if (children[_name = model.parent] == null) {
                    children[_name] = [];
                }
                children[model.parent].push(model);
            }
            newParents = [];
            for (i in structure) {
                model = structure[i];
                if (model.path != null) {
                    if (model.parent === 0) {
                        model.children = children[model.id];
                        newParents.push(model);
                    }
                }
            }
            return newParents;
        }
    };
    return App.reqres.setHandler("navMain:entities", function(items, model) {
        if (items == null) {
            items = [];
        }
        return API.getDefaultStructure(items, model);
    });
});

this.Kodi.module("Controllers", function(Controllers, App, Backbone, Marionette, $, _) {
    return Controllers.Base = function(_super) {
        __extends(Base, _super);
        function Base(options) {
            if (options == null) {
                options = {};
            }
            this.region = options.region || App.request("default:region");
            Base.__super__.constructor.call(this, options);
            this._instance_id = _.uniqueId("controller");
            App.execute("register:instance", this, this._instance_id);
        }
        Base.prototype.close = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            delete this.region;
            delete this.options;
            Base.__super__.close.call(this, args);
            return App.execute("unregister:instance", this, this._instance_id);
        };
        Base.prototype.show = function(view) {
            this.listenTo(view, "close", this.close);
            return this.region.show(view);
        };
        return Base;
    }(Backbone.Marionette.Controller);
});

this.Kodi.module("Views", function(Views, App, Backbone, Marionette, $, _) {
    return Views.CollectionView = function(_super) {
        __extends(CollectionView, _super);
        function CollectionView() {
            return CollectionView.__super__.constructor.apply(this, arguments);
        }
        CollectionView.prototype.itemViewEventPrefix = "childview";
        return CollectionView;
    }(Backbone.Marionette.CollectionView);
});

this.Kodi.module("Views", function(Views, App, Backbone, Marionette, $, _) {
    return Views.CompositeView = function(_super) {
        __extends(CompositeView, _super);
        function CompositeView() {
            return CompositeView.__super__.constructor.apply(this, arguments);
        }
        CompositeView.prototype.itemViewEventPrefix = "childview";
        return CompositeView;
    }(Backbone.Marionette.CompositeView);
});

this.Kodi.module("Views", function(Views, App, Backbone, Marionette, $, _) {
    return Views.ItemView = function(_super) {
        __extends(ItemView, _super);
        function ItemView() {
            return ItemView.__super__.constructor.apply(this, arguments);
        }
        return ItemView;
    }(Backbone.Marionette.ItemView);
});

this.Kodi.module("Views", function(Views, App, Backbone, Marionette, $, _) {
    return Views.LayoutView = function(_super) {
        __extends(LayoutView, _super);
        function LayoutView() {
            return LayoutView.__super__.constructor.apply(this, arguments);
        }
        return LayoutView;
    }(Backbone.Marionette.LayoutView);
});

this.Kodi.module("Views", function(Views, App, Backbone, Marionette, $, _) {});

this.Kodi.module("Views", function(Views, App, Backbone, Marionette, $, _) {
    return Views.CardView = function(_super) {
        __extends(CardView, _super);
        function CardView() {
            return CardView.__super__.constructor.apply(this, arguments);
        }
        CardView.prototype.template = "views/card/card";
        CardView.prototype.tagName = "li";
        CardView.prototype.className = "card";
        CardView.prototype.triggers = {
            "click .menu": "artist-menu:clicked"
        };
        return CardView;
    }(App.Views.ItemView);
});

this.Kodi.module("Views", function(Views, App, Backbone, Marionette, $, _) {
    return Views.EmptyView = function(_super) {
        __extends(EmptyView, _super);
        function EmptyView() {
            return EmptyView.__super__.constructor.apply(this, arguments);
        }
        EmptyView.prototype.template = "views/empty/empty";
        EmptyView.prototype.regions = {
            regionEmptyContent: ".region-empty-content"
        };
        return EmptyView;
    }(App.Views.ItemView);
});

this.Kodi.module("Views", function(Views, App, Backbone, Marionette, $, _) {
    Views.LayoutWithSidebarFirstView = function(_super) {
        __extends(LayoutWithSidebarFirstView, _super);
        function LayoutWithSidebarFirstView() {
            return LayoutWithSidebarFirstView.__super__.constructor.apply(this, arguments);
        }
        LayoutWithSidebarFirstView.prototype.template = "views/layouts/layout_with_sidebar_first";
        LayoutWithSidebarFirstView.prototype.regions = {
            regionSidebarFirst: ".region-first",
            regionContent: ".region-content"
        };
        return LayoutWithSidebarFirstView;
    }(App.Views.LayoutView);
    Views.LayoutWithHeaderView = function(_super) {
        __extends(LayoutWithHeaderView, _super);
        function LayoutWithHeaderView() {
            return LayoutWithHeaderView.__super__.constructor.apply(this, arguments);
        }
        LayoutWithHeaderView.prototype.template = "views/layouts/layout_with_header";
        LayoutWithHeaderView.prototype.regions = {
            regionHeader: ".region-header",
            regionContent: ".region-content"
        };
        return LayoutWithHeaderView;
    }(App.Views.LayoutView);
    return Views.LayoutDetailsHeaderView = function(_super) {
        __extends(LayoutDetailsHeaderView, _super);
        function LayoutDetailsHeaderView() {
            return LayoutDetailsHeaderView.__super__.constructor.apply(this, arguments);
        }
        LayoutDetailsHeaderView.prototype.template = "views/layouts/layout_details_header";
        LayoutDetailsHeaderView.prototype.regions = {
            regionSide: ".region-details-side",
            regionTitle: ".region-details-title",
            regionMeta: ".region-details-meta",
            regionMetaSideFirst: ".region-details-meta-side-first",
            regionMetaSideSecond: ".region-details-meta-side-second",
            regionMetaBelow: ".region-details-meta-below"
        };
        return LayoutDetailsHeaderView;
    }(App.Views.LayoutView);
});

this.Kodi.module("AlbumApp", function(AlbumApp, App, Backbone, Marionette, $, _) {
    var API;
    AlbumApp.Router = function(_super) {
        __extends(Router, _super);
        function Router() {
            return Router.__super__.constructor.apply(this, arguments);
        }
        Router.prototype.appRoutes = {
            "music/albums": "list",
            "music/album/:id": "view"
        };
        return Router;
    }(Marionette.AppRouter);
    API = {
        list: function() {
            return new AlbumApp.List.Controller();
        },
        view: function(id) {
            return new AlbumApp.Show.Controller({
                id: id
            });
        }
    };
    return App.addInitializer(function() {
        return new AlbumApp.Router({
            controller: API
        });
    });
});

this.Kodi.module("AlbumApp.List", function(List, App, Backbone, Marionette, $, _) {
    return List.Controller = function(_super) {
        __extends(Controller, _super);
        function Controller() {
            return Controller.__super__.constructor.apply(this, arguments);
        }
        Controller.prototype.initialize = function() {
            var albums;
            albums = App.request("album:entities");
            return App.execute("when:entity:fetched", albums, function(_this) {
                return function() {
                    _this.layout = _this.getLayoutView(albums);
                    _this.listenTo(_this.layout, "show", function() {
                        return _this.albumsRegion(albums);
                    });
                    return App.regionContent.show(_this.layout);
                };
            }(this));
        };
        Controller.prototype.getLayoutView = function(albums) {
            return new List.ListLayout({
                collection: albums
            });
        };
        Controller.prototype.albumsRegion = function(albums) {
            var albumsView;
            albumsView = this.getAlbumsView(albums);
            return this.layout.regionContent.show(albumsView);
        };
        Controller.prototype.getAlbumsView = function(albums) {
            return new List.Albums({
                collection: albums
            });
        };
        return Controller;
    }(App.Controllers.Base);
});

this.Kodi.module("AlbumApp.List", function(List, App, Backbone, Marionette, $, _) {
    List.ListLayout = function(_super) {
        __extends(ListLayout, _super);
        function ListLayout() {
            return ListLayout.__super__.constructor.apply(this, arguments);
        }
        ListLayout.prototype.className = "album-list";
        return ListLayout;
    }(App.Views.LayoutWithSidebarFirstView);
    List.AlbumTeaser = function(_super) {
        __extends(AlbumTeaser, _super);
        function AlbumTeaser() {
            return AlbumTeaser.__super__.constructor.apply(this, arguments);
        }
        AlbumTeaser.prototype.triggers = {
            "click .menu": "album-menu:clicked"
        };
        return AlbumTeaser;
    }(App.Views.CardView);
    List.Empty = function(_super) {
        __extends(Empty, _super);
        function Empty() {
            return Empty.__super__.constructor.apply(this, arguments);
        }
        Empty.prototype.tagName = "li";
        Empty.prototype.className = "album-empty-result";
        return Empty;
    }(App.Views.EmptyView);
    return List.Albums = function(_super) {
        __extends(Albums, _super);
        function Albums() {
            return Albums.__super__.constructor.apply(this, arguments);
        }
        Albums.prototype.childView = List.AlbumTeaser;
        Albums.prototype.emptyView = List.Empty;
        Albums.prototype.tagName = "ul";
        Albums.prototype.className = "card-grid--square";
        return Albums;
    }(App.Views.CollectionView);
});

this.Kodi.module("AlbumApp.Show", function(Show, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        getAlbumsFromSongs: function(songs) {
            var album, albumid, albumsCollectionView, songCollection;
            albumsCollectionView = new Show.WithSongsCollection();
            albumsCollectionView.on("add:child", function(albumView) {
                return App.execute("when:entity:fetched", album, function(_this) {
                    return function() {
                        var model, songView, teaser;
                        model = albumView.model;
                        teaser = new Show.AlbumTeaser({
                            model: model
                        });
                        albumView.regionMeta.show(teaser);
                        songView = App.request("song:list:view", songs[model.get("albumid")]);
                        return albumView.regionSongs.show(songView);
                    };
                }(this));
            });
            for (albumid in songs) {
                songCollection = songs[albumid];
                album = App.request("album:entity", albumid, {
                    success: function(album) {
                        return albumsCollectionView.addChild(album, Show.WithSongsLayout);
                    }
                });
            }
            return albumsCollectionView;
        }
    };
    Show.Controller = function(_super) {
        __extends(Controller, _super);
        function Controller() {
            return Controller.__super__.constructor.apply(this, arguments);
        }
        Controller.prototype.initialize = function(options) {
            var album, id;
            id = parseInt(options.id);
            console.log(id);
            album = App.request("album:entity", id);
            return App.execute("when:entity:fetched", album, function(_this) {
                return function() {
                    App.execute("images:fanart:set", album.get("fanart"));
                    _this.layout = _this.getLayoutView(album);
                    _this.listenTo(_this.layout, "destroy", function() {
                        return App.execute("images:fanart:set", "");
                    });
                    _this.listenTo(_this.layout, "show", function() {
                        _this.getMusic(id);
                        return _this.getDetailsLayoutView(album);
                    });
                    return App.regionContent.show(_this.layout);
                };
            }(this));
        };
        Controller.prototype.getLayoutView = function(album) {
            return new Show.PageLayout({
                model: album
            });
        };
        Controller.prototype.getDetailsLayoutView = function(album) {
            var headerLayout;
            headerLayout = new Show.HeaderLayout({
                model: album
            });
            this.listenTo(headerLayout, "show", function(_this) {
                return function() {
                    var detail, teaser;
                    teaser = new Show.AlbumDetailTeaser({
                        model: album
                    });
                    detail = new Show.Details({
                        model: album
                    });
                    headerLayout.regionSide.show(teaser);
                    return headerLayout.regionMeta.show(detail);
                };
            }(this));
            return this.layout.regionHeader.show(headerLayout);
        };
        Controller.prototype.getMusic = function(id) {
            var options, songs;
            options = {
                filter: {
                    albumid: id
                }
            };
            songs = App.request("song:filtered:entities", options);
            return App.execute("when:entity:fetched", songs, function(_this) {
                return function() {
                    var albumView, songView;
                    albumView = new Show.WithSongsLayout();
                    songView = App.request("song:list:view", songs);
                    _this.listenTo(albumView, "show", function() {
                        return albumView.regionSongs.show(songView);
                    });
                    return _this.layout.regionContent.show(albumView);
                };
            }(this));
        };
        return Controller;
    }(App.Controllers.Base);
    return App.reqres.setHandler("albums:withsongs:view", function(songs) {
        return API.getAlbumsFromSongs(songs);
    });
});

this.Kodi.module("AlbumApp.Show", function(Show, App, Backbone, Marionette, $, _) {
    Show.WithSongsLayout = function(_super) {
        __extends(WithSongsLayout, _super);
        function WithSongsLayout() {
            return WithSongsLayout.__super__.constructor.apply(this, arguments);
        }
        WithSongsLayout.prototype.template = "apps/album/show/album_with_songs";
        WithSongsLayout.prototype.className = "album-wrapper";
        WithSongsLayout.prototype.regions = {
            regionMeta: ".region-album-meta",
            regionSongs: ".region-album-songs"
        };
        return WithSongsLayout;
    }(App.Views.LayoutView);
    Show.WithSongsCollection = function(_super) {
        __extends(WithSongsCollection, _super);
        function WithSongsCollection() {
            return WithSongsCollection.__super__.constructor.apply(this, arguments);
        }
        WithSongsCollection.prototype.childView = Show.WithSongsLayout;
        WithSongsCollection.prototype.tagName = "div";
        WithSongsCollection.prototype.sort = "year";
        WithSongsCollection.prototype.className = "albums-wrapper";
        return WithSongsCollection;
    }(App.Views.CollectionView);
    Show.PageLayout = function(_super) {
        __extends(PageLayout, _super);
        function PageLayout() {
            return PageLayout.__super__.constructor.apply(this, arguments);
        }
        PageLayout.prototype.className = "album-show detail-container";
        return PageLayout;
    }(App.Views.LayoutWithHeaderView);
    Show.HeaderLayout = function(_super) {
        __extends(HeaderLayout, _super);
        function HeaderLayout() {
            return HeaderLayout.__super__.constructor.apply(this, arguments);
        }
        HeaderLayout.prototype.className = "album-details";
        return HeaderLayout;
    }(App.Views.LayoutDetailsHeaderView);
    Show.Details = function(_super) {
        __extends(Details, _super);
        function Details() {
            return Details.__super__.constructor.apply(this, arguments);
        }
        Details.prototype.template = "apps/album/show/details_meta";
        return Details;
    }(App.Views.ItemView);
    Show.AlbumTeaser = function(_super) {
        __extends(AlbumTeaser, _super);
        function AlbumTeaser() {
            return AlbumTeaser.__super__.constructor.apply(this, arguments);
        }
        AlbumTeaser.prototype.tagName = "div";
        AlbumTeaser.prototype.className = "card-minimal";
        AlbumTeaser.prototype.initialize = function() {
            return this.model.set({
                subtitle: this.model.get("year")
            });
        };
        AlbumTeaser.prototype.triggers = {
            "click .menu": "album-menu:clicked"
        };
        return AlbumTeaser;
    }(App.Views.CardView);
    return Show.AlbumDetailTeaser = function(_super) {
        __extends(AlbumDetailTeaser, _super);
        function AlbumDetailTeaser() {
            return AlbumDetailTeaser.__super__.constructor.apply(this, arguments);
        }
        AlbumDetailTeaser.prototype.className = "card-detail";
        return AlbumDetailTeaser;
    }(Show.AlbumTeaser);
});

this.Kodi.module("ArtistApp", function(ArtistApp, App, Backbone, Marionette, $, _) {
    var API;
    ArtistApp.Router = function(_super) {
        __extends(Router, _super);
        function Router() {
            return Router.__super__.constructor.apply(this, arguments);
        }
        Router.prototype.appRoutes = {
            "music/artists": "list",
            "music/artist/:id": "view"
        };
        return Router;
    }(Marionette.AppRouter);
    API = {
        list: function() {
            return new ArtistApp.List.Controller();
        },
        view: function(id) {
            return new ArtistApp.Show.Controller({
                id: id
            });
        }
    };
    return App.addInitializer(function() {
        return new ArtistApp.Router({
            controller: API
        });
    });
});

this.Kodi.module("ArtistApp.List", function(List, App, Backbone, Marionette, $, _) {
    return List.Controller = function(_super) {
        __extends(Controller, _super);
        function Controller() {
            return Controller.__super__.constructor.apply(this, arguments);
        }
        Controller.prototype.initialize = function() {
            var artists;
            artists = App.request("artist:entities");
            return App.execute("when:entity:fetched", artists, function(_this) {
                return function() {
                    _this.layout = _this.getLayoutView(artists);
                    _this.listenTo(_this.layout, "show", function() {
                        return _this.artistsRegion(artists);
                    });
                    return App.regionContent.show(_this.layout);
                };
            }(this));
        };
        Controller.prototype.getLayoutView = function(artists) {
            return new List.ListLayout({
                collection: artists
            });
        };
        Controller.prototype.artistsRegion = function(artists) {
            var artistsView;
            artistsView = this.getArtistsView(artists);
            return this.layout.regionContent.show(artistsView);
        };
        Controller.prototype.getArtistsView = function(artists) {
            return new List.Artists({
                collection: artists
            });
        };
        return Controller;
    }(App.Controllers.Base);
});

this.Kodi.module("ArtistApp.List", function(List, App, Backbone, Marionette, $, _) {
    List.ListLayout = function(_super) {
        __extends(ListLayout, _super);
        function ListLayout() {
            return ListLayout.__super__.constructor.apply(this, arguments);
        }
        ListLayout.prototype.className = "artist-list";
        return ListLayout;
    }(App.Views.LayoutWithSidebarFirstView);
    List.ArtistTeaser = function(_super) {
        __extends(ArtistTeaser, _super);
        function ArtistTeaser() {
            return ArtistTeaser.__super__.constructor.apply(this, arguments);
        }
        ArtistTeaser.prototype.triggers = {
            "click .menu": "artist-menu:clicked"
        };
        return ArtistTeaser;
    }(App.Views.CardView);
    List.Empty = function(_super) {
        __extends(Empty, _super);
        function Empty() {
            return Empty.__super__.constructor.apply(this, arguments);
        }
        Empty.prototype.tagName = "li";
        Empty.prototype.className = "artist-empty-result";
        return Empty;
    }(App.Views.EmptyView);
    return List.Artists = function(_super) {
        __extends(Artists, _super);
        function Artists() {
            return Artists.__super__.constructor.apply(this, arguments);
        }
        Artists.prototype.childView = List.ArtistTeaser;
        Artists.prototype.emptyView = List.Empty;
        Artists.prototype.tagName = "ul";
        Artists.prototype.className = "card-grid--wide";
        return Artists;
    }(App.Views.CollectionView);
});

this.Kodi.module("ArtistApp.Show", function(Show, App, Backbone, Marionette, $, _) {
    return Show.Controller = function(_super) {
        __extends(Controller, _super);
        function Controller() {
            return Controller.__super__.constructor.apply(this, arguments);
        }
        Controller.prototype.initialize = function(options) {
            var artist, id;
            id = parseInt(options.id);
            artist = App.request("artist:entity", id);
            return App.execute("when:entity:fetched", artist, function(_this) {
                return function() {
                    App.execute("images:fanart:set", artist.get("fanart"));
                    _this.layout = _this.getLayoutView(artist);
                    _this.listenTo(_this.layout, "destroy", function() {
                        return App.execute("images:fanart:set", "");
                    });
                    _this.listenTo(_this.layout, "show", function() {
                        _this.getMusic(id);
                        return _this.getDetailsLayoutView(artist);
                    });
                    return App.regionContent.show(_this.layout);
                };
            }(this));
        };
        Controller.prototype.getLayoutView = function(artist) {
            return new Show.PageLayout({
                model: artist
            });
        };
        Controller.prototype.getDetailsLayoutView = function(artist) {
            var headerLayout;
            headerLayout = new Show.HeaderLayout({
                model: artist
            });
            this.listenTo(headerLayout, "show", function(_this) {
                return function() {
                    var detail, teaser;
                    teaser = new Show.ArtistTeaser({
                        model: artist
                    });
                    detail = new Show.Details({
                        model: artist
                    });
                    headerLayout.regionSide.show(teaser);
                    return headerLayout.regionMeta.show(detail);
                };
            }(this));
            return this.layout.regionHeader.show(headerLayout);
        };
        Controller.prototype.getMusic = function(id) {
            var options, songs;
            options = {
                filter: {
                    artistid: id
                }
            };
            songs = App.request("song:filtered:entities", options);
            return App.execute("when:entity:fetched", songs, function(_this) {
                return function() {
                    var albumsCollection, songsCollections;
                    songsCollections = App.request("song:albumparse:entities", songs);
                    console.log(songsCollections);
                    albumsCollection = App.request("albums:withsongs:view", songsCollections);
                    return _this.layout.regionContent.show(albumsCollection);
                };
            }(this));
        };
        return Controller;
    }(App.Controllers.Base);
});

this.Kodi.module("ArtistApp.Show", function(Show, App, Backbone, Marionette, $, _) {
    Show.PageLayout = function(_super) {
        __extends(PageLayout, _super);
        function PageLayout() {
            return PageLayout.__super__.constructor.apply(this, arguments);
        }
        PageLayout.prototype.className = "artist-show detail-container";
        return PageLayout;
    }(App.Views.LayoutWithHeaderView);
    Show.HeaderLayout = function(_super) {
        __extends(HeaderLayout, _super);
        function HeaderLayout() {
            return HeaderLayout.__super__.constructor.apply(this, arguments);
        }
        HeaderLayout.prototype.className = "artist-details";
        return HeaderLayout;
    }(App.Views.LayoutDetailsHeaderView);
    Show.Details = function(_super) {
        __extends(Details, _super);
        function Details() {
            return Details.__super__.constructor.apply(this, arguments);
        }
        Details.prototype.template = "apps/artist/show/details_meta";
        return Details;
    }(App.Views.ItemView);
    return Show.ArtistTeaser = function(_super) {
        __extends(ArtistTeaser, _super);
        function ArtistTeaser() {
            return ArtistTeaser.__super__.constructor.apply(this, arguments);
        }
        ArtistTeaser.prototype.tagName = "div";
        ArtistTeaser.prototype.className = "card-detail";
        ArtistTeaser.prototype.triggers = {
            "click .menu": "artist-menu:clicked"
        };
        return ArtistTeaser;
    }(App.Views.CardView);
});

this.Kodi.module("Images", function(Images, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        imagesPath: "dist/images/",
        defaultFanartPath: "fanart_default/",
        defaultFanartFiles: [ "wallpaper-443657.jpg", "wallpaper-45040.jpg", "wallpaper-765190.jpg", "wallpaper-84050.jpg" ],
        getDefaultThumbnail: function() {
            return API.imagesPath + "thumbnail_default.png";
        },
        getRandomFanart: function() {
            var file, path, rand;
            rand = helpers.global.getRandomInt(0, API.defaultFanartFiles.length - 1);
            file = API.defaultFanartFiles[rand];
            path = API.imagesPath + API.defaultFanartPath + file;
            return path;
        },
        parseRawPath: function(rawPath) {
            var path;
            path = "image/" + encodeURIComponent(rawPath);
            return path;
        },
        setFanartBackground: function(path, region) {
            var $body;
            $body = App.getRegion(region).$el;
            return $body.css("background-image", "url(" + path + ")");
        },
        getImageUrl: function(rawPath, type) {
            var path;
            if (type == null) {
                type = "thumbnail";
            }
            path = "";
            if (rawPath == null || rawPath === "") {
                switch (type) {
                  case "fanart":
                    path = API.getRandomFanart();
                    break;

                  default:
                    path = API.getDefaultThumbnail();
                }
            } else {
                path = API.parseRawPath(rawPath);
            }
            return path;
        }
    };
    App.commands.setHandler("images:fanart:set", function(path, region) {
        if (region == null) {
            region = "regionFanart";
        }
        return API.setFanartBackground(path, region);
    });
    App.reqres.setHandler("images:path:get", function(rawPath, type) {
        if (type == null) {
            type = "thumbnail";
        }
        return API.getImageUrl(rawPath, type);
    });
    return App.reqres.setHandler("images:path:entity", function(model) {
        if (model.thumbnail != null) {
            model.thumbnail = API.getImageUrl(model.thumbnail, "thumbnail");
        }
        if (model.fanart != null) {
            model.fanart = API.getImageUrl(model.fanart, "fanart");
        }
        return model;
    });
});

this.Kodi.module("NavMain", function(NavMain, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        getNav: function() {
            var navStructure;
            navStructure = App.request("navMain:entities");
            return new NavMain.List({
                collection: navStructure
            });
        }
    };
    return this.onStart = function(options) {
        return App.reqres.setHandler("navMain:view", function(items, model) {
            if (items == null) {
                items = [];
            }
            return API.getNav();
        });
    };
});

this.Kodi.module("NavMain", function(NavMain, App, Backbone, Marionette, $, _) {
    return NavMain.List = function(_super) {
        __extends(List, _super);
        function List() {
            return List.__super__.constructor.apply(this, arguments);
        }
        List.prototype.template = "apps/navMain/show/navMain";
        return List;
    }(Backbone.Marionette.ItemView);
});

this.Kodi.module("Shell", function(Shell, App, Backbone, Marionette, $, _) {
    var API;
    Shell.Router = function(_super) {
        __extends(Router, _super);
        function Router() {
            return Router.__super__.constructor.apply(this, arguments);
        }
        Router.prototype.appRoutes = {
            home: "homePage"
        };
        return Router;
    }(Marionette.AppRouter);
    API = {
        homePage: function() {
            var foo;
            return foo = "bar";
        },
        renderLayout: function() {
            var artist, playlistState, shellLayout;
            shellLayout = new Shell.Layout();
            App.root.show(shellLayout);
            App.addRegions(shellLayout.regions);
            playlistState = config.get("app", "shell:playlist:state", "open");
            if (playlistState === "closed") {
                this.alterRegionClasses("add", "shell-playlist-closed");
            }
            App.listenTo(shellLayout, "shell:playlist:toggle", function(_this) {
                return function(child, args) {
                    var state;
                    playlistState = config.get("app", "shell:playlist:state", "open");
                    state = playlistState === "open" ? "closed" : "open";
                    config.set("app", "shell:playlist:state", state);
                    return _this.alterRegionClasses("toggle", "shell-playlist-closed");
                };
            }(this));
            App.execute("images:fanart:set");
            artist = App.request("artist:entity", 1956);
            return App.execute("when:entity:fetched", artist, function() {
                return console.log(artist);
            });
        },
        renderNav: function() {
            var navView;
            navView = App.request("navMain:view");
            return App.regionNav.show(navView);
        },
        alterRegionClasses: function(op, classes, region) {
            var $body, action;
            if (region == null) {
                region = "root";
            }
            $body = App.getRegion(region).$el;
            action = "" + op + "Class";
            return $body[action](classes);
        }
    };
    return App.addInitializer(function() {
        return App.commands.setHandler("shell:view:ready", function() {
            API.renderLayout();
            API.renderNav();
            new Shell.Router({
                controller: API
            });
            App.vent.trigger("shell:ready");
            return App.commands.setHandler("body:state", function(op, state) {
                return API.alterRegionClasses(op, state);
            });
        });
    });
});

this.Kodi.module("Shell", function(Shell, App, Backbone, Marionette, $, _) {
    Shell.Layout = function(_super) {
        __extends(Layout, _super);
        function Layout() {
            return Layout.__super__.constructor.apply(this, arguments);
        }
        Layout.prototype.template = "apps/shell/show/shell";
        Layout.prototype.regions = {
            regionNav: "#nav-bar",
            regionContent: "#content",
            regionSidebarFirst: "#sidebar-first",
            regionPlaylist: "#playlist-bar",
            regionPlaylistSummary: "#playlist-summary",
            regionTitle: "#page-title .title",
            regionTitleContext: "#page-title .context",
            regionFanart: "#fanart"
        };
        Layout.prototype.triggers = {
            "click .playlist-toggle-open": "shell:playlist:toggle"
        };
        return Layout;
    }(Backbone.Marionette.LayoutView);
    return App.execute("shell:view:ready");
});

this.Kodi.module("SongApp.List", function(List, App, Backbone, Marionette, $, _) {
    var API;
    API = {
        getSongsView: function(songs) {
            return new List.Songs({
                collection: songs
            });
        }
    };
    return App.reqres.setHandler("song:list:view", function(songs) {
        return API.getSongsView(songs);
    });
});

this.Kodi.module("SongApp.List", function(List, App, Backbone, Marionette, $, _) {
    List.Song = function(_super) {
        __extends(Song, _super);
        function Song() {
            return Song.__super__.constructor.apply(this, arguments);
        }
        Song.prototype.template = "apps/song/list/song";
        Song.prototype.tagName = "tr";
        Song.prototype.className = "song table-row";
        Song.prototype.initialize = function() {
            var duration;
            duration = helpers.global.secToTime(this.model.get("duration"));
            return this.model.set({
                duration: helpers.global.formatTime(duration)
            });
        };
        Song.prototype.triggers = {
            "click .menu": "song-menu:clicked"
        };
        return Song;
    }(App.Views.ItemView);
    return List.Songs = function(_super) {
        __extends(Songs, _super);
        function Songs() {
            return Songs.__super__.constructor.apply(this, arguments);
        }
        Songs.prototype.childView = List.Song;
        Songs.prototype.tagName = "table";
        Songs.prototype.className = "songs-table table table-striped table-hover";
        return Songs;
    }(App.Views.CollectionView);
});

window.JST["apps/album/show/tpl/album_with_songs.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div class="album album--with-songs">\n    <div class="region-album-side">\n        <div class="region-album-meta"></div>\n    </div>\n    <div class="region-album-content">\n        <div class="region-album-songs"></div>\n    </div>\n</div>'));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["apps/album/show/tpl/details_meta.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div class="region-details-title">\n    <h2>'));
            _print(this.label);
            _print(_safe('</h2>\n</div>\n\n<div class="region-details-meta-side-first">\n    <div class="artist"><a href="#music/artist/'));
            _print(this.artistid);
            _print(_safe('">'));
            _print(this.artist);
            _print(_safe('</a></div>\n</div>\n\n<div class="region-details-meta-side-second">\n    '));
            if (this.genre.length > 0) {
                _print(_safe('\n    <div class="genres">\n        '));
                _print(this.genre.join(", "));
                _print(_safe("\n    </div>\n    "));
            }
            _print(_safe('\n</div>\n\n<div class="region-details-meta-below">\n    <div class="description">'));
            _print(this.description);
            _print(_safe("</div>\n</div>\n"));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["apps/artist/show/tpl/details_meta.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div class="region-details-title">\n    <h2>'));
            _print(this.label);
            _print(_safe('</h2>\n</div>\n\n<div class="region-details-meta-side-first">\n    <div class="formed">'));
            _print(this.formed);
            _print(_safe('</div>\n</div>\n\n<div class="region-details-meta-side-second">\n    '));
            if (this.genre.length > 0) {
                _print(_safe('\n    <div class="genres">\n        '));
                _print(this.genre.join(", "));
                _print(_safe("\n    </div>\n    "));
            }
            _print(_safe('\n</div>\n\n<div class="region-details-meta-below">\n    <div class="description">'));
            _print(this.description);
            _print(_safe("</div>\n</div>\n"));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["apps/navMain/show/tpl/navMain.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            var child, item, _i, _j, _len, _len1, _ref, _ref1;
            _print(_safe('<div id="nav-header"></div>\n<nav>\n    <ul>\n        '));
            _ref = this.items;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                item = _ref[_i];
                if (!(item.path !== "undefined" && item.parent === 0)) {
                    continue;
                }
                _print(_safe('\n            <li class="'));
                _print(item["class"]);
                _print(_safe('">\n                <a href="'));
                _print(item.path);
                _print(_safe('">\n                    <i class="'));
                _print(item.icon);
                _print(_safe('"></i>\n                    <span>'));
                _print(item.title);
                _print(_safe("</span>\n                </a>\n\n                "));
                if (item.children.length !== 0) {
                    _print(_safe("\n                <ul>\n                    "));
                    _ref1 = item.children;
                    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                        child = _ref1[_j];
                        if (!(child.path !== "undefined")) {
                            continue;
                        }
                        _print(_safe('\n                      <li><a href="'));
                        _print(child.path);
                        _print(_safe('">'));
                        _print(child.title);
                        _print(_safe("</a></li>\n                    "));
                    }
                    _print(_safe("\n                </ul>\n                "));
                }
                _print(_safe("\n            </li>\n        "));
            }
            _print(_safe("\n    </ul>\n</nav>"));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["apps/shell/show/tpl/shell.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div id="shell">\n\n    <a id="logo" href="#"></a>\n\n    <div id="nav-bar"></div>\n\n    <div id="header">\n\n        <h1 id="page-title">\n            <span class="context"></span>\n            <span class="title"></span>\n        </h1>\n\n        <div id="search-region">\n            <input id="search" title="Search">\n            <span id="do-search"></span>\n        </div>\n\n    </div>\n\n    <div id="main">\n\n        <div id="sidebar-one"></div>\n\n        <div id="content">Loading things...</div>\n\n    </div>\n\n    <div id="sidebar-two">\n        <div class="playlist-toggle-open"></div>\n        <div id="playlist-summary"></div>\n        <div id="playlist-bar"></div>\n    </div>\n\n    <footer id="player"></footer>\n\n</div>\n\n<div id="fanart"></div>\n<div id="fanart-overlay"></div>\n<div id="fanart-overlay-decal"></div>'));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["apps/song/list/tpl/song.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<td class="cell-first">'));
            _print(this.track);
            _print(_safe('</td>\n<td class="cell-label">'));
            _print(this.label);
            _print(_safe('</td>\n<td class="cell-last">'));
            _print(this.duration);
            _print(_safe("</td>"));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["views/card/tpl/card.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div class="card-inner card-'));
            _print(this.type);
            _print(_safe('">\n    <div class="artwork">\n        <a href="#'));
            _print(this.url);
            _print(_safe('" class="thumb" title="'));
            _print(this.label);
            _print(_safe('">\n            <img src="'));
            _print(this.thumbnail);
            _print(_safe('" />\n        </a>\n    </div>\n    <div class="meta">\n        <div class="title"><a href="#'));
            _print(this.url);
            _print(_safe('" title="'));
            _print(this.label);
            _print(_safe('">'));
            _print(this.label);
            _print(_safe("</a></div>\n        "));
            if (this.subtitle != null) {
                _print(_safe('\n            <div class="subtitle">'));
                _print(this.subtitle);
                _print(_safe("</div>\n        "));
            }
            _print(_safe("\n    </div>\n</div>"));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["views/empty/tpl/empty.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div class="empty-result">\n    <h2>No results found</h2>\n    <p>Have you done a library scan?</p>\n</div>'));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["views/layouts/tpl/layout_details_header.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div class="layout-container details-header">\n\n    <div class="region-details-side"></div>\n\n    <div class="region-details-meta">\n\n        <div class="region-details-title"></div>\n\n        <div class="region-details-meta-side-first"></div>\n\n        <div class="region-details-meta-side-second"></div>\n\n        <div class="region-details-meta-below"></div>\n\n    </div>\n\n</div>'));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["views/layouts/tpl/layout_with_header.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div class="layout-container with-header">\n\n    <header class="region-header"></header>\n\n    <section class="region-content"></section>\n\n</div>'));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};

window.JST["views/layouts/tpl/layout_with_sidebar_first.jst"] = function(__obj) {
    var _safe = function(value) {
        if (typeof value === "undefined" && value == null) value = "";
        var result = new String(value);
        result.ecoSafe = true;
        return result;
    };
    return function() {
        var __out = [], __self = this, _print = function(value) {
            if (typeof value !== "undefined" && value != null) __out.push(value.ecoSafe ? value : __self.escape(value));
        }, _capture = function(callback) {
            var out = __out, result;
            __out = [];
            callback.call(this);
            result = __out.join("");
            __out = out;
            return _safe(result);
        };
        (function() {
            _print(_safe('<div class="layout-container with-sidebar-first">\n\n    <section class="region-first"></section>\n\n    <section class="region-content"></section>\n\n</div>'));
        }).call(this);
        return __out.join("");
    }.call(function() {
        var obj = {
            escape: function(value) {
                return ("" + value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            },
            safe: _safe
        }, key;
        for (key in __obj) obj[key] = __obj[key];
        return obj;
    }());
};