// =============================================================================
// Name:            Layout
// Description:     Layout abstractions.
// =============================================================================

/**
 * Standard centered container.
 */
@mixin constrained-container($width: $width-container-max) {
  @include container($width);
  width: $width-containter;
}

/**
 * Set a property based on its layout for all breakpoints.
 *
 * @param $key
 *  The item you want the value for. e.g. height-footer
 * @param $property
 *   The property you want to assign that to e.g. margin-right or width
 */
@mixin set-layout($key, $property, $layouts: $layouts) {
  @each $size, $layout in $layouts {
    @if map-has-key($layout, $key) {
      @include at-bp($size) {
        #{$property}: map-get($layout, $key);
        // Playlist width changes state
        @if $key == 'width-playlist' {
          .shell-playlist-closed & {
            #{$property}: map-get($layout, 'width-playlist-closed');
          }
        }
      }
    }
  }
}

@mixin region-content() {
  position: relative;
  padding: 12px 12px 30px 12px;
  .with-header & {
    padding: 10px 20px 50px 20px;
  }
}
%region-content {
  @include region-content();
}